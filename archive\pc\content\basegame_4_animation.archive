/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2020 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <math.h>
#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void __fastcall __noreturn sub_106F8(); // weak
void __fastcall __noreturn sub_9EE3E(); // weak
__int64 __fastcall sub_B0004(); // weak
void __fastcall sub_CDBE5();
__int64 __fastcall sub_EA04E(); // weak
__int64 sub_173990();
_DWORD *__fastcall sub_210020();
__int64 sub_25AEAD();
__int64 __fastcall sub_326394(int a1, unsigned __int16 a2);
void __fastcall sub_3B5C19(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_501150(); // weak
void sub_6D5F35();
char __fastcall sub_744B62(__int64 a1, __int64 a2);
void sub_880020();
void sub_8B5CC1();
__int64 __fastcall sub_8B6A80(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_99DD1B(); // weak
__int64 __fastcall sub_9DCB47(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_A0767A(); // weak
void sub_BDC54C();
__int64 sub_CA7635();
void sub_D80009();
void __fastcall __noreturn sub_EBDE00(); // weak
void __fastcall __noreturn sub_FF000C(); // weak
char __fastcall sub_115290C();
void __fastcall sub_1174D79(__int64 a1, int a2);
void sub_1476A1D();
__int64 __fastcall sub_152872F(int a1, _DWORD *a2);
void __fastcall sub_1580057(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_16E0226(int a1, int a2);
void __fastcall __noreturn sub_1982BF0(); // weak
void sub_1ACA93A();
__int64 __fastcall sub_1AD71EA(_BYTE *a1, _BYTE *a2, _BYTE *a3);
void __fastcall sub_1B675A2();
__int64 __fastcall __far nullsub_2358(); // weak
__int64 __fastcall sub_1BDE153(__int64 _RCX, char a2);
void __fastcall sub_1C1D864(int a1);
void sub_1C9CA18();
void __fastcall sub_1D18912();
void __fastcall __noreturn sub_1D2632E(); // weak
void sub_1DE6B69();
void __fastcall sub_1F4443B(__int64 a1, __int64 a2, __int64 a3);
__int64 sub_1F8B26F();
void __fastcall __noreturn sub_1FB6A8D(); // weak
void sub_1FBD6D9();
__int64 sub_204E952();
void __fastcall sub_20762C5(__int64 a1, __int16 a2);
__int64 __fastcall sub_211A3EC();
void __fastcall __noreturn sub_21A1ACE(_DWORD *a1);
void sub_220A5D7();
void __fastcall __noreturn sub_222DC9B(__int64 a1, _BYTE *a2);
void __fastcall sub_22496FB(__int64 a1);
__int64 __fastcall sub_22A132E(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_2364AD3(); // weak
int __fastcall sub_268F641();
void __fastcall __noreturn sub_26E60E9(); // weak
void __fastcall sub_272B12F();
void sub_27CA0CC();
__int64 __fastcall sub_2A806A1();
void __fastcall sub_2C3BA29(volatile __int32 *a1);
__int64 __fastcall sub_2CD11CE(); // weak
void __fastcall sub_2D28F6E(__int64 a1, __int64 a2);
void sub_2DF01F8();
__int64 __fastcall sub_2EB5F62(_DWORD *a1);
void __fastcall __noreturn sub_3085430(); // weak
void __fastcall sub_313A2CD(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
__int64 sub_31AF830();
void __fastcall __noreturn sub_32085C8(); // weak
void __fastcall sub_34202F0(__int64 a1, __int16 a2);
char __fastcall sub_343D818(__int64 a1, unsigned int a2);
void __fastcall __noreturn sub_34C1703(); // weak
void __fastcall __noreturn sub_3635AE0(); // weak
__int64 sub_36DE835();
void __fastcall sub_37C1619(char a1, __int64 a2);
void sub_3839FEC();
void __fastcall sub_3873FA0();
__int64 __fastcall sub_3A1C673(__int64 a1, __int64 _RDX);
void __fastcall sub_3A3CFFC();
void __fastcall __noreturn sub_3A5408A(); // weak
void __fastcall sub_3A7CA9E();
void __fastcall sub_3C9EB22();
__int64 __fastcall __far nullsub_830(); // weak
__int64 __fastcall sub_40148E2(__int64 _RCX);
void __fastcall __noreturn sub_4150014(); // weak
__int64 __fastcall sub_422CB33();
__int64 __fastcall sub_440E488(char _CL);
__int64 __fastcall sub_44B3E9A(__int64 a1, _BYTE *a2);
char __fastcall sub_44C5D91();
void sub_454F412();
void sub_4558829();
__int64 __fastcall sub_4561340(); // weak
void sub_4562396();
void __fastcall sub_47D7765(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
void __fastcall __noreturn sub_4846B21(); // weak
void __fastcall __noreturn sub_49EE083(); // weak
__int64 __fastcall sub_4BED3B7(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_4DAAE66(); // weak
void __fastcall sub_4F41BCD(__int64 a1);
void sub_4F4FCF2();
__int64 __fastcall sub_521FBCA(__int64 a1, __int64 a2);
__int64 sub_522F3F9();
__int64 sub_524305C();
void sub_525F136();
__int64 __fastcall sub_52E7809(unsigned int *a1);
void __fastcall __noreturn sub_53E17EB(); // weak
void __fastcall __noreturn sub_53F0505(); // weak
void __fastcall __noreturn sub_5508FF3(); // weak
void __fastcall __noreturn sub_5767E62(); // weak
void __fastcall sub_57C46BB(__int64 a1, __int64 a2, __int64 a3, _DWORD *a4);
void __fastcall sub_586DF45();
__int64 sub_590901B();
__int64 __fastcall sub_595A590(); // weak
__int64 sub_59C1FD4();
void sub_5AE9F64();
void __fastcall sub_5B6BFBD(__int64 a1, unsigned __int16 _DX);
void __fastcall sub_5BE0DD4();
void __fastcall sub_5E089FB(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_5E37A75(); // weak
void __fastcall __noreturn sub_5F8FCFE(); // weak
void __fastcall sub_5FCE9FD(__int64 a1);
void __fastcall __noreturn sub_6037848(); // weak
__int64 __fastcall sub_608A7B6(__int64 a1);
void __fastcall __noreturn sub_60AC037(); // weak
void __fastcall __noreturn sub_61ADDBA(); // weak
void sub_6205338();
__int64 __fastcall sub_62892D5(unsigned int a1, unsigned __int16 a2);
void sub_6354804();
void __fastcall sub_64242F5();
void __fastcall __noreturn sub_64A44BA(__int64 a1, __int16 _DX);
void __fastcall sub_65A4ADA();
void __fastcall __noreturn sub_66FC5F1(); // weak
void __fastcall sub_67328D0(__int64 _RCX);
__int64 __fastcall sub_677C530(__int64 a1, __int64 a2);
void __fastcall sub_67C0000();
void __fastcall sub_696413F();
void __fastcall __noreturn sub_6C3A307(__int64 a1, unsigned __int16 a2);
void sub_6C4D32F();
void __fastcall sub_6E602CD(__int64 a1, __int16 _DX);
void __fastcall sub_6F4B58A();
__int64 __fastcall sub_70029EC(__int64 a1);
__int64 __fastcall sub_7045277();
void __fastcall __noreturn sub_70F0344(); // weak
void __fastcall sub_72C41DC();
void __fastcall sub_7311505(__int64 a1, __int16 _DX, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
unsigned __int8 __fastcall sub_74210BF();
__int64 __fastcall sub_742D9FB(__int64 a1, __int64 a2);
__int64 __fastcall sub_75C1AFC(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
void sub_7772EC8();
__int64 nullsub_4378(void); // weak
__int64 __fastcall sub_77AF542();
__int64 sub_77CE811();
__int64 __fastcall sub_77F75D3(__int64 a1, _BYTE *a2);
void __fastcall __noreturn sub_77FDD34(); // weak
void __fastcall sub_789112B();
__int64 __fastcall sub_7919571(__int64 a1);
void sub_797E5E4();
__int64 __fastcall sub_79CB2D7();
void __fastcall __noreturn sub_7BA8186(); // weak
void sub_7BB9638();
unsigned __int32 sub_7C4FC61();
void __noreturn sub_7CEF11A();
void sub_7DCCF83();
void sub_7F0475E();
__int64 __fastcall sub_80F7919();
__int64 __fastcall sub_8120C37(__int64 a1, __int64 a2);
void __fastcall sub_8152BE9();
void sub_81D1E7A();
int __fastcall sub_81F84C6(__int64 a1, _DWORD *a2);
void sub_8204004();
void __fastcall sub_8205821(_BYTE *a1);
__int64 __fastcall sub_8254457(); // weak
char __fastcall sub_82960E0(char _CL);
__int64 __fastcall sub_85666AC();
void __fastcall sub_8680390();
void sub_894F29E();
void __fastcall __noreturn sub_8990E75(__int64 a1);
void __fastcall sub_89B2E6D(__int64 a1, __int16 _DX);
char sub_8A9921E();
void sub_8B19FC4();
void __fastcall sub_8CE0957();
void __fastcall __noreturn sub_8D5D2CF(__int64 a1, __int64 a2);
int __fastcall sub_8D79A8C();
void __fastcall __noreturn sub_8DD16DA(); // weak
__int64 __fastcall sub_9064A2D(__int64 a1, int a2);
void sub_90699D1();
void __fastcall sub_90AF38E();
void sub_9352060();
void __fastcall __noreturn sub_93BAC32(); // weak
__int64 __fastcall sub_94D4260(__int64 a1, int a2);
void sub_954E84E();
void __fastcall __noreturn sub_960070F(); // weak
__int64 __fastcall sub_97BDF1E(); // weak
void sub_97D01EC();
void __fastcall sub_9883409(__int64 a1, unsigned __int16 a2);
void sub_990D57F();
__int64 sub_99B4B71();
void __fastcall __noreturn sub_9D6B146(); // weak
__int64 __fastcall sub_9E92C88();
void __fastcall sub_9F4A8EA(char a1);
__int64 __fastcall sub_9F62B9E(__int64 a1, __int64 a2);
__int64 sub_A006EA1();
void __fastcall sub_A2FE274(__int64 a1, __int64 a2);
void __fastcall sub_A4482B5(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_A4917C3(); // weak
void sub_A49D61F();
void __fastcall sub_A76F461(__int64 a1);
void sub_A844CA8();
void __fastcall __noreturn sub_A9A603B(); // weak
__int64 __fastcall sub_ADFE8A5(); // weak
__int64 sub_ADFE8AE(void); // weak
void sub_ADFF987();
void __fastcall sub_AEA79E9(__int64 a1, __int16 _DX);
void sub_AFAC9A5();
void __fastcall sub_B01B549();
void sub_B0E1021();
void __fastcall __noreturn sub_B0E2E1E(__int64 a1, unsigned __int16 a2);
__int16 __fastcall sub_B0EBB0E(__int64 a1, char a2);
void sub_B26260E();
void __fastcall __noreturn sub_B634A01(); // weak
char __fastcall sub_B6F95F5();
__int64 sub_B91290C();
void __fastcall __noreturn sub_BA22C65(); // weak
char __fastcall sub_BA2ADA1();
void __fastcall __noreturn sub_BB9DB4F(); // weak
void __fastcall sub_BBD3411(unsigned __int8 a1, volatile __int32 *a2);
__int64 __fastcall sub_BD2705D(__int64 a1);
void __fastcall sub_BFBAE56(__int64 a1, unsigned __int16 a2);
void __fastcall sub_C17FDAF(__int64 a1);
void __fastcall __noreturn sub_C19918A(); // weak
__int64 sub_C2AAA04();
void __fastcall sub_C2FAFCE();
void __fastcall sub_C942FFD();
void __fastcall __noreturn sub_C9D2403(char _CL, __int64 _RDX);
void __fastcall __noreturn sub_CA1C841(__int64 a1, __int32 a2);
void __fastcall sub_CA6A9F2(__int64 a1, __int64 a2);
char __fastcall sub_CADB9CD(__int64 a1);
void __fastcall __noreturn sub_CB3D863(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_CC79B4F(); // weak
void sub_CE2D9D3();
void __fastcall __noreturn sub_CE48BCD(); // weak
__int64 __fastcall sub_D0DEADC(char a1);
void __fastcall __noreturn sub_D1EB9C2(); // weak
void sub_D2C3027();
void sub_D2D0D9E();
void sub_D67DFEA();
void __fastcall sub_D703814(__int64 a1, unsigned __int16 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
void __fastcall __noreturn sub_D7217A8(); // weak
__int64 __fastcall sub_D980ACE(); // weak
void __fastcall sub_DBA0FCF(__int64 a1, __int16 _DX);
char __fastcall sub_DBF86F7(__int64 a1, unsigned __int16 a2);
void __fastcall sub_DCCDA6B(_DWORD *a1);
void __fastcall sub_DD2F74C();
void __noreturn sub_DE14DAB();
void sub_DFD1E87();
__int64 __fastcall sub_E064BA3(char a1);
void sub_E126B6F();
__int64 sub_E13129E();
void __fastcall sub_E172123();
void __fastcall sub_E1D3A6D(_BYTE *a1, __int64 a2);
void __fastcall sub_E3FEC9C(__int64 a1, _DWORD *a2);
void __fastcall sub_E402C99();
void __fastcall __noreturn sub_E42CD4E(__int64 a1, unsigned __int16 a2, __int64 a3);
void __fastcall __noreturn sub_E4564B8(__int64 a1, __int16 _DX);
void sub_E4BBC90();
__int64 sub_E642D82();
void sub_E7AE27F();
__int64 __fastcall sub_E8A6102(); // weak
void __fastcall sub_EA109F4();
void sub_EA1F473();
char __fastcall sub_EA7A74E();
unsigned __int32 __fastcall sub_EB3632D(__int64 a1, unsigned __int16 a2);
void __fastcall sub_EBF4F9C(__int64 a1);
__int64 __fastcall sub_EC8F68E(); // weak
void __fastcall sub_ECB548C(__int64 a1, int a2);
void __fastcall __noreturn sub_ECED386(__int64 a1, unsigned __int16 a2);
void __fastcall sub_ECF0AB1();
void __fastcall __noreturn sub_ED18463(); // weak
void __fastcall __noreturn sub_EFDB2B0(); // weak
void __fastcall __noreturn sub_F04889E(); // weak
void sub_F0D121A();
void __fastcall sub_F0E4840(__int64 a1, __int64 a2);
void __fastcall sub_F4C4F2D();
void __fastcall sub_F4D3575();
void sub_F591F2A();
void __fastcall sub_F595C37(int a1);
__int64 __fastcall sub_F5BCBE4(__int64 a1);
void __fastcall __noreturn sub_F5BEC47(__int64 a1, unsigned __int16 a2);
void sub_F60B417();
void __fastcall __noreturn sub_F64D237(); // weak
void sub_F6D89FC();
void __fastcall __noreturn sub_F7ACDDA(__int64 a1);
void sub_F95B9E9();
__int64 __fastcall sub_FA52A54(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_FBABC54(); // weak
__int64 sub_FD6396F();
char __fastcall sub_FD83F6A();
void __fastcall sub_FD9C489(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11);
__int64 __fastcall sub_FE39FEB(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_FE5B190(); // weak
__int64 __fastcall sub_1011C674(__int64 a1);
void __fastcall sub_1021341F(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
void __fastcall __noreturn sub_1028C411(); // weak
void __fastcall __noreturn sub_10304E26(char a1, int *_RDX);
void __fastcall sub_103DC5C7(__int64 _RCX);
void __fastcall __noreturn sub_1044BC6C(char _CL);
void __fastcall sub_1050DBF1(__int64 a1, __int64 a2);
__int64 sub_10561688();
void __fastcall sub_105EEBF1(__int64 a1, __int64 a2);
__int64 __fastcall sub_1074B025(__int64 a1);
__int64 __fastcall sub_109EC198(__int64 a1);
__int64 __fastcall sub_10B6F930(__int64 a1, unsigned __int16 a2);
__int16 __fastcall sub_10BBAAF6(__int64 a1, unsigned int a2);
__int64 __fastcall sub_10BD825D();
void __fastcall sub_10C65F63();
void __fastcall sub_10D2D123(__int64 a1, unsigned __int16 a2);
void __fastcall sub_10EE0205(__int64 a1, __int64 a2);
__int64 __fastcall sub_10EE7146(); // weak
void __fastcall __noreturn sub_10F316A6(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_10FE6FED(__int64 a1, unsigned int a2);
void __fastcall sub_1103BA7E();
void __fastcall sub_111C0931();
void sub_11340C31();
void __fastcall __noreturn sub_1156C5AD(); // weak
void __fastcall sub_116C6677(__int64 a1, unsigned __int16 a2);
void __fastcall sub_1186E701(__int64 a1, __int64 a2, __int64 a3);
__int64 sub_11960741();
void __fastcall __noreturn sub_11963F6A(); // weak
__int64 __fastcall sub_11AC8A7E();
__int64 __fastcall sub_11C4477E(__int64 a1, unsigned __int16 a2);
void __fastcall sub_11C4C1D2(__int64 a1, __int64 a2, volatile __int64 *a3);
void __fastcall sub_11E381EF();
void __fastcall sub_11FFA662(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_121B5A5C(); // weak
void __fastcall sub_1220D87F();
void __fastcall sub_122F212E(__int64 a1, __int16 _DX);
void sub_12301CF7();
__int64 __fastcall sub_124619F9(__int64 a1);
void __fastcall sub_1249251C(_DWORD *_RCX);
void __fastcall sub_1287ABE6(int a1, unsigned __int16 _DX);
int __fastcall sub_129C61C6(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_12BE8A3D(); // weak
void sub_12C0119C();
char __fastcall sub_12C8E07A(char a1);
void __fastcall __noreturn sub_12CF291C(); // weak
void __fastcall sub_12F40457(int a1);
void sub_1300B8E1();
__int64 __fastcall sub_130E751B(__int64 a1, __int64 a2);
void __fastcall sub_1311A4AE();
__int64 sub_1315203F();
void sub_13254A6E();
void __fastcall sub_1328E0A5(__int64 a1, unsigned __int16 a2);
void __fastcall sub_132D7FEC();
void __fastcall __noreturn sub_13320E2D(); // weak
void __fastcall sub_13380A4C();
char __fastcall sub_134830ED();
void __fastcall __noreturn sub_138BA51E(__int64 a1, int a2);
__int64 __fastcall sub_138F42F3(unsigned int a1, _BYTE *_RDX);
void __fastcall __noreturn sub_1392864A(); // weak
void __fastcall sub_139D7E2E(__int64 a1, __int16 _DX);
void __fastcall __noreturn sub_13B52CD8(); // weak
void __fastcall sub_13E49C86(char a1, __int64 a2);
void __fastcall __noreturn sub_13EE721B(); // weak
void sub_1422A97A();
int __fastcall sub_14282D84();
void __fastcall sub_142AADEA(__int64 a1, __int64 a2);
__int64 __fastcall sub_144E5A10(__int64 a1, _BYTE *a2, __int64 a3);
__int64 __fastcall sub_1456AA47(__int64 a1, __int64 a2);
void __fastcall sub_14587EF8(__int64 _RCX);
void sub_1481D865();
void __fastcall __noreturn sub_148E486C(); // weak
__int64 __fastcall sub_14B4594C(__int64 _RCX);
char __fastcall sub_14C8B83B();
void __fastcall __noreturn sub_14D550E2(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
void sub_14DF7520();
void sub_14EA2EEF();
void __fastcall __noreturn sub_14F97FCF(__int64 a1);
void __fastcall sub_15016C8A();
void __fastcall sub_150D578B();
__int64 __fastcall sub_1521E8A9();
void __fastcall __noreturn sub_1538EDFB(__int64 a1, char a2);
void __fastcall __noreturn sub_15399EC6(); // weak
void sub_15461427();
void sub_15730011();
void __fastcall __noreturn sub_157C3BE8(); // weak
void sub_15834798();
__int64 sub_1591EAB5();
void __fastcall __noreturn sub_1593BDF2(); // weak
void __fastcall __noreturn sub_159577C1(__int64 a1, int a2);
__int64 __fastcall sub_159B81EF();
__int64 __fastcall sub_159DD19D();
void __fastcall sub_15AADF04(__int64 a1, __int16 _DX);
void __fastcall __noreturn sub_15AAFAC5(); // weak
void __fastcall __noreturn sub_15C99456(); // weak
void __fastcall __noreturn sub_15E02138(); // weak
char __fastcall sub_15F674CF();
void __fastcall __noreturn sub_15F89823(); // weak
void __fastcall sub_1603940E();
__int64 sub_160C31F4();
void __fastcall __noreturn sub_16236558(); // weak
__int64 __fastcall sub_1628E32F(__int64 a1, __int64 _RDX);
void __fastcall sub_1635BB30(__int64 a1, char a2);
__int64 sub_163BC723();
void sub_1648EACC();
void __fastcall sub_164D8AB2();
void sub_16669910();
__int64 __fastcall sub_166C6CE2();
__int64 __fastcall sub_166E165D(__int64 a1, __int64 a2);
void sub_16700829();
void __fastcall __noreturn sub_16829F13(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_168F5D01(__int64 a1);
__int64 __fastcall sub_169006F0(__int64 a1, _BYTE *a2, unsigned int a3, double _XMM3_8);
__int64 __fastcall sub_16CBD6CB(int a1, __int64 a2);
void __fastcall sub_16E363E5();
void __fastcall __noreturn sub_16E537F4(); // weak
void __fastcall sub_16EE31C9(__int64 a1, unsigned __int16 a2);
void sub_170E0000();
void __fastcall sub_1712FF21();
void __fastcall __noreturn sub_17155A13(); // weak
void __fastcall __noreturn sub_171D6017(); // weak
void __fastcall sub_17367559(__int64 a1, unsigned __int16 a2);
void __fastcall sub_1745C52B(_BYTE *a1, unsigned __int16 a2);
void sub_1747A082();
__int64 __fastcall sub_174B3B39(__int64 _RCX, __int64 a2);
__int64 sub_1761DE67(void); // weak
void __fastcall sub_17626503();
void __fastcall sub_177A98DA(__int64 a1, __int16 _DX);
void __fastcall sub_177F4C8B(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
__int64 sub_1783EB68();
__int64 sub_17A49ED7();
void __fastcall sub_17B64834();
void __fastcall sub_17BA3149(__int64 a1, char a2);
void sub_17DE4C64();
void __fastcall __noreturn sub_17E32E71(); // weak
__m128 __fastcall sub_17F656F3(double a1, double a2);
void sub_1818632D();
void __fastcall __noreturn sub_1822629D(); // weak
__int64 __fastcall sub_1828211D(__int64 a1, __int64 a2, _QWORD *a3);
unsigned __int8 __fastcall sub_182A2306(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_182C2682(); // weak
__int64 sub_185B1309();
void __fastcall sub_18626A05(__int64 a1, __int16 _DX);
void __fastcall __noreturn sub_18732E5E(); // weak
void sub_18788932();
void sub_18959BA4();
void sub_18B191E0();
char __fastcall sub_18BF24C1();
void __fastcall sub_18D2455E(__int64 a1, _WORD *a2);
void __fastcall sub_18D7A5C8();
__int16 __fastcall sub_18DF6F04();
void __fastcall sub_18F2541D(__int64 a1, unsigned __int16 a2, __int64 a3, _DWORD *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42);
void __fastcall __noreturn sub_18FCFA8C(); // weak
void __fastcall sub_1909AE43();
__int64 __fastcall sub_191A165E(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_19207A41(); // weak
void __fastcall __noreturn sub_1920F64F(int a1);
void __fastcall sub_19231C10(__int64 a1, _BYTE *a2);
void __fastcall __noreturn sub_1949FEBC(__int64 a1, __int16 _DX);
void __fastcall sub_194C125F(__int64 a1, __int64 a2);
__int64 __fastcall sub_1954BE8C(); // weak
void __fastcall __noreturn sub_19550257(_BYTE *a1, __int64 a2);
void __fastcall __noreturn sub_1977846E(); // weak
__int64 sub_197D3785();
void sub_197F1A6E();
void sub_19837508();
void __fastcall __noreturn sub_198726DC(); // weak
void __fastcall sub_19B4FCB1(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_19B5626D(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_19B66498(__int64 a1, unsigned __int16 a2);
void sub_19C6BD4E();
void sub_19C78EF1();
void __fastcall sub_19CB0BAA(__int64 a1);
__int64 __fastcall sub_19EB76CA(__int64 a1, __int64 a2);
void sub_19FA1EE1();
char __fastcall sub_19FD4BA1();
__int64 __fastcall sub_19FFF2B1(__int64 a1, char a2);
void __fastcall __noreturn sub_1A0479DE(int a1, unsigned __int16 a2);
void __fastcall sub_1A084AF8(__int64 a1);
void __fastcall sub_1A190048(__int64 a1, char a2);
void __fastcall sub_1A2288C1();
void sub_1A3CD71E();
void __fastcall __noreturn sub_1A45E40F(); // weak
__int64 __fastcall sub_1A47A64F(__int64 a1, int a2);
void __fastcall sub_1A4D2825(__int64 a1, __int64 a2);
__int64 __fastcall sub_1A4F5DAB(__int64 a1, unsigned __int16 a2);
void sub_1A5668D0();
__int64 sub_1A615976();
__int64 __fastcall sub_1A64D28E(); // weak
__int64 __fastcall sub_1A736F8C(__int64 a1);
__int64 __fastcall sub_1A74E191(); // weak
__int64 __fastcall sub_1A830324(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_1A87E4A1(__int64 a1);
void __fastcall sub_1A95E1FE();
__int64 __fastcall sub_1A96347F(); // weak
void __fastcall sub_1A9C1A5F(int a1);
void __fastcall __noreturn sub_1AA08E54(); // weak
void sub_1AAF1846();
void __fastcall sub_1AB412A5(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
__int64 __fastcall sub_1AE1661A();
void sub_1AF0378A();
void __fastcall sub_1AF6F720(char a1);
__int64 __fastcall sub_1B008B75(); // weak
void __fastcall __noreturn sub_1B0B9486(); // weak
void __fastcall sub_1B168626();
int __fastcall sub_1B279905();
void __fastcall sub_1B2A244A(__int64 a1, _BYTE *a2);
void __fastcall __noreturn sub_1B43A17B(_DWORD *a1);
_DWORD *__fastcall sub_1B4BE676();
void sub_1B51520A();
void __fastcall __noreturn sub_1B5976C4(); // weak
void sub_1B79CD71();
void __fastcall sub_1B7B8F2F();
void __fastcall sub_1B8A12F1(__int64 a1);
void __fastcall __noreturn sub_1B8B7F10(); // weak
__int64 sub_1B8D9873();
void __fastcall sub_1B8F591E();
__int64 sub_1B8FD3E8(void); // weak
__int64 __fastcall sub_1B916E53(__int64 a1);
void sub_1B950158();
__int64 sub_1B96ADBB();
__int64 __fastcall sub_1B9C95E9(__int64 a1);
void __fastcall __noreturn sub_1BAC6342(); // weak
__int64 __fastcall sub_1BB11836(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_1BB55B36(__int64 a1, __int64 _RDX, __int64 a3);
void __fastcall __noreturn sub_1BCAEE05(); // weak
void __fastcall sub_1BD6AF64(__int64 a1, __int64 a2);
void sub_1BDCD915();
void __fastcall __noreturn sub_1BF1A265(); // weak
void __fastcall __noreturn sub_1BF5D44C(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_1BFBEF64(); // weak
char __fastcall sub_1C197538();
void __fastcall sub_1C26FFB5(__int64 a1, unsigned __int16 a2);
void __fastcall sub_1C2911BB(__int64 a1, unsigned __int64 a2);
void __fastcall __noreturn sub_1C3FA7AD(unsigned int *a1);
void __fastcall __noreturn sub_1C440548(__int64 a1);
__int64 __fastcall sub_1C72E4D7(); // weak
__int64 __fastcall sub_1C8346E2(); // weak
__int64 __fastcall sub_1C8973D7(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
__int64 __fastcall sub_1C8E1055();
__int64 sub_1C93BAD2();
void __fastcall __noreturn sub_1C94E0A1(); // weak
void __fastcall __noreturn sub_1C974262(); // weak
void sub_1C984DE1();
void __fastcall sub_1C9D2180();
void __fastcall __noreturn sub_1C9DDAE4(__int64 a1);
void __fastcall sub_1C9E78C6(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
void __fastcall sub_1CA43BC2(char a1, unsigned __int16 a2);
void __fastcall sub_1CB2A027(__int64 a1, __int16 _DX);
void __fastcall __noreturn sub_1CBF9DE3(); // weak
void __fastcall sub_1CD1E5E4(__int64 a1);
void __fastcall sub_1CD2AC81();
__int64 __fastcall sub_1CDDD444(__int64 a1, __int16 _DX);
__int64 sub_1CF6D8B8();
void __fastcall sub_1D000914(__int64 a1, unsigned __int16 a2);
void __fastcall sub_1D1F318E();
__int64 __fastcall sub_1D43BC5A(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53);
__int64 sub_1D44E0B5();
char __fastcall sub_1D644FA6(__int64 a1, char a2);
void sub_1D6D7B95();
void __fastcall __noreturn sub_1D861C86(); // weak
void __fastcall sub_1D8A5F77(char a1);
void sub_1DB933D1();
void sub_1DCBB88B();
void __fastcall __noreturn sub_1DD611FC(); // weak
void __fastcall __noreturn sub_1DF055B5(); // weak
void sub_1DF6055F();
void sub_1E004116();
__int64 sub_1E00914F();
void __fastcall __noreturn sub_1E0171E3(); // weak
void __fastcall sub_1E092DCC();
void __fastcall sub_1E1351C7(int a1);
void __fastcall __noreturn sub_1E156AEE(); // weak
void __fastcall __noreturn sub_1E25D110(); // weak
void __fastcall sub_1E2D42E2(_BYTE *a1);
__int64 __fastcall sub_1E3AF000(__int64 a1, __int64 a2);
__int64 __fastcall sub_1E460A80();
__int64 __fastcall nullsub_3447(_QWORD); // weak
__int64 __fastcall sub_1E5E9192(); // weak
void __fastcall __noreturn sub_1E84EA5D(); // weak
void __fastcall __noreturn sub_1E90BF7B(); // weak
__int64 sub_1EA4B459();
__int64 __fastcall sub_1EADA49B(); // weak
void __fastcall sub_1ED6DBDC();
__int64 __fastcall sub_1ED77E01(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_1ED8B713(); // weak
void __fastcall sub_1EE9788E();
void __fastcall sub_1EF1AEEA(__int64 a1, int a2);
__int64 sub_1EF65498();
void __fastcall sub_1EFCDF58(__int64 a1, __int16 _DX);
void sub_1F06CB75();
void sub_1F133091();
void __fastcall __noreturn sub_1F297192(__int64 a1, __int16 _DX);
void __fastcall sub_1F2CA505();
void __fastcall sub_1F371C5E();
void __fastcall sub_1F386A49();
void sub_1F3E14F2();
void sub_1F44407B();
void __fastcall sub_1F459C66();
void __fastcall sub_1F515532(__int64 a1, _DWORD *a2);
void sub_1F59879A();
void sub_1F8B32DB();
void sub_1FB12887();
__int64 __fastcall sub_1FBBB1A7(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62);
void sub_1FBC3815();
void __fastcall sub_1FC0B683();
__int64 sub_1FE0CC56();
void sub_1FEBF64D();
__int64 __fastcall sub_1FF557D3(int a1);
__int64 __fastcall sub_20133132(int a1);
void __fastcall sub_20261031();
char __fastcall sub_203D592A();
void sub_2051245A();
__int64 sub_205B229E();
__int64 __fastcall sub_2066F8D3(); // weak
__int64 __fastcall sub_20738593(); // weak
unsigned __int64 __fastcall sub_2078296E(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_208B3B25(); // weak
void __fastcall __noreturn sub_20A42790(_DWORD *a1);
void __fastcall __noreturn sub_20CA97CE(); // weak
void __fastcall __noreturn sub_20E7AEAD(); // weak
void sub_20F2BAAC();
__int64 __fastcall sub_20F48AAD(); // weak
void __fastcall __noreturn sub_21062F82(); // weak
void __fastcall sub_21080FE4(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23);
void __fastcall sub_21082716(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_2116364C(__int64 a1, __int64 _RDX);
__int16 __fastcall sub_211CAFEE();
__int64 __fastcall sub_21214272(__int64 a1, unsigned __int16 a2);
void sub_2123A32D();
void __fastcall sub_21310A09(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_214A32DB(); // weak
__int64 __fastcall sub_214F0DA2(__int16 a1);
void __fastcall sub_2174B745(char a1);
__int64 __fastcall sub_217BDFCA(__int64 a1, unsigned int a2);
void __fastcall __noreturn sub_2180B9D8(__int64 a1, __int64 a2);
_DWORD *__fastcall sub_21824783();
void sub_21A69176();
void __fastcall __noreturn sub_21C53075(); // weak
void __fastcall __noreturn sub_21C901AA(); // weak
char __fastcall sub_21C95BD3(__int64 a1, int a2);
__int64 sub_21EA806D();
void __fastcall sub_21EB84E7(__int64 a1, __int64 a2);
void __fastcall sub_21FF801E(char a1);
void sub_22023E67();
__int64 sub_2203E44A();
__int64 __fastcall sub_220C3029(__int64 a1);
void __fastcall __noreturn sub_223116BC(); // weak
void __fastcall sub_22357A32(__int64 a1, __int16 _DX);
void __fastcall __noreturn sub_22377D97(__int64 a1, __int16 _DX);
void sub_225634C0();
void __fastcall __noreturn sub_22607853(); // weak
void __fastcall __noreturn sub_22976D49(); // weak
void __fastcall sub_22B72E53();
void sub_22CAB4FE();
void __fastcall sub_22CB5218(_DWORD *a1);
void sub_22D71731();
void __fastcall __noreturn sub_23030ED4(); // weak
void __fastcall sub_2321C682(int a1, __int16 a2);
void __fastcall sub_2324FFA8(__int64 a1, unsigned __int16 a2);
void sub_23371DDF();
void __fastcall sub_2356B956(__int64 a1, __int64 a2, __int64 _R8);
__int64 __fastcall sub_2358A034(__int64 a1, int _EDX);
char __fastcall sub_23686067();
void __fastcall __noreturn sub_236EFFEF(); // weak
__int64 __fastcall sub_23761473(unsigned int *a1);
void __fastcall sub_2380240A(__int64 a1, _BYTE *a2);
void __fastcall sub_238CD186(__int64 a1);
void __fastcall sub_23BF26F3(_DWORD *a1);
void __fastcall __noreturn sub_23C398C9(__int64 _RCX, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, __int64 a14);
void __fastcall sub_23D0A6FA();
void sub_23F60BE2();
void __fastcall sub_23FB687B();
void __fastcall __noreturn sub_240003B3(); // weak
void __fastcall __noreturn sub_24016E01(); // weak
void sub_24082C2E();
void __fastcall __noreturn sub_240CA5C9(); // weak
void __fastcall __noreturn sub_240CC319(); // weak
void __fastcall sub_240DF633();
void sub_240FF5EA();
void __fastcall sub_241555C5(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
void __fastcall sub_24257148(__int64 a1);
void __fastcall __noreturn sub_242B5949(); // weak
__int64 __fastcall sub_242BF379(unsigned int *a1);
void sub_242E8913();
__int64 __fastcall sub_245D8D98(); // weak
__int64 __fastcall sub_245FE930(); // weak
void __fastcall sub_2461D83A(int a1);
void __fastcall sub_2461FC5E(__int64 a1);
void sub_246BA26D();
__int64 __fastcall sub_24749FC8();
__int64 __fastcall sub_24904E6A(); // weak
void sub_2499B1FC();
void __fastcall sub_24AE181A(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_24B0CF31();
__int64 sub_24B5558C();
void __fastcall __noreturn sub_24D8D7B6(); // weak
void __fastcall __noreturn sub_24E32205(); // weak
void __fastcall sub_24F16962(__int64 a1);
void sub_253A50C8();
void __fastcall sub_25463CAE(__int64 a1);
void __fastcall sub_2557594C(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_2564CD42(); // weak
void __fastcall __noreturn sub_257488F4(__int64 a1);
void __fastcall __noreturn sub_259A9209(__int64 a1, unsigned int a2);
__int64 sub_259FA6D1();
__int64 __fastcall sub_25AA8881(); // weak
void __fastcall __noreturn sub_25B9121F(); // weak
void __fastcall sub_25BBA7A5();
__int64 __fastcall sub_25C10458(); // weak
void __fastcall sub_25C14B0E(char a1);
__int64 __fastcall sub_25D78731(); // weak
__int64 sub_25D86866();
__int64 __fastcall sub_25F2EAFC(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
__int64 __fastcall sub_25FCC314(); // weak
void __fastcall __noreturn sub_25FCD69B(); // weak
__int64 __fastcall sub_260C1494();
void sub_2624733D();
void __fastcall sub_2629432A();
void sub_26299EBA();
void sub_263579BB();
void __fastcall sub_263826F7();
void __fastcall sub_267C9598(__int64 a1, int a2);
void __fastcall sub_268430BB();
void sub_2684A3FE();
void sub_26967DB0();
void __fastcall sub_26B4DFA7();
void sub_26C4BDC7();
void __fastcall sub_26C706F2();
__int64 __fastcall sub_26CC6128(); // weak
void __fastcall sub_26D65A35();
void __fastcall __noreturn sub_26D8524E(); // weak
__int64 sub_26DD30ED();
void sub_26E20827();
void __fastcall __noreturn sub_26E37766(); // weak
void sub_26E63F53();
void sub_26E6A261();
char __fastcall sub_26FF8A7E();
void sub_2706216B();
__int64 __fastcall sub_270D5F13(); // weak
void sub_271D96D4();
void __fastcall sub_2735EDE4(__int64 a1);
__int64 sub_27368827();
__int64 sub_27386F68();
void __fastcall sub_2742EA8C(char a1, unsigned __int16 a2);
void sub_27788D5C();
void __fastcall __noreturn sub_278254F7(__int64 a1, __int16 _DX);
void sub_278B16C9();
void __fastcall __noreturn sub_278E258E(); // weak
void __fastcall sub_27975C45();
void __fastcall __noreturn sub_279C3482(); // weak
void __fastcall __noreturn sub_27A4F040(); // weak
void __fastcall sub_27C9A12C(__int64 a1, unsigned __int16 a2);
__int64 sub_27D19E99();
__int64 __fastcall sub_28138687(); // weak
void __fastcall sub_283EFD8B();
__int64 __fastcall sub_28475AFA(__int64 a1, int a2);
void __fastcall sub_28534FF0();
void __fastcall sub_286E1B63(__int64 a1, unsigned int a2);
__int64 sub_28886B5D();
__int64 __fastcall sub_2896056C();
void sub_28ADEE16();
void sub_28BC7F36();
__int64 sub_28CCBDAB();
void __fastcall sub_28D07445();
void __fastcall __noreturn sub_28DCEE15(); // weak
void __fastcall __noreturn sub_28E15572(); // weak
__int64 __fastcall sub_28E1C496(__int64 _RCX, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
void sub_28E437F1();
void __fastcall sub_28EECF5C();
void __fastcall __noreturn sub_2916D118(); // weak
void __fastcall sub_292A7747();
__int64 sub_292AFAAB();
char __fastcall sub_293DB514(__int64 a1, __int16 _DX);
void __fastcall sub_2948C0AF();
void __fastcall __noreturn sub_296D6B85(); // weak
void __fastcall sub_29717F50(__int64 _RCX, _BYTE *_RDX);
void sub_299664B1();
void sub_299FBB93();
void sub_29A97C06();
void sub_29AEFD16();
__int64 __fastcall sub_29C9F5FF(); // weak
void __fastcall sub_29DFF6D5();
void sub_29E375D2();
__int64 sub_29EA04B6();
void __fastcall __noreturn sub_29F9C5C8(__int64 a1, unsigned __int16 a2);
void __fastcall sub_2A006161(__int64 a1);
void sub_2A1819F0();
void __fastcall sub_2A22A38B();
void __fastcall sub_2A37BC4B(__int64 a1, char a2);
__int64 __fastcall sub_2A3DC1BB(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_2A46A2C9(); // weak
void sub_2A6027EE();
void __fastcall sub_2A866B35(__int64 a1);
void __fastcall __noreturn sub_2A8B6867(__int64 a1, _BYTE *_RDX);
void __fastcall __noreturn sub_2A963A07(); // weak
void __fastcall __noreturn sub_2AA06FA0(); // weak
void __fastcall sub_2ABC2527();
void sub_2AE3BF69();
void __fastcall __noreturn sub_2AE57A42(); // weak
void sub_2AE90FCA();
void sub_2AF52CF1();
void __fastcall sub_2B067127(char a1, __int64 a2);
void __fastcall __noreturn sub_2B06F20D(); // weak
void __fastcall sub_2B0C6C0A(unsigned __int64 a1);
void __fastcall sub_2B5A6779();
__int64 sub_2B766C3C();
void __fastcall __noreturn sub_2B781ED8(); // weak
void __fastcall sub_2B7CEA64();
__int64 __fastcall sub_2B82860D(__int64 a1, __int64 a2);
void __fastcall sub_2B8576AE(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_2BBFCC1B(); // weak
void __fastcall sub_2BEAE36A(__int64 a1, __int64 a2);
unsigned __int8 sub_2BF66E19();
void sub_2BFA2711();
__int64 __fastcall sub_2C1F889B();
void sub_2C248161();
void __fastcall __noreturn sub_2C28351A(int _ECX, __int64 a2);
void __fastcall sub_2C2B9600(__int64 a1, unsigned __int16 a2);
void sub_2C3E1A1D();
void sub_2C40CA04();
void sub_2C4B1D23();
void sub_2C58A5E4();
void __fastcall sub_2C72F99A();
__int64 __fastcall sub_2C7639CE(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_2C77DD66(); // weak
void sub_2C8035A7();
__int64 __fastcall sub_2C83512E(char a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
void sub_2C8A1E81();
__int64 __fastcall sub_2C8E7074(); // weak
void __fastcall __noreturn sub_2C9F3B2A(); // weak
void __fastcall sub_2CB6D4C6();
void __fastcall sub_2CCFD6F4(char a1);
void __fastcall sub_2CD136BF(_DWORD *a1);
void __fastcall sub_2CE6E1D7(__int64 a1, unsigned __int16 a2);
void __fastcall sub_2CE80A57();
void sub_2CEDF659();
void __fastcall __noreturn sub_2D0BCD47(); // weak
unsigned __int64 __fastcall sub_2D0EFE8E(_DWORD *a1, _BYTE *a2);
__int64 __fastcall sub_2D16A7B2();
void __fastcall sub_2D2C3B75(__int64 a1);
void sub_2D3629FA();
__int64 __fastcall sub_2D41557E(); // weak
__int16 __fastcall sub_2D43461F();
void __fastcall sub_2D4D4275();
void sub_2D54A2C9();
__int64 sub_2D5C0880();
void __fastcall __noreturn sub_2D60B9D2(); // weak
void __fastcall sub_2D6B46D9(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_2D6C3D1E(); // weak
__int64 __fastcall sub_2D6CDB37(__int64 a1);
void __fastcall sub_2D718A21(__int64 a1);
void sub_2D86FD04();
void __fastcall sub_2DAEAB60();
void sub_2DB8FE1E();
void sub_2DBD2937();
void __fastcall __noreturn sub_2DC54297(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_2DC690CA(); // weak
char __fastcall sub_2DD317DD();
void __fastcall sub_2DD4E7F4(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_2DE912BE(__int64 a1, unsigned __int16 a2);
void sub_2DF8405D();
void __fastcall __noreturn sub_2DFBE923(__int64 a1, unsigned __int16 a2);
void sub_2E094B2D();
void __fastcall __noreturn sub_2E1B0358(char a1, _BYTE *a2);
void __fastcall sub_2E218561(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_2E251262(); // weak
__int64 __fastcall sub_2E2FB189(__int64 a1, __int16 _DX);
void __fastcall __noreturn sub_2E372137(); // weak
void __fastcall __noreturn sub_2E3FE2E1(); // weak
void __fastcall sub_2E493472(_BYTE *a1);
void __fastcall __noreturn sub_2E532450(); // weak
void sub_2E64E69D();
__int64 __fastcall nullsub_3136(); // weak
__int64 __fastcall sub_2E701676(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_2E710E62();
void __fastcall __noreturn sub_2E72C821(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_2E7E60B6(); // weak
void sub_2E805562();
void __fastcall sub_2EA26E53(__int64 a1, int a2);
void sub_2EA78CC4();
__int64 __fastcall sub_2EA8B8F9(); // weak
void sub_2EA96065();
void sub_2EC552E1();
void __fastcall sub_2ED27E02(char *a1, unsigned __int16 a2);
char __fastcall sub_2ED8FE75(__int64 a1, __int16 _DX);
void sub_2EF6284E();
void sub_2F0AA543();
void __fastcall sub_2F22F46A(__int64 _RCX, __int64 _RDX);
void sub_2F365772();
void __fastcall sub_2F52C09D();
void sub_2F796656();
void __fastcall __noreturn sub_2F854D17(); // weak
void __fastcall __noreturn sub_2F861352(__int64 a1, char a2);
void __fastcall sub_2F87C836();
void __fastcall sub_2F9D0B3D(__int64 a1, unsigned int *a2);
void __fastcall sub_2F9D770F(__int64 a1, __int64 _RDX);
void __fastcall sub_2FAF1B81();
void __fastcall __noreturn sub_2FB15B4C(); // weak
void __fastcall sub_2FB8F3DD(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_2FDD369B(); // weak
void sub_300000C0();
void __fastcall sub_300F3029();
void sub_301C5CA4();
void __fastcall sub_301CF85F(__int64 a1);
void __fastcall __noreturn sub_30368498(); // weak
void __fastcall __noreturn sub_3039A9FA(); // weak
void __fastcall sub_303B144D(__int64 a1, int a2);
void sub_303C6D16();
void __fastcall __noreturn sub_304293DD(); // weak
__int64 __fastcall sub_305B362B(__int64 _RCX, unsigned __int16 _DX);
void __fastcall sub_305F30A8();
void __fastcall sub_307AD33C();
void __fastcall sub_307DD7D4();
void __fastcall sub_307EF6A1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
void __fastcall __noreturn sub_309C524F(); // weak
void __fastcall __noreturn sub_30B4F7C0(); // weak
void __fastcall sub_30C52867(__int64 a1);
void __fastcall __noreturn sub_30C55BC5(); // weak
void __fastcall __noreturn sub_30DB0FE2(); // weak
void __fastcall sub_30F4D7FE();
void sub_310B200E();
void __fastcall sub_3114AE18();
__int64 sub_311F7169(void); // weak
void __fastcall __noreturn sub_31302436(); // weak
void __fastcall sub_31312131();
void sub_31559E49();
void __fastcall __noreturn sub_315DD09C(); // weak
void sub_315DD860();
__int64 __fastcall sub_31680E66(__int64 a1);
void sub_316EE43E();
void __fastcall sub_317084D6();
char __fastcall sub_31719900(__int64 a1, _DWORD *a2);
__int64 __fastcall sub_31752D82(); // weak
__int64 __fastcall sub_31829DD8(__int64 a1, __int64 a2);
__int64 __fastcall sub_3195267B(unsigned int a1);
__int64 __fastcall sub_3195AF8C(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_31BA82E9(__int64 a1, __int16 _DX);
void __fastcall sub_31EC96B9();
void __fastcall sub_31ED2CFC(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_321F37C4(char _CL, unsigned __int16 a2);
void __fastcall sub_32291F5D(__int64 a1, _BYTE *a2);
void __fastcall __noreturn sub_323AB15F(); // weak
void __fastcall sub_323FF419(__int64 a1);
__int64 __fastcall sub_32458543(__int64 a1, unsigned __int16 a2);
void __fastcall sub_3251C9EA(__int64 a1);
void __fastcall __noreturn sub_325B2CE4(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_325F2AB9(); // weak
void __fastcall sub_329E0E4E(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_32B10FCC(); // weak
char __fastcall sub_32BC2C1A();
void sub_32C417C8();
void __fastcall sub_32DC857D(__int64 a1, __int64 a2);
void __fastcall sub_32F0D3E9();
void sub_32F49880();
__int64 sub_32FB4B01();
void sub_33006FA5();
void __fastcall sub_33194D5D();
void __fastcall __noreturn sub_331C2F8C(__int64 a1, __int16 _DX);
void __fastcall __noreturn sub_33225834(int *a1);
void __fastcall sub_332C9BA0();
void sub_3331C415();
void __fastcall __noreturn sub_333DD7D3(__int64 a1);
__int64 __fastcall sub_335FD1A2(); // weak
void __fastcall sub_337039A9(__int64 a1, __int16 _DX);
void sub_3375E58F();
void __fastcall sub_33790D29();
void sub_3391D629();
__int64 sub_339C3CE5();
void __fastcall __noreturn sub_33A1123C(); // weak
void __fastcall __noreturn sub_33A71C8D(); // weak
char __fastcall sub_33B47741();
void __fastcall sub_33F10518();
__int64 __fastcall sub_33FB62FA(__int64 a1, char a2);
__int64 __fastcall sub_33FB6302(__int64 a1, char a2);
void sub_33FD1E4B();
void sub_340BF641();
void __fastcall sub_341C7B93();
void sub_34300D18();
void sub_34307E8C();
__int64 __fastcall sub_3447C4D1(__int64 _RCX);
void __fastcall __noreturn sub_3459BA02(__int64 a1, __int16 _DX);
void __fastcall __noreturn sub_3461143A(); // weak
__int64 __fastcall sub_346DB156(__int64 (*a1)(void));
void __fastcall sub_346FDF25();
void __fastcall sub_34713E0D(__int64 a1, unsigned __int16 a2);
void sub_34850A13();
void sub_34929BE6();
void __fastcall sub_34A4B0F9();
__int64 __fastcall sub_34A877B7(__int64 a1);
__int64 __fastcall sub_34BD1E7E(__int64 a1, __int64 _RDX);
void sub_34BFD7C7();
void __fastcall sub_34D2B2EE(char a1, _BYTE *a2);
void __fastcall __noreturn sub_34D76D7B(); // weak
void __fastcall sub_34DFBA0D(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
void __fastcall sub_34F047FB();
void sub_34F04CC9();
char __fastcall sub_34FE7F92(__int64 a1);
__int64 __fastcall sub_34FF4BCD(); // weak
__int64 __fastcall sub_3502C9C2(); // weak
void __fastcall sub_350D0ED4(__int64 a1, __int64 _RDX);
__int64 sub_35245782();
void sub_352E3007();
void __fastcall sub_353734DD();
void __fastcall sub_353A1CB1(__int64 a1, __int16 _DX);
__int64 __fastcall sub_3544487B();
__int64 __fastcall sub_35605D85();
__int64 __fastcall sub_3583BB72(); // weak
void sub_35852037();
__int16 __fastcall sub_35A29E45(__int64 a1, __int64 a2);
int __fastcall sub_35B45785();
__int64 __fastcall sub_35C8A63A(); // weak
void __fastcall sub_35CFC35C();
void __fastcall __noreturn sub_35D4D6A5(); // weak
void sub_35F9C7D4();
char __fastcall sub_36029DE1(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_360723E5(); // weak
void __fastcall __noreturn sub_360EF661(); // weak
void sub_36219DF6();
void __fastcall __noreturn sub_3623C2F4(); // weak
void sub_362902F3();
void __fastcall __noreturn sub_3632822A(); // weak
void __fastcall __noreturn sub_363C737E(); // weak
__int64 __fastcall sub_365A3642(__int64 a1, __int16 _DX);
void __fastcall sub_365C91C7(__int64 a1, __int64 a2);
void sub_3662ECB3();
_DWORD *__fastcall sub_36631C49();
void __fastcall sub_366B26BA(_BYTE *a1, _BYTE *a2);
void __fastcall __noreturn sub_369FCE78(); // weak
__int64 __fastcall sub_36A9AD5C();
char __fastcall sub_36AA39C6(int a1, int a2);
void __fastcall __noreturn sub_36CC929B(__int64 _RCX);
void __fastcall __noreturn sub_36CF73DC(); // weak
unsigned __int8 __fastcall sub_36FDFB2E(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_36FE3DB3();
__int64 __fastcall sub_3700BF90(__int64 a1);
__int64 __fastcall sub_3701258B(__int64 a1, __int64 a2);
void sub_3702F262();
void __fastcall sub_370AB06A();
void __fastcall __noreturn sub_370F1CC3(); // weak
__int64 __fastcall sub_372E2137(); // weak
void sub_37303958();
void sub_37365AC9();
void __fastcall __noreturn sub_3744A9A2(); // weak
__int64 __fastcall sub_3744EFD3(__int64 a1, __int64 a2, __int64 a3, __int64 a4);
void __fastcall __noreturn sub_374BCA8E(); // weak
void __fastcall sub_3760CC04();
__int64 __fastcall sub_377DEFB5(__int64 a1);
void __fastcall sub_37B4BBFC(char a1);
void __fastcall __noreturn sub_37C2BD49(); // weak
void __fastcall __noreturn sub_37D9FFAD(char _CL);
__int64 __fastcall sub_37DB8E8D(); // weak
__int64 __fastcall sub_37F211FC(); // weak
__int64 __fastcall sub_37FB7E3A(); // weak
void __fastcall sub_3809BBF8();
__int64 __fastcall sub_380D79FF(__int64 a1);
void __fastcall sub_3813B95A();
void __fastcall __noreturn sub_3816B380(__int64 a1, __int64 _RDX);
void __fastcall sub_3827E423(char a1);
__int64 __fastcall sub_382F6AE7(char a1);
void __fastcall __noreturn sub_38316AA1(int a1);
void __fastcall __noreturn sub_383FB0C0(__int64 a1, __int64 a2);
__int64 sub_384941A5();
__int64 __fastcall sub_384BC048(__int64 a1, __int16 _DX);
void __fastcall __noreturn sub_3854490C(); // weak
void __fastcall sub_385868A2(__int64 a1, char a2);
void __fastcall sub_3864C065();
void __fastcall sub_386C0BBF(__int64 a1, char a2);
void __fastcall sub_386C4F1B();
void sub_386D5AE9();
void __fastcall __noreturn sub_38809C68(); // weak
void __fastcall sub_38943398(int a1, char a2);
__int64 __fastcall sub_389A499F(__int64 a1, unsigned int *a2);
void __fastcall __noreturn sub_38AC5319(); // weak
int __fastcall sub_38BA6CD0();
void sub_38BC5621();
void __fastcall __noreturn sub_38C89E31(char a1);
__int64 __fastcall sub_38DFCECB(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_38E29408(); // weak
void __fastcall __noreturn sub_38F33B46(); // weak
void __fastcall sub_38F368D7(__int64 a1, __int64 _RDX, __int64 a3);
__int64 __fastcall sub_3903EC7A();
void __fastcall __noreturn sub_390C081F(); // weak
void sub_3913D229();
void __fastcall sub_39216F8B(char _CL, char _DL);
void __fastcall __noreturn sub_39290FD9(__int64 _RCX);
void __fastcall sub_3932C580(__int64 a1, unsigned int a2);
void __fastcall __noreturn sub_3937D79F(); // weak
void __fastcall __noreturn sub_39583493(); // weak
void __fastcall __noreturn sub_39636791(); // weak
void sub_39636BB4();
void sub_3973CE41();
void sub_39848207();
void __fastcall __noreturn sub_39849003(_DWORD *a1, unsigned __int16 a2);
void __fastcall __noreturn sub_398E7C90(); // weak
void __fastcall __noreturn sub_39AABA19(); // weak
void __fastcall sub_39AB62D3(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_39BE11DB(__int64 a1, unsigned int a2);
__int64 __fastcall sub_39CCD56B(); // weak
unsigned __int8 __fastcall sub_39D96B9C(char a1, unsigned __int16 a2);
void __fastcall __noreturn sub_39E181F5(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_39E8117D(__int64 a1, unsigned __int16 a2);
void __fastcall sub_39E87C69();
void sub_39EA1B07();
void __fastcall sub_39EF2153(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
void __fastcall __noreturn sub_39F90817(__int64 a1, __int64 a2);
__int64 sub_39FF84D8();
__int64 __fastcall sub_3A0ED9A2(); // weak
char __fastcall sub_3A1B3E29();
__int64 __fastcall sub_3A2899B0();
void sub_3A2E80AF();
__int64 __fastcall sub_3A3920C6(__int64 a1);
__int64 __fastcall sub_3A3C1B44(__int64 a1, unsigned __int16 a2);
void sub_3A4A386E();
void sub_3A4F0DD4();
void __fastcall sub_3A4F74E5(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_3A4FBD17(); // weak
void __fastcall sub_3A6906D7(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
__int64 __fastcall sub_3A7006AC(__int64 a1, _DWORD *a2);
__int64 __fastcall sub_3A743BB4(); // weak
void __fastcall sub_3A7DD92D(__int64 a1, __int16 _DX, __int64 a3, __int64 a4);
void __fastcall sub_3A867ED2();
void __fastcall __noreturn sub_3A8EDC3A(); // weak
void sub_3A90CFA0();
void sub_3A9B899A();
void sub_3AA7E3DB();
void __fastcall __noreturn sub_3AAA3EC5(); // weak
void sub_3AB0CE09();
__int64 __fastcall sub_3AC67DDA(); // weak
unsigned __int32 __fastcall sub_3AF5DC34(__int64 a1, __int64 a2);
void sub_3AFBFC92();
void __fastcall __noreturn sub_3B0FEC1D(__int64 a1, unsigned __int8 a2);
void __fastcall sub_3B29700A(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_3B373012(__int64 a1, __int64 a2, __int64 a3, unsigned int a4);
void __fastcall __noreturn sub_3B387D7C(_BYTE *a1);
__int64 __fastcall sub_3B3D4D37(); // weak
void __fastcall sub_3B3E83D6(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_3B47A42E(); // weak
void __fastcall sub_3B6186CA();
char __fastcall sub_3B641406();
__int64 sub_3B66D714();
char __fastcall sub_3B68194E();
__int64 __fastcall sub_3B809BD1(); // weak
void __fastcall __noreturn sub_3B82033A(); // weak
void __fastcall __noreturn sub_3B863405(); // weak
void __fastcall sub_3B8AFAE1();
__int64 __fastcall sub_3BA84397(int a1);
void __fastcall sub_3BADB63E(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
void sub_3BB9C105();
void __fastcall __noreturn sub_3BBDD9EB(); // weak
__int64 __fastcall sub_3BDD214F(); // weak
void __fastcall sub_3BE3F661();
void sub_3BF001EB();
void __fastcall __noreturn sub_3BFE8B8A(); // weak
void __fastcall sub_3BFE9657(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_3C048926(unsigned int a1, __int16 _DX);
void __fastcall __noreturn sub_3C24A3DC(__int64 a1, __int64 a2);
void sub_3C2BEF10();
void __fastcall sub_3C2DA234();
__int64 __fastcall sub_3C32E8E9(); // weak
void sub_3C37BB1F();
void __fastcall sub_3C3E283C();
void __fastcall __noreturn sub_3C4EBF22(__int64 a1, unsigned __int16 a2);
__int64 __fastcall sub_3C5BA76D(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, int a7, int a8, int a9, __int64 a10);
void __fastcall __noreturn sub_3C6B20D6(); // weak
void sub_3C700893();
__int64 __fastcall sub_3C7ADBE6(__int64 a1);
void __fastcall sub_3C8CE942(__int64 a1, unsigned __int16 a2);
void __fastcall __noreturn sub_3C968F1F(); // weak
void __fastcall sub_3C970FE2();
void __fastcall sub_3C987FDD();
void __fastcall sub_3C9F701E();
void __fastcall sub_3CA0F1DC();
void sub_3CB1BBE7();
__int64 sub_3CB64CB8();
void __fastcall __noreturn sub_3CC7D57A(); // weak
void sub_3CD1EB08();
void __fastcall sub_3CE07BEB();
void sub_3CF2AB59();
void __fastcall sub_3CF3B1B4();
void __fastcall sub_3CF7EF3F();
__int64 __fastcall sub_3D0C6544(); // weak
__int64 __fastcall sub_3D11E0FB(); // weak
void sub_3D121320();
void __fastcall sub_3D4764DB(int a1);
__int64 __fastcall sub_3D47F98C();
void __fastcall sub_3D4A57F4();
void sub_3D523D8C();
void __fastcall __noreturn sub_3D55F30B(__int64 a1, int _EDX);
void __fastcall __noreturn sub_3D64A3AF(); // weak
void __fastcall __noreturn sub_3D671EDE(); // weak
void __fastcall sub_3D7E071C(__int64 a1, __int16 _DX);
void __fastcall __noreturn sub_3D97F59D(__int64 a1, __int64 a2);
void __fastcall __noreturn sub_3DA201A8(__int64 a1, _BYTE *a2);
void __fastcall __noreturn sub_3DBF53D5(); // weak
__int64 __fastcall sub_3DC6F19F(__int64 a1, _BYTE *_RDX);
__int64 __fastcall sub_3DC9C5C9(__int64 a1, __int64 _RDX);
void __fastcall sub_3DDC64CE();
__int64 sub_3DE0D700();
void sub_3DF268E0();
void __fastcall __noreturn sub_3E009F3D(); // weak
void __fastcall __noreturn sub_3E0E3D4C(); // weak
void __fastcall sub_3E180CD6();
void sub_3E33DD4B();
void sub_3E3AF6CC();
__int64 __fastcall sub_3E3B4A39(); // weak
void __fastcall sub_3E6EF1EA(char a1, __int64 a2);
void __fastcall sub_3E8F8EFD();
void __fastcall sub_3E97D81C();
void sub_3E9E987E();
void __fastcall __noreturn sub_3EA0A311(); // weak
int __fastcall sub_3EA1E1AE(__int64 _RCX);
void sub_3EB61DBC();
__int64 __fastcall sub_3EC169DA(__int64 a1, _WORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, __int64 a34, __int64 a35, __int64 a36, __int64 a37, __int64 a38, __int64 a39, __int64 a40, __int64 a41, __int64 a42, __int64 a43, __int64 a44, __int64 a45, __int64 a46, __int64 a47, __int64 a48, __int64 a49, __int64 a50, __int64 a51, __int64 a52, __int64 a53, __int64 a54, __int64 a55, __int64 a56, __int64 a57, __int64 a58, __int64 a59, __int64 a60, __int64 a61, __int64 a62, __int64 a63);
void sub_3ECB269F();
void __fastcall sub_3ED2A1B5();
void __fastcall sub_3EF93227(__int64 a1, __int64 a2);

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_22; // weak
_UNKNOWN unk_26; // weak
_UNKNOWN unk_29; // weak
_UNKNOWN unk_4B; // weak
_UNKNOWN unk_4C; // weak
_UNKNOWN unk_4D; // weak
int dword_50 = 0; // weak
_UNKNOWN unk_69; // weak
_UNKNOWN unk_6F; // weak
_UNKNOWN loc_671F1B; // weak
char byte_AA01AF[] = { '\x1F' }; // weak
char byte_150847D[2585] =
{
  '\0',
  'X',
  '\0',
  'f',
  '\0',
  'g',
  '\0',
  'm',
  '\0',
  'v',
  '\0',
  'w',
  '\0',
  '~',
  '\0',
  '\x7F',
  '\0',
  '\x81',
  '\0',
  '\x85',
  '\0',
  '\x89',
  '\xFF',
  '\xF1',
  '\xDF',
  '\x7F',
  '\xAC',
  '\x03',
  '_',
  '\x81',
  '\xFF',
  '\xF1',
  '\x1F',
  '\x89',
  '\xFF',
  '\xF1',
  '\x1F',
  '\x8B',
  '\xFF',
  '\xF1',
  '\x9F',
  '\x8D',
  '\xFE',
  '\xE1',
  '\xDF',
  '\x7F',
  '<',
  'b',
  '>',
  'A',
  '\xAE',
  'R',
  '\xE2',
  'm',
  '!',
  '\x82',
  '~',
  '\xB1',
  '\xA9',
  '\xF2',
  '\xA1',
  '\x8E',
  'X',
  '\"',
  '#',
  '\x83',
  '\x18',
  '\x82',
  '\xD3',
  'c',
  '\x1A',
  '\xF1',
  '\x9F',
  'G',
  '\xE3',
  '\x81',
  '\x13',
  'd',
  '\x1C',
  '\xA3',
  '`',
  'P',
  'M',
  'r',
  '\x93',
  'c',
  '\xEC',
  '\x91',
  '\xA7',
  '\x7F',
  '\xF4',
  'Q',
  '\xE4',
  '\x7F',
  '\x03',
  '\x92',
  'h',
  '\x7F',
  '\xF8',
  'a',
  '\xA5',
  '\x7F',
  '\xF6',
  '\xC1',
  '\xA5',
  '\x7F',
  '\x10',
  '\xB2',
  ')',
  '\x7F',
  '\x05',
  '\x12',
  'h',
  '\x7F',
  '\x8D',
  '1',
  '\xE7',
  '~',
  '\x93',
  'A',
  '\xA8',
  '}',
  '\x99',
  'a',
  'i',
  '|',
  '\xBD',
  '\x81',
  'e',
  '\x8C',
  '<',
  '\xA2',
  '\xA3',
  '\x8A',
  '\xB0',
  '\xF2',
  '\x9A',
  '\x81',
  '\xFF',
  'C',
  '\b',
  '\x98',
  'B',
  '\xE2',
  '\x9E',
  '~',
  '\xFA',
  '\xE1',
  '\x11',
  '\xB9',
  '\xC3',
  '\xC2',
  '\xD8',
  '\x86',
  '\xF0',
  '\x11',
  '\x94',
  '8',
  '\xC4',
  '\xA2',
  'X',
  'l',
  '\x0F',
  '\x12',
  '\xE3',
  '|',
  '\xEF',
  '\xD1',
  '\xDC',
  '\x82',
  '\xF7',
  '\xA5',
  'q',
  '-',
  'i',
  '\xA6',
  'r',
  '.',
  '\xFE',
  '\x7F',
  '}',
  '%',
  '}',
  '%',
  '\0',
  '\x80',
  'X',
  '\xFD',
  '9',
  'f',
  '\xB4',
  '~',
  'u',
  '\x82',
  '\xD1',
  '\x90',
  'p',
  '\x03',
  'B',
  '\x89',
  '\\',
  '\x96',
  '\xE0',
  '\xFD',
  '\xD2',
  '\x8D',
  '\x8F',
  '\x8E',
  '_',
  't',
  '\xA3',
  '\xFF',
  '\xE7',
  'v',
  '\xD2',
  '~',
  '\xBC',
  '\x82',
  '\x8C',
  '\xCB',
  '\xAC',
  '\x18',
  '\0',
  '\x80',
  '\0',
  '\x80',
  'G',
  '\xCC',
  '7',
  '\x19',
  '[',
  '\xFF',
  '\xCD',
  's',
  '\xD5',
  '}',
  'B',
  '\x83',
  '\xE8',
  '\xFA',
  '\xF8',
  'a',
  '\xBE',
  'v',
  '\b',
  '\x91',
  '\xE1',
  '\xF8',
  '\x9C',
  ']',
  '\xDA',
  'y',
  '\x86',
  'h',
  '_',
  '\xFE',
  '\xDA',
  'k',
  '\xD9',
  '\x7F',
  '\xCA',
  '\x82',
  '\xFC',
  '\xD7',
  ',',
  'z',
  '\x1E',
  '\xDA',
  '\x0E',
  '\x96',
  '\x0F',
  '\x86',
  '\x19',
  '\xDC',
  '\xE5',
  '\x93',
  '\x94',
  ')',
  '\xA3',
  '\xD7',
  'w',
  '=',
  '\xEA',
  '\xC0',
  '\xEA',
  '\x87',
  'R',
  '\xDF',
  '\xC6',
  'E',
  '\x06',
  '\xBE',
  '\xBF',
  '\x87',
  '\xAB',
  '\xF2',
  '!',
  'G',
  '\x19',
  '\xF1',
  '\x10',
  'D',
  '\x9F',
  '\xF2',
  '\x9A',
  'v',
  'q',
  '\x94',
  'T',
  '\xB4',
  '\xAD',
  '\xFA',
  '\x1B',
  '\x8F',
  ']',
  '\x82',
  ')',
  '\xA1',
  '\xFF',
  '\xFF',
  '\xFB',
  '\x7F',
  'H',
  '\xA0',
  'C',
  '\x8D',
  '\xE0',
  '\x8F',
  '\xE1',
  '\x05',
  '\xCC',
  '\xD3',
  '4',
  '{',
  '\x1A',
  '{',
  '\x82',
  '\xE0',
  '!',
  '\xDD',
  'B',
  '\x86',
  '\xD5',
  '\x80',
  '\x94',
  '\xD7',
  '\x9F',
  '\xE1',
  '\xF6',
  '\x8E',
  '&',
  '\x8A',
  '\xC8',
  '\xD0',
  '\x81',
  '\xE7',
  '\x85',
  '\x9E',
  'b',
  '\x8F',
  '\x17',
  '\xC3',
  '\x02',
  '\x8A',
  '\x18',
  '\x92',
  '\x1F',
  '\x95',
  'v',
  '\x03',
  '\x9D',
  '\xCE',
  'y',
  '~',
  '\x1D',
  's',
  ',',
  '\xE4',
  '\x92',
  '\xD7',
  '\'',
  '\x88',
  '\x03',
  '|',
  '\xE8',
  '\xDC',
  '\xE8',
  '\xDA',
  '\xE6',
  '\x8C',
  '\xD1',
  '\x83',
  '\x19',
  '\xD9',
  '%',
  '\xE1',
  '@',
  '\x98',
  '\r',
  '\x88',
  'T',
  '\xCF',
  '\xFA',
  '\xFF',
  ')',
  '\x82',
  '\0',
  '\x80',
  '\0',
  '\x80',
  '\xFC',
  '\xFF',
  '+',
  '~',
  '^',
  '\xFE',
  '\xB2',
  'y',
  'I',
  'v',
  '@',
  'o',
  '\xE9',
  '\xFB',
  '\xCF',
  'r',
  'x',
  '\x89',
  '\xAA',
  '\x9B',
  '\xEE',
  '\xFD',
  'c',
  'k',
  '\x10',
  '\x89',
  'B',
  '\x84',
  '\x93',
  '\xFE',
  '\xA9',
  'm',
  '\xC4',
  '\x80',
  '\xF2',
  'z',
  '\x04',
  '\xFC',
  '\xF2',
  'b',
  '\xA1',
  '\x81',
  'z',
  's',
  '\x1D',
  '\xFF',
  '\xFF',
  'p',
  '\xBB',
  '\xFD',
  'S',
  'm',
  '\x04',
  '\x8F',
  '\a',
  '\x81',
  'U',
  '\xFE',
  '~',
  'l',
  '\xCE',
  '\x85',
  '\xF0',
  '\x82',
  '\x82',
  '\xFE',
  '\xE9',
  'l',
  'y',
  '}',
  '\xC1',
  '\x82',
  '\x04',
  '\xFC',
  '\x04',
  'a',
  '\xFC',
  'y',
  '\x94',
  '\x82',
  '\xBA',
  '\xFF',
  '\xB5',
  'w',
  '\xE0',
  '\xFE',
  '\x1A',
  'o',
  '$',
  '\xFD',
  '\x1B',
  'e',
  '\x0F',
  '\xFC',
  '\x7F',
  '`',
  'x',
  '\xFD',
  '\xB0',
  'f',
  'i',
  '\xFC',
  '\xE8',
  'a',
  '\x9A',
  '\xF6',
  '\xDD',
  'O',
  '\xEE',
  '\xF1',
  '\xAA',
  'E',
  'G',
  '\xF1',
  'h',
  'D',
  '<',
  '\xF4',
  'f',
  'J',
  '\r',
  '\xFE',
  '\xC3',
  'i',
  '\xFF',
  '\xFE',
  '\x06',
  'p',
  '\xB5',
  '\xFD',
  '\xE5',
  'g',
  '?',
  '\xFC',
  '@',
  'a',
  '\xB7',
  '\xF7',
  '-',
  'S',
  ')',
  '\x80',
  '\x83',
  '\x86',
  '\x97',
  '\xFB',
  'Z',
  '_',
  '8',
  '\x80',
  '\x89',
  '\x86',
  '\x17',
  '\xF9',
  ')',
  'W',
  '5',
  '\x7F',
  '6',
  '\x87',
  'N',
  '\xFA',
  '\xD5',
  'Z',
  '\x8B',
  '~',
  'c',
  '\x86',
  'x',
  '\x80',
  '\xE6',
  '\xF1',
  '_',
  '\xBA',
  '\x8E',
  '~',
  '{',
  '\xDB',
  '_',
  'U',
  '\x81',
  '\xB8',
  '0',
  'I',
  's',
  '\xD1',
  '\x1D',
  '\xBC',
  '\xC8',
  '\x9B',
  '<',
  '\xC9',
  '\x12',
  '\xAD',
  '\xA1',
  '\xD6',
  '\xD5',
  '\x99',
  '\x9C',
  '\xCE',
  '/',
  '\x80',
  '\xEE',
  '%',
  'u',
  'o',
  '\x91',
  '&',
  '\x15',
  '\x82',
  '\xE6',
  '&',
  '\xE0',
  '\xBB',
  'S',
  ':',
  '\xFF',
  '\xC7',
  '4',
  '\x96',
  '\b',
  'J',
  '\xB7',
  '\'',
  '\xE3',
  '\x92',
  '\xB1',
  '\xFA',
  '\xA6',
  's',
  '\xA4',
  '\x9C',
  '\xF4',
  '\xF7',
  '\xC2',
  '[',
  '\xB2',
  'l',
  'o',
  'n',
  '\x11',
  '\xDA',
  '\x8A',
  '\x90',
  'n',
  '\xD9',
  '\xAB',
  '\x8A',
  '*',
  '\x0E',
  '\x97',
  'F',
  '\xFD',
  '{',
  '\x15',
  '\xF9',
  '\xB5',
  '\x84',
  'b',
  '\x8A',
  '\xE5',
  '\xA7',
  '\xFC',
  '\xC7',
  '1',
  '\x96',
  '\n',
  'J',
  '\xB3',
  '\'',
  '\xFD',
  '\xFF',
  'O',
  '\x80',
  '\xC1',
  '~',
  '\0',
  '\x80',
  '\xBF',
  '\xF5',
  '\xA1',
  '\x84',
  '\x8A',
  '\x8A',
  '\xD8',
  '\xB0',
  '\x9C',
  '\xB7',
  'g',
  '\xC7',
  'c',
  'H',
  '\x96',
  '8',
  '\xEB',
  '\xA8',
  '2',
  '\x13',
  '\xA4',
  'N',
  '(',
  'k',
  '\x8D',
  '\xAD',
  '\x0F',
  'c',
  'T',
  '\xE0',
  '\xBD',
  '\xC0',
  '\x8C',
  '\x88',
  '4',
  '\x94',
  '\x1A',
  '\xEC',
  '\x12',
  '?',
  '\xFF',
  '\xFF',
  '\0',
  '\x80',
  '\0',
  '\x80',
  '\x06',
  '\x80',
  '\0',
  '\0',
  '&',
  '\xCB',
  '\xCF',
  '\xEB',
  '\xC9',
  '\xFC',
  '\xFC',
  '\xFB',
  '\xBF',
  '\xC8',
  '\xC8',
  '\xC8',
  '\xC8',
  '\xFC',
  '\xFC',
  '\xC8',
  '\xDC',
  '\xE7',
  '\xCB',
  '\xCB',
  'K',
  '\xCB',
  'K',
  '\xCB',
  '\xCB',
  'K',
  '\x8B',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\x83',
  '\x80',
  '\x80',
  '\x15',
  '\n',
  '\x1A',
  '#',
  '#',
  '#',
  '#',
  '&',
  '\"',
  '\"',
  '\"',
  ')',
  '!',
  '!',
  '!',
  '+',
  '+',
  '\b',
  '\x1A',
  '\x0F',
  '\x16',
  '\x14',
  '\0',
  '\0',
  ' ',
  '\x01',
  'B',
  'W',
  '\a',
  '\x12',
  'I',
  '\0',
  '\v',
  '+',
  '\x05',
  '\x14',
  '\xCD',
  'A',
  '\x01',
  '\x0F',
  '[',
  ')',
  '!',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  'e',
  '`',
  'e',
  '2',
  '(',
  '\0',
  '\0',
  '@',
  '\x8C',
  '.',
  '\xC4',
  'K',
  'A',
  'R',
  'K',
  '\xBC',
  '\x1B',
  '\0',
  '\0',
  '\x8C',
  '\x06',
  '\0',
  '\t',
  'G',
  '\x88',
  '\t',
  'E',
  'C',
  'R',
  '2',
  'W',
  '\xC3',
  '\0',
  '\0',
  '\0',
  'P',
  '\x1A',
  '`',
  '\x05',
  '\xFA',
  '\x02',
  '\xA2',
  '\x91',
  '\xFD',
  '\x85',
  'x',
  '\0',
  '!',
  '$',
  '\x94',
  '\xA6',
  '\x98',
  '\xD9',
  '\xCE',
  'E',
  '^',
  '\x13',
  ':',
  '\xA9',
  '(',
  ' ',
  '\xE8',
  '\x86',
  'P',
  '*',
  '\x8C',
  '!',
  '\x11',
  'H',
  'I',
  '\x84',
  '!',
  '$',
  '\xFF',
  '\xF5',
  'k',
  '<',
  '\xDE',
  '\xE3',
  '\xA6',
  '3',
  '\xBE',
  '\x13',
  '\xCC',
  '\xD9',
  '\x95',
  '\xEC',
  'o',
  'L',
  '\f',
  ' ',
  'W',
  '\0',
  '\xD5',
  '\xEC',
  '\xC6',
  ']',
  '\x8C',
  '\x9A',
  '\0',
  '\0',
  'O',
  '\xEE',
  '\xFF',
  '\xB9',
  '\x0F',
  '\xF0',
  '\xE0',
  '\xFA',
  '!',
  '|',
  '=',
  '\x82',
  'G',
  '\x1F',
  '\xDE',
  '\xBC',
  '\xF2',
  '\x9D',
  '\xDF',
  '\x12',
  'x',
  '\x0E',
  '\x99',
  '\xE3',
  '*',
  '\r',
  'z',
  '\xD7',
  '\x0E',
  '3',
  '\xC8',
  '\x05',
  '\x13',
  '\xB7',
  'L',
  'W',
  '\x14',
  '\n',
  '\xCD',
  '\x91',
  '\x9D',
  's',
  '\x0E',
  'A',
  'r',
  '\x7F',
  '5',
  'I',
  '<',
  'N',
  '\xC0',
  ']',
  '{',
  '\xCD',
  '\xC7',
  'R',
  'k',
  '\xDE',
  'l',
  '{',
  '\x95',
  '\xBF',
  '\xE5',
  ';',
  'U',
  '\x1C',
  '(',
  '\xF7',
  '#',
  '\xF6',
  'D',
  '\x99',
  '\xF7',
  ':',
  'i',
  '\x95',
  '\"',
  'N',
  '\x02',
  '\x95',
  'X',
  '\xCA',
  '\xC9',
  '\x19',
  'T',
  '\xB2',
  '\xB8',
  '4',
  '/',
  '\xF5',
  '\xBA',
  '&',
  '\x1E',
  'q',
  '\x10',
  '\'',
  '\x9B',
  'I',
  '2',
  '\x8B',
  'z',
  '\xBB',
  ')',
  '\xA5',
  '7',
  '\xDD',
  '\xCC',
  '\x8D',
  '\xFC',
  '\x02',
  '\xFB',
  '\r',
  '\xE7',
  'V',
  '\xA3',
  '\xD3',
  '\x8C',
  'q',
  'M',
  'M',
  '\xF6',
  '\xCE',
  '9',
  '\xCC',
  '\xB2',
  'q',
  'F',
  'y',
  '\xB8',
  '\xAE',
  '5',
  '\f',
  '\x89',
  '\x94',
  '\xC6',
  '\xD3',
  '\x90',
  '\xAF',
  '\x82',
  '\xAC',
  '*',
  '*',
  'h',
  '\x8D',
  '\xB4',
  '\xB4',
  '\xB0',
  'D',
  '\x89',
  '\x8E',
  'k',
  '\xE2',
  '\0',
  '\xF0',
  '\xFD',
  '\xFF',
  '/',
  '\x01',
  '\xD8',
  '\x17',
  '\x87',
  '\xD0',
  '=',
  '\xBD',
  '\a',
  '\x87',
  '7',
  '\x7F',
  '\x7F',
  '~',
  '<',
  '0',
  '\xEE',
  '%',
  '\xCB',
  'a',
  'j',
  '2',
  '\xBA',
  '\x1C',
  '\xBF',
  '\x1D',
  '\x04',
  '\x95',
  '\x16',
  '\xE3',
  'H',
  ' ',
  '\r',
  '\x92',
  ':',
  '\xC9',
  '\x0E',
  '\xDD',
  '\x9A',
  '\x8F',
  '\xAD',
  'n',
  '\xA2',
  '\xAD',
  '$',
  '@',
  'B',
  '\r',
  '\'',
  '{',
  '\f',
  '\xE7',
  '\x8B',
  '\x92',
  '\x17',
  'y',
  '\x14',
  '\x03',
  'e',
  '\f',
  '\x16',
  'J',
  'b',
  '\x84',
  '\xEC',
  '\xD1',
  'k',
  '3',
  '\xA1',
  '\x95',
  '\xF5',
  '\xE9',
  '\x0E',
  '\x8B',
  '\xDA',
  '\x13',
  '\v',
  '\xE5',
  '\xEE',
  '\xE9',
  '9',
  '\x82',
  '\xAF',
  '4',
  'x',
  '\xDE',
  'i',
  'K',
  '\x9A',
  '\x91',
  ' ',
  '\xAB',
  '\x91',
  'J',
  '\xA5',
  '\x14',
  '0',
  'O',
  'F',
  '9',
  'g',
  '\x9B',
  '\0',
  '\r',
  '\x87',
  '7',
  'c',
  '\xDA',
  'b',
  '\xDA',
  'r',
  'r',
  'U',
  '\n',
  's',
  '\xAE',
  'J',
  '\xB7',
  '\x8B',
  'U',
  'a',
  '9',
  'z',
  '\x1E',
  'p',
  '!',
  'q',
  '%',
  '4',
  ',',
  '\x93',
  '\xCE',
  'P',
  '\x80',
  '\xC2',
  'V',
  '\xB5',
  '\x14',
  'S',
  '6',
  '\x8D',
  '\xB4',
  'i',
  'Q',
  'c',
  '\x16',
  'W',
  '\x9E',
  '\xC8',
  '\xE4',
  '\xC4',
  '\xBB',
  'M',
  '\xA0',
  'P',
  '\xA5',
  '\x89',
  'p',
  '@',
  '\xCD',
  '\x9A',
  '\xA6',
  '\xB2',
  'r',
  '\x15',
  '\xCF',
  '\xE2',
  'H',
  '@',
  '6',
  '\x1D',
  '\xB9',
  '\x85',
  '6',
  '\x1D',
  '\xC6',
  '\xAD',
  '\xD0',
  '\x1A',
  '\x9F',
  '0',
  'b',
  'N',
  'L',
  '\xA0',
  '\x98',
  '\xA6',
  '\x13',
  '\xD5',
  '\xD8',
  '$',
  '1',
  '\x16',
  'A',
  '\xAB',
  '\xB0',
  '5',
  '\xD0',
  '\xAF',
  '\0',
  '\xD9',
  '\xD5',
  '\xDE',
  '\x18',
  '\xC0',
  '\xDA',
  '\xDA',
  '\x05',
  '\xC1',
  '\x88',
  '\x06',
  '\x12',
  '\x9A',
  '^',
  '/',
  '\xB5',
  '\xBD',
  '\xE2',
  '\xED',
  '\x97',
  '%',
  '\x8A',
  '\xB0',
  'l',
  '@',
  '\xF6',
  '\xB0',
  '\xD3',
  '\xCC',
  '\x19',
  'f',
  '\xCC',
  'y',
  '\x80',
  'X',
  '\xD1',
  'y',
  '\x18',
  '\xB4',
  '\x1C',
  'j',
  '\x19',
  '\xDB',
  '$',
  '\x8D',
  '\x8D',
  '\xD0',
  '\x8D',
  '\xF7',
  '4',
  '6',
  '1',
  '\xFA',
  '.',
  ';',
  '\x9B',
  '\xA7',
  'R',
  '-',
  '\f',
  '\x10',
  '\x10',
  '\f',
  '/',
  '\xED',
  'q',
  '\x18',
  '\xD4',
  '\xD9',
  '\x8B',
  '\xA6',
  '\x19',
  '\x85',
  'u',
  '\x95',
  '\x02',
  '\x98',
  'G',
  '\xC7',
  '\x97',
  '\xD9',
  '\xED',
  '\xF3',
  '\xB4',
  '\xF0',
  '\a',
  '\xF6',
  '\x02',
  '\xBF',
  '\xD3',
  '\xE1',
  '\x9F',
  '\x01',
  '\xF8',
  's',
  '\0',
  '\x83',
  '\xF7',
  '\xD2',
  '(',
  '\xF2',
  '\x92',
  '\r',
  '\0',
  '1',
  '\x13',
  'k',
  'k',
  '\x1D',
  '\x11',
  '\xB6',
  '/',
  '.',
  '\xF8',
  '\x87',
  'x',
  '\x06',
  ':',
  '@',
  '\xE5',
  'O',
  'b',
  'E',
  '\x95',
  '7',
  '\xBF',
  'f',
  'c',
  'I',
  'e',
  '\xE5',
  ';',
  't',
  '\xD1',
  '{',
  '\x1B',
  '\v',
  '~',
  '\x17',
  '\xCA',
  '\xAE',
  '\xB8',
  '\x93',
  '\x8A',
  '\xD3',
  '\"',
  '?',
  '\xA1',
  '<',
  '\xB6',
  '\xDF',
  'J',
  '\xA6',
  '\x1B',
  'G',
  '\x87',
  '\a',
  '\xAC',
  '\x18',
  '\x93',
  '\x04',
  '\x9D',
  '\xDC',
  '!',
  '#',
  '!',
  '\x17',
  '\xE5',
  '\xCF',
  '\xE2',
  '\x87',
  'z',
  '\xEB',
  'i',
  '\xDB',
  'l',
  '\x9E',
  '\xF6',
  '\xF2',
  '+',
  '\x96',
  '\xC3',
  '\x12',
  '\x01',
  '\x97',
  '^',
  '\xCE',
  '\xDE',
  '*',
  '\x01',
  '\xCD',
  '\x89',
  '*',
  '\xAA',
  '4',
  'U',
  '\x10',
  '\xEC',
  '\xDE',
  ';',
  '\x91',
  '\xCA',
  '\xB7',
  '\x18',
  'J',
  '\xD0',
  '\xEC',
  '\xDE',
  '\x97',
  'P',
  '\xC8',
  '\x03',
  '\x8A',
  '\x8E',
  'Z',
  'K',
  'X',
  '\x95',
  '\xDE',
  'a',
  '\n',
  '\xAE',
  '\x0F',
  '\xD0',
  'k',
  ':',
  '\xDD',
  '\x9F',
  'l',
  '\x81',
  'k',
  '\xCD',
  'f',
  '\x1A',
  '\xA4',
  '\xE6',
  '\xDD',
  '\xEF',
  '\x82',
  '\xB5',
  'T',
  '\xD4',
  '\xF2',
  '\xAA',
  '\xC5',
  ':',
  ']',
  '\x9D',
  '?',
  '\xCA',
  '\0',
  '~',
  '\b',
  'L',
  '\xD6',
  '\\',
  '\xFB',
  '\xA7',
  '\x95',
  '\xEA',
  '(',
  '!',
  '\xDC',
  '\xB7',
  '\xF3',
  '\xE8',
  '\x9E',
  '\xF6',
  'Q',
  '\xFF',
  '\xF7',
  '\x86',
  '`',
  '\x84',
  '\t',
  '\x02',
  '%',
  '\xF6',
  '\xA9',
  '~',
  '\x1E',
  '\x02',
  '1',
  '\xF0',
  '+',
  '\xAB',
  '+',
  '\xF0',
  '\xEC',
  '[',
  'g',
  ':',
  '\xFC',
  '\x83',
  'o',
  '\xAF',
  'F',
  '=',
  'W',
  'N',
  'U',
  'U',
  '\x01',
  '\x9B',
  '\x04',
  '\x9D',
  '\x85',
  '\xB2',
  '\x94',
  '\x04',
  '\x9D',
  '\xB5',
  '\x9B',
  '\x9E',
  '\xE5',
  'T',
  '\x9E',
  '\x15',
  '\x03',
  '=',
  '\x98',
  'E',
  '\x03',
  '\xEE',
  '\x9B',
  'u',
  '\xD7',
  '\xAB',
  '\xA5',
  'o',
  '\xBE',
  's',
  '\xDE',
  '\xAA',
  '\xE3',
  '\n',
  'B',
  '\xE1',
  '\xB5',
  '\xD6',
  '\xAA',
  '\xB8',
  '\xD7',
  '\xBA',
  '\b',
  '\r',
  '\xBB',
  '\xAF',
  '\xE0',
  'z',
  '\x8E',
  '\x02',
  '\'',
  '\x19',
  '\x04',
  '\xCA',
  '\xAD',
  '\xD8',
  '\x1B',
  ' ',
  '\x04',
  '\x7F',
  'i',
  '\xBC',
  '\xA6',
  ';',
  '\xD5',
  '\x12',
  'x',
  '\x99',
  'O',
  '\v',
  'w',
  '\xDA',
  'K',
  'j',
  '\x82',
  '\xBA',
  '1',
  '\x86',
  '\x85',
  '\xF3',
  '\xE7',
  '\xE3',
  '\xFD',
  '\x90',
  'r',
  'R',
  'h',
  '^',
  '\x9A',
  'v',
  '\x1B',
  'P',
  '_',
  '\xA6',
  '\xF2',
  '\xEC',
  '9',
  '\x18',
  '\xAE',
  '\x9A',
  '\x96',
  '/',
  'k',
  '\xD3',
  '\x1D',
  '\xAE',
  '/',
  'H',
  '\xED',
  '\b',
  '\x97',
  'D',
  '\xC4',
  '\xF4',
  '\x18',
  '\x99',
  '\x90',
  'n',
  '\xFA',
  '\x15',
  '\xBA',
  '\x16',
  '\xEE',
  '\x03',
  '\x05',
  '\xA3',
  '\xE2',
  '\xAE',
  '\xB3',
  '\r',
  '\x05',
  '\x9C',
  '\'',
  '\xB9',
  '\xFE',
  '\x1B',
  '\x03',
  'T',
  '\xEE',
  '\xED',
  '1',
  '\xF9',
  ';',
  '\xB4',
  '\xC4',
  'K',
  '\"',
  'Z',
  '\xA4',
  '\x10',
  'O',
  '>',
  '\xB3',
  '\xFE',
  '\x9D',
  'Z',
  '\xEC',
  'O',
  '@',
  '\xD7',
  'o',
  'l',
  '\xB9',
  '\x9E',
  '\xAD',
  '\x85',
  '\x99',
  '\x01',
  '\x11',
  'l',
  '\x99',
  '\xEB',
  '/',
  '\xBB',
  '\f',
  '\xAD',
  '\xB5',
  '\x10',
  '^',
  '9',
  '\xC4',
  '\r',
  '\x86',
  '\xD7',
  '\x9D',
  '\xE0',
  '\xCA',
  '\xFD',
  '1',
  'd',
  '\xF4',
  '\xD9',
  '\xC2',
  '#',
  '6',
  '\f',
  '\x06',
  '\xCB',
  '\x1F',
  '\xF4',
  'k',
  '\x13',
  '\x06',
  'U',
  '\xAE',
  '\xF9',
  'l',
  '3',
  '\xDD',
  '|',
  'D',
  '\xAA',
  'I',
  '\x94',
  'a',
  'd',
  'G',
  'd',
  'o',
  '\xD6',
  '\xB5',
  '\x19',
  'p',
  '\x13',
  'p',
  '\xC4',
  '~',
  '\x87',
  '\x86',
  '(',
  '\xBE',
  '\xCE',
  '\xA7',
  '\xED',
  '\x1E',
  '\x9C',
  ';',
  '\xB2',
  'y',
  '\xC9',
  '\x88',
  '+',
  '\xBD',
  'g',
  'T',
  '\xD2',
  '\x19',
  '\xD5',
  '\x03',
  '\r',
  'z',
  '\x9E',
  '\xEC',
  'x',
  '\xA4',
  '\xFA',
  '=',
  '\xF7',
  '\xC1',
  '\x9B',
  '\xC3',
  '<',
  '\x0F',
  '\a',
  '\x98',
  '\x12',
  '+',
  '\x8F',
  '\'',
  '\a',
  'P',
  '\xD8',
  '\a',
  '\xEB',
  '+',
  '\xF9',
  '\'',
  '\xFE',
  '\xEA',
  '8',
  '\x1B',
  ',',
  'j',
  '#',
  '@',
  '\a',
  '\x01',
  'q',
  '\x01',
  '8',
  '\x10',
  '\x0F',
  '\xA9',
  '\x11',
  '\n',
  '%',
  '\xB8',
  '\x12',
  '\xAA',
  '\xDD',
  '\x87',
  '\x12',
  '\x96',
  '\xBB',
  'e',
  '\x13',
  't',
  '\x99',
  'C',
  '\x14',
  'R',
  'w',
  '!',
  '\x15',
  '0',
  'U',
  '\xFF',
  '\x0E',
  '\x16',
  '3',
  '\xDD',
  '\xEC',
  '\x11',
  '\x17',
  '\xBB',
  '\xCA',
  '\xEF',
  '\x99',
  '\x18',
  '>',
  '\xA8',
  '\xAC',
  '\xE6',
  '\x1B',
  '\x92',
  '\x19',
  '\xAD',
  '\x95',
  '\xD2',
  '7',
  '/',
  'g',
  '\x1A',
  '9',
  ')',
  '\x96',
  '?',
  '\x1D',
  '\xBF',
  '\xDC',
  'E',
  '\r',
  '\x05',
  '\x1B',
  'F',
  '#',
  '\x12',
  '5',
  'K',
  '\x19',
  'X',
  'q',
  '\x8A',
  '\xA3',
  '\0',
  '\xAD',
  '\x8A',
  '\x18',
  '\x02',
  '\0',
  'h',
  '\xC6',
  '\xE8',
  '!',
  '\xC8',
  '\x91',
  '^',
  '*',
  '6',
  '\x01',
  '\0',
  'O',
  '\xA7',
  '\x1D',
  '\x95',
  'M',
  '\'',
  '\x01',
  '\0',
  '^',
  '\xC0',
  '\x05',
  '\xDE',
  '\xFD',
  '\xDD',
  '\x02',
  '\xAB',
  '\xE7',
  '\xF3',
  '\xA9',
  '\xEA',
  '\xCA',
  '\xC2',
  '\xC5',
  'U',
  '\x82',
  '\x9E',
  '\x91',
  '\x02',
  '\0',
  '\xC1',
  '\xF0',
  '\xD4',
  '\xF6',
  '\x99',
  '\xBA',
  'U',
  '_',
  '\x82',
  '\x03',
  '\0',
  '\x92',
  '\xED',
  '^',
  '\x93',
  '\x98',
  '\xF5',
  '\xCA',
  '\xF8',
  '\xF1',
  'o',
  '\x04',
  '\0',
  '~',
  '\x88',
  '\x8A',
  '\xB7',
  '\x01',
  '\0',
  '\xEE',
  'S',
  '\xEE',
  '\x9F',
  'o',
  '\xF8',
  '9',
  '\x93',
  'j',
  '\xD1',
  '^',
  '!',
  '#',
  's',
  '\xA8',
  '\x8B',
  '\x05',
  '\0',
  'e',
  'd',
  '\x9E',
  '\xC0',
  '\x02',
  '\0',
  '%',
  '\xAB',
  '\x04',
  '\xB5',
  '\r',
  '\xF0',
  '\x81',
  '\xFB',
  '\xB0',
  '\xA8',
  '\x03',
  '\0',
  'I',
  '\xB5',
  '\xCB',
  '#',
  '\x0E',
  '\x8E',
  '\xEB',
  '\x06',
  '\0',
  '\xC5',
  '\a',
  '\x8C',
  '\x10',
  '\0',
  '\0',
  'h',
  '\x10',
  '\x85',
  '|',
  '\0',
  '\x02',
  '\0',
  '\x03',
  '\0',
  '\x06',
  '\0',
  '\x04',
  '\0',
  '\x05',
  '\0',
  '\x06',
  '\0',
  '0',
  '\x02',
  '\x05',
  '\b',
  '\0',
  '\v',
  '\x0E',
  '\x11',
  '\x14',
  '\x17',
  '\x1A',
  '\x1D',
  'O',
  '\0',
  'P',
  '\0',
  '\x8A',
  '\n',
  '\0',
  'Q',
  '\0',
  'R',
  '\x01',
  '\x02',
  '\x03',
  '\x04',
  '\x05',
  '\x06',
  '\a',
  '\b',
  '\t',
  '\n',
  'S',
  '\0',
  '%',
  '\0',
  '\f',
  '\x18',
  '\x02',
  '8',
  '\x02',
  'T',
  '\0',
  'U',
  '\x01',
  'V',
  '\0',
  'W',
  '\0',
  '6',
  'X',
  '\0',
  '\x18',
  '\0',
  '\0',
  '2',
  '\0',
  'Y',
  'T',
  '5',
  'Y',
  'Z',
  '[',
  '\0',
  '\\',
  '\x80',
  ']',
  '^',
  '\x92',
  '\0',
  '_',
  '\0',
  '`',
  'a',
  '\0',
  '\x14',
  '\0',
  '\b',
  '\t',
  '\x03',
  '\v',
  '\0',
  '\f',
  '\0',
  '\x06',
  '\r',
  '\0',
  '\x0E',
  '\0',
  '\x0F',
  '\xCD',
  '\xCC',
  ',',
  '@',
  '\x10',
  '\0',
  '\x11',
  '\0',
  '\b',
  '\0',
  '\x13',
  'R',
  '\x15',
  '\0',
  '\x16',
  '\x01',
  '\x17',
  '\x99',
  '\0',
  '\x19',
  '\x17',
  '\0',
  '\x1A',
  'g',
  '\0',
  '\x1B',
  '4',
  '\0',
  '\x1C',
  '\x10',
  '\0',
  '\x1D',
  '\0',
  '\x1E',
  '\x1F',
  '\0',
  ' ',
  '\0',
  '+',
  '\0',
  '!',
  '\0',
  '\"',
  '#',
  '$',
  '\0',
  '%',
  '\0',
  '\n',
  '\0',
  '&',
  '\0',
  '\'',
  '\0',
  '(',
  '\x06',
  ')',
  'D',
  'D',
  '\xC4',
  '?',
  '\a',
  '/',
  '\x01',
  '\t',
  '*',
  'f',
  'f',
  '&',
  '@',
  '\n',
  'O',
  '\x02',
  '\x05',
  '\x02',
  '\f',
  '+',
  '3',
  '3',
  '\x13',
  '\r',
  'F',
  '\x03',
  '\x0F',
  ',',
  '\xAB',
  '\xAA',
  'j',
  '\x10',
  'o',
  '\x04',
  '\x12',
  '-',
  'U',
  'U',
  'U',
  '\x13',
  'e',
  'e',
  '\x05',
  '^',
  '\x93',
  '\x15',
  '.',
  '\f',
  '\x16',
  'C',
  'g',
  '\x06',
  '\x18',
  '/',
  '\x15',
  '\x19',
  'G',
  '\a',
  'j',
  '\xD1',
  '\x1B',
  '0',
  '\0',
  '1',
  '\0',
  '\x15',
  '2',
  '3',
  'd',
  '\x1C',
  'l',
  'e',
  '\b',
  '\f',
  '\x02',
  '\x02',
  '\x1E',
  '5',
  '\0',
  '6',
  ' ',
  '4',
  '\x9A',
  '\x1F',
  '\x92',
  '\x98',
  'd',
  '\t',
  '\x03',
  '\0',
  '\x04',
  '\0',
  '8',
  '\0',
  '(',
  '\b',
  '!',
  '%',
  '\0',
  '&',
  '\'',
  '(',
  ')',
  '*',
  ':',
  '\x14',
  '\0',
  ';',
  '<',
  '\0',
  '=',
  '\0',
  '>',
  '\x01',
  '\"',
  '@',
  'A',
  '\0',
  'B',
  '\0',
  'C',
  '\x87',
  '4',
  '\x8A',
  '}',
  '\x1B',
  't',
  'D',
  '$',
  '\r',
  'G',
  '\0',
  'H',
  'I',
  'b',
  'J',
  '5',
  'L',
  '[',
  '\x0F',
  'M',
  'r',
  '\0',
  '\0',
  '\0',
  ';',
  '\0',
  '\f',
  '\0',
  '\x06',
  '\0',
  '\0',
  '\0',
  'N',
  '\0',
  '\0',
  '\0',
  '0',
  '\b',
  '\x90',
  '\x01',
  '\xA5',
  '\xA1',
  '\x11',
  '\x8F',
  '\x95',
  'j',
  '\xF9',
  '&',
  '\"',
  '\xBD',
  'f',
  'R',
  ';',
  'h',
  '\x94',
  '\xCA',
  '\xAF',
  'T',
  'W',
  '\xA2',
  'k',
  '.',
  '\x92',
  'j',
  '\xA5',
  '\xD5',
  '/',
  '\xF6',
  '\xFB',
  '\xF7',
  '\xBF',
  '\xFF',
  'l',
  '\xD5',
  '\xE5',
  '\xDB',
  '\xCD',
  '\xAC',
  '\xF9',
  '\x8C',
  'R',
  'c',
  '3',
  '\xF6',
  '\xDF',
  '\xBC',
  'Y',
  '\x16',
  ' ',
  '\x80',
  '&',
  '\xD1',
  '\xD4',
  '\x06',
  '\x84',
  '\r',
  'H',
  '\x01',
  '\x80',
  '\x01',
  '\xEA',
  '\xF8',
  '\"',
  'M',
  '\xD2',
  ',',
  '\x05',
  ' ',
  'r',
  '\0',
  '\x1C',
  '\x1C',
  '|',
  '\xFD',
  '\xD3',
  '\x17',
  '\xD5',
  '\xD5',
  'm',
  '\xEE',
  'L',
  '\xE7',
  '\xB5',
  '%',
  ':',
  'l',
  '\xEC',
  '\xB7',
  ']',
  '^',
  '^',
  'X',
  's',
  'W',
  '\xBD',
  '\xDF',
  '\x16',
  '\xED',
  '\xBE',
  '\xDC',
  '\xEE',
  '\x87',
  '\x1F',
  '\xB6',
  '(',
  '\x01',
  '\x18',
  'c',
  '\0',
  '\xC0',
  '\x19',
  '\"',
  '&',
  'R',
  '*',
  '\x95',
  '\xC8',
  'D',
  '&',
  '2',
  'Q',
  '\xEA',
  '\xE3',
  '\xAB',
  '\xB3',
  '\xE8',
  '\x88',
  '(',
  'h',
  '8',
  '\xE1',
  'i',
  '\x10',
  '\x04',
  ',',
  '`',
  'O',
  '\x1C',
  '\xC3',
  '9',
  '\xA2',
  'u',
  'x',
  '\xEE',
  '6',
  '\xA6',
  '\xBE',
  '\x9C',
  '\xF0',
  '\xEE',
  'm',
  '\x1F',
  'd',
  'e',
  '\xB8',
  '\xA6',
  'p',
  'A',
  '\xB1',
  '\xA0',
  '\xD5',
  '4',
  '\xA3',
  'n',
  'M',
  '\xAB',
  'e',
  '\x96',
  '\xB4',
  '\xCB',
  '\x8C',
  '\x10',
  ';',
  '\xDD',
  '\x90',
  '\xA9'
}; // weak
_UNKNOWN loc_1C89A54; // weak
char byte_1E5A8AF[145] =
{
  '\x9E',
  '\t',
  '\x8C',
  '\xFC',
  '\xC1',
  '?',
  '\xC2',
  '\xBA',
  'v',
  'W',
  '\\',
  '\xC7',
  'g',
  '\xB9',
  '\xC1',
  '\xC7',
  'N',
  '\xC6',
  '\x86',
  '\xC5',
  '\xED',
  '\xD6',
  '-',
  't',
  ',',
  ']',
  'b',
  '\xAB',
  '/',
  '\xBF',
  'p',
  '<',
  '\xA9',
  '\n',
  '\xE6',
  '\xA3',
  'P',
  '\xC9',
  'r',
  'J',
  '\xFE',
  '\x01',
  '\xFF',
  '\xFF',
  '\0',
  '\xFF',
  '\0',
  '\xFF',
  '\0',
  '\xFF',
  '\0',
  '\xFF',
  '\xFF',
  '\xFF',
  '\0',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\0',
  '\xFE',
  '\0',
  '\xFF',
  '\0',
  '\xFF',
  '\xFF',
  '\0',
  '\xFF',
  '\0',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\0',
  '\xFF',
  '\0',
  '\x01',
  '\0',
  '\xFF',
  '\0',
  '\xFF',
  '\xFF',
  '\0',
  '\xFF',
  '\0',
  '\xFF',
  '\0',
  '\xFF',
  '\0',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\0',
  'p',
  '\xFF',
  '\xFF',
  '\0',
  '\xFF',
  '\0',
  '\xFF',
  '\0',
  '\x01',
  '\0',
  '\xFF',
  '\0',
  '\xFF',
  '\xFF',
  '\xFF',
  '\0',
  '\xD3',
  '\x04',
  'v',
  '\xD1',
  '\xFF',
  '\xFF',
  '\0',
  '\xFF',
  '\x01',
  '\xFF',
  '\0',
  '\xFF',
  '\xFF',
  '\0',
  '\xFF',
  '\x01',
  '\0',
  '\xFF',
  '\xFF',
  '\0',
  '\x01',
  '\xFF',
  '\0',
  '\xFF',
  '\xFF',
  '\0',
  '\xFE',
  '\0',
  '\xFF',
  '\0',
  '\xFF',
  '\xFF',
  '\0'
}; // weak
_UNKNOWN unk_2E55E94; // weak
char byte_32E81AD[3] = { '\xC1', '\xC4', '|' }; // weak
char byte_49C37A6[3] = { '\xCA', '9', '\xE6' }; // weak
_UNKNOWN unk_53B6F58; // weak
_UNKNOWN unk_5AE9C09; // weak
int dword_6001B94 = 2132147452; // weak
char byte_6C54F37[515] =
{
  '\xDE',
  'Z',
  ';',
  '\x83',
  '\xA1',
  '?',
  'i',
  '\xD1',
  '\xC2',
  ']',
  '5',
  '(',
  '(',
  '1',
  '_',
  '\xEF',
  '\xFB',
  '\x14',
  '\x8C',
  '\xA6',
  '\xBA',
  'I',
  '\xE5',
  '\x98',
  '\xD6',
  'h',
  '0',
  '\xE3',
  'C',
  'T',
  'E',
  'r',
  '\xEE',
  '\xC4',
  '\xBC',
  'n',
  '\xD8',
  'E',
  '}',
  '\x92',
  '\xAF',
  '\xD5',
  'T',
  '*',
  '{',
  '\xA2',
  '\xAA',
  '\xCE',
  '\"',
  'Q',
  '\xE4',
  '\xD7',
  '0',
  '\x8F',
  '\x0F',
  '\xDD',
  'X',
  '\xA1',
  'O',
  'U',
  'M',
  '\xC6',
  'l',
  '5',
  'f',
  '\t',
  '\x89',
  'u',
  ':',
  '\x97',
  '\t',
  '<',
  '\xCD',
  '\x87',
  '\xEA',
  '\x8C',
  'd',
  '\xFE',
  'G',
  '\xB8',
  '\x92',
  '\x87',
  '1',
  '\xEA',
  '\xAA',
  '\xB9',
  'o',
  ' ',
  'z',
  '\xC5',
  '\xD0',
  '\xD0',
  '\xDB',
  ')',
  '2',
  '6',
  '\xAB',
  'M',
  'E',
  '\x8C',
  '\xE7',
  '\xE9',
  '\xC7',
  '[',
  '$',
  '\xAE',
  '\xD3',
  '\xA3',
  '\xBC',
  '\xE8',
  'F',
  '\n',
  '\xFB',
  '\xC2',
  'r',
  '\x8F',
  'n',
  '\xBA',
  'D',
  'c',
  '\xDC',
  '(',
  '\xD1',
  '\x1B',
  '\xAA',
  '\x8F',
  '\xA9',
  '\x9E',
  '\xFE',
  '\xA7',
  'G',
  '<',
  '\xD1',
  '&',
  '\xBC',
  'C',
  'O',
  '7',
  '.',
  '\xD7',
  '\xD1',
  '~',
  '\\',
  '0',
  '\xAE',
  'Q',
  ')',
  '\xF3',
  '\x88',
  'n',
  'Y',
  '\x7F',
  '\x1F',
  '(',
  'c',
  '\xB8',
  '\xBE',
  '\xF0',
  '\x19',
  'D',
  'Z',
  '\x86',
  '\xFA',
  '\xDE',
  'J',
  '\x91',
  '\x9B',
  '\xC2',
  '\x19',
  '\xDE',
  '\x91',
  '\xC4',
  '\x12',
  '\x9E',
  '\xE6',
  '$',
  'O',
  'H',
  '\xFF',
  'c',
  '\x03',
  '\xC6',
  '!',
  '\xFA',
  '\x98',
  '\xFE',
  'D',
  '}',
  '\xA1',
  '\x9B',
  '\x95',
  '\xAB',
  'w',
  '8',
  'F',
  '\xF5',
  'x',
  'B',
  '\xC6',
  '(',
  '\xAD',
  '\xD6',
  '\x83',
  '\x9E',
  '\xBC',
  '\x86',
  '\xA6',
  '\x84',
  '\xFA',
  'y',
  '\xD2',
  '0',
  '\x1D',
  '\xAD',
  '\x7F',
  '\xDD',
  '|',
  '\xA8',
  '\x1E',
  't',
  '\xDF',
  'o',
  '\xFE',
  '\x81',
  'N',
  '\xF3',
  '\xEB',
  '\xCB',
  '\xCD',
  '\xA7',
  '\xE8',
  ' ',
  '~',
  '$',
  'y',
  '}',
  'M',
  '\xF2',
  '\xB7',
  'U',
  '\xF4',
  '\xE1',
  '\\',
  '\xC5',
  '\xE3',
  '!',
  '\xF9',
  ';',
  '\xBA',
  '\xD8',
  '\x7F',
  'P',
  '\x19',
  '/',
  '\x85',
  '}',
  '\xFE',
  '\x02',
  '\xD1',
  ';',
  'f',
  '\xEF',
  '\xEA',
  '\xFB',
  '\xDC',
  '\xE8',
  '\x9D',
  '\xDD',
  '\xC8',
  '\x9B',
  '\x14',
  '\xD5',
  '$',
  '\x1C',
  '\xCE',
  'I',
  '2',
  '\xFE',
  '\xCE',
  '\x0E',
  '\xF3',
  '\xF7',
  'C',
  '\x81',
  '\xF2',
  'p',
  '#',
  '\xF3',
  '\xF3',
  '\xA8',
  '\x11',
  '\xE1',
  '\f',
  'v',
  '(',
  '\xEA',
  '\xC1',
  '\xB0',
  '\xD0',
  'W',
  '\xC8',
  '\xB4',
  '7',
  'L',
  '\xA3',
  '\v',
  '\x89',
  '\xEA',
  'a',
  '\a',
  '\x7F',
  'b',
  '^',
  '\x93',
  '\xA3',
  '|',
  '\xB3',
  '&',
  '\xF0',
  '\x8E',
  '\xCC',
  's',
  'U',
  '\xF3',
  '1',
  'n',
  'd',
  '\xFA',
  '\x8D',
  '\v',
  '\x95',
  '\x98',
  '\xA6',
  '\v',
  '\xF3',
  '+',
  '<',
  'q',
  '\x99',
  '\xDE',
  '\r',
  '\xAD',
  '\x14',
  '\xB9',
  'D',
  '\xDD',
  '\xF8',
  ';',
  '$',
  'F',
  '\xE8',
  'M',
  '\xDA',
  'z',
  '\xD4',
  's',
  '\xA2',
  '\xE8',
  '\xC6',
  'g',
  'Z',
  '\xA1',
  '\xB7',
  'd',
  '~',
  '\xB5',
  '6',
  '1',
  'H',
  '\t',
  '\xF4',
  '|',
  '\xD8',
  '\xE3',
  '\xA6',
  '\x0F',
  '\xD5',
  '\xC3',
  '\x8F',
  '\x97',
  'q',
  '\x9F',
  '\x1E',
  '\xCD',
  '\x87',
  '\xBA',
  '\xF9',
  'f',
  '\xAD',
  '\t',
  '\xF3',
  '\x95',
  'x',
  'X',
  '\xB3',
  '\xF3',
  '\xFD',
  'J',
  '\xBE',
  '\x9F',
  'f',
  '^',
  '\xEA',
  '\xC6',
  '\x85',
  ':',
  '1',
  '\xBB',
  '\x9A',
  '\x18',
  '*',
  '\x86',
  'u',
  '%',
  '7',
  'c',
  '\x8C',
  'Q',
  '\x19',
  '\xC3',
  'B',
  '\n',
  '\xD5',
  'u',
  '\xBE',
  '\xFF',
  '\xEE',
  '\x89',
  '\xFA',
  ':',
  '5',
  '\x18',
  '\xE6',
  '\xD2',
  'g',
  '>',
  ':',
  '\x98',
  '\x0E',
  'S',
  '-',
  'j',
  'y',
  '\xCA',
  '\'',
  '\xCA',
  'T',
  ']',
  'I',
  '\xAF',
  '\xEA',
  '&',
  'o',
  '\xEC',
  '\x96',
  '?',
  '\xAB',
  '6',
  '\xFE',
  '\xAF',
  '\xCC',
  '\xAF',
  'Q',
  '\xE5',
  '\xF2',
  'i',
  '$',
  '*',
  'h',
  'p',
  '\xDE',
  'Z',
  '\xA7',
  'k',
  '\x1E',
  'o',
  '\xE7',
  '\xAF',
  '\x90',
  '\xF8',
  '^',
  '\x0F',
  '\xD2',
  '\xCA',
  '\x93',
  '.',
  '\xD7',
  'c',
  '\xE5',
  '3',
  '\xDC',
  'x',
  '2',
  '|',
  'Q',
  '\xA1',
  '\n',
  '\xC9',
  '\a',
  '\xF1',
  '\x81',
  '.',
  'p',
  '\xE3',
  'x',
  '\x8D',
  '\xF5',
  '-',
  'y',
  '\xF2',
  ';',
  '5',
  ',',
  '\\',
  '\x94'
}; // weak
int dword_6FFB7D6 = 1634091065; // weak
char byte_7A09E2F[] = { '/' }; // weak
_UNKNOWN unk_8100B96; // weak
__int64 qword_8ED3DE8[397] =
{
  6466161721011055449i64,
  910154811818221736i64,
  5552167017668818016i64,
  6782402644119947122i64,
  4558342736547808996i64,
  3226994988492491941i64,
  -5726686472789035219i64,
  984250040271947916i64,
  8256821589724934239i64,
  5814388354284773265i64,
  -6372243399807420227i64,
  1943715180833564354i64,
  -4791955131434228810i64,
  -6550178232513701946i64,
  5819657035655412869i64,
  5156815619180048575i64,
  3987526682164131483i64,
  6333933309717499631i64,
  -1027214290488235016i64,
  5940213783123243249i64,
  7355531324343428319i64,
  8897515077677585328i64,
  4848996494722538980i64,
  7229493991163064839i64,
  -8669652027488241579i64,
  -1676593660884887073i64,
  5754595925202248781i64,
  2013277020692195166i64,
  -771624314212503445i64,
  -2222574449278691249i64,
  8350562473115541033i64,
  -3487876996370911326i64,
  -7517850602484390064i64,
  8347142308909879526i64,
  2160485584340014695i64,
  -8694453189055273410i64,
  -431830526524195609i64,
  -7110510043316067562i64,
  -3567562140810054115i64,
  -3990830561462765808i64,
  -6226466938941421185i64,
  6190000408640522692i64,
  6172348189539317317i64,
  -4172246160023145567i64,
  2304664432268977383i64,
  -8633258886947712021i64,
  -6639651353768205197i64,
  -8657287430298506822i64,
  -738423100249211247i64,
  7173634392798166852i64,
  -1112955999628796430i64,
  -8659497986927845705i64,
  -7991276103140029644i64,
  2730482622910104787i64,
  5932583603091577855i64,
  7761142614916539846i64,
  -8746281632702649736i64,
  -1093204312166180059i64,
  3194063432971246864i64,
  -7757042079111731907i64,
  1820091909013103212i64,
  5034953608625027879i64,
  -7824754598463269142i64,
  3059970242317110236i64,
  5140962027930726615i64,
  3838071633544912362i64,
  2701064136611337563i64,
  4023012708911009577i64,
  6828507692732681604i64,
  7428445011866567004i64,
  -7749191011153953967i64,
  7911818514362615666i64,
  7702551522069278437i64,
  -8370748640372377006i64,
  -371951923530856006i64,
  1458487546953419303i64,
  -2949960553156669315i64,
  -6930795747488548329i64,
  -719162323510208215i64,
  2942397438406619722i64,
  -6516127579870453977i64,
  2554831401632050769i64,
  -916456969596229530i64,
  -1237434174524935562i64,
  -5493781063583662516i64,
  -5791248854804575219i64,
  -7025851330099485340i64,
  1409317159296131032i64,
  5347272009184858989i64,
  8513762186173858587i64,
  6337168941267077996i64,
  -3037883637655793111i64,
  -6308425369186934432i64,
  8886098330977983784i64,
  -7791341392883523326i64,
  -3132279887250249411i64,
  6439839395670342038i64,
  -144883699485296486i64,
  -1990824865507659898i64,
  -6513230122726639002i64,
  8003586272684076746i64,
  -965760268158928569i64,
  3625221725309367406i64,
  5740058217053844820i64,
  5038052924158866719i64,
  1707480783377617867i64,
  -5357690932998055201i64,
  -7150623790203212199i64,
  1760743104011144382i64,
  7182634446610925989i64,
  6050753067248428398i64,
  6193831801137337461i64,
  -732096824144642737i64,
  393730744287243005i64,
  -8084163138031878883i64,
  -4835623142446939440i64,
  -8705120703094511110i64,
  -7291524204153328346i64,
  3241326330880906357i64,
  -7811408021848142746i64,
  -8629393398032022466i64,
  -8168605629800739169i64,
  -5454797133955614893i64,
  -2617825653319560054i64,
  1546321123099291443i64,
  3313029298965416331i64,
  7700574681188048323i64,
  3144215871824349130i64,
  -6575897001323445434i64,
  5946587795506025469i64,
  -8778715709167361159i64,
  -4004281455575075110i64,
  -3335184813202929555i64,
  7866076462784477816i64,
  5133946359102520808i64,
  3060541040090107897i64,
  3647680068616774703i64,
  -375599463272420492i64,
  1857750457692626467i64,
  3123763026244409165i64,
  7725176779670121718i64,
  -2526694619204584907i64,
  2748209163877143476i64,
  -4707253488400375665i64,
  170899107930934969i64,
  -9015176614414000250i64,
  -5676448529197535826i64,
  909848016227849895i64,
  1987579075219037909i64,
  -8670945893105392777i64,
  -3666219106964435454i64,
  -7893275067713611577i64,
  -3181749185151555435i64,
  -3685170534066402013i64,
  3384871004362414172i64,
  -6691561851689458026i64,
  6934501217364480282i64,
  -8535351141754772337i64,
  7033578952592473835i64,
  -3908426034209674619i64,
  -4745398718921570797i64,
  1843973135800730925i64,
  2299730246506001424i64,
  -6578696437037091996i64,
  -605960650918925400i64,
  2775835560389268392i64,
  -763447220171248336i64,
  -3147359265272685835i64,
  8833222120732360391i64,
  7158930358270807585i64,
  7354687993073881485i64,
  3971274294412962561i64,
  -1330395007094046248i64,
  4482475651883247877i64,
  6616156255569330065i64,
  8359709127632971568i64,
  -1846110434160180551i64,
  -2572320757363487881i64,
  3804125689924527971i64,
  8640226725275936633i64,
  1940706434817012249i64,
  5401736099674673581i64,
  4831565843862993031i64,
  -3363134970078616597i64,
  -4148746167578861701i64,
  -1435690809052375063i64,
  6794073329343314599i64,
  3995745413948818861i64,
  -3689171961714774539i64,
  5630562533528360840i64,
  -6146482866187003051i64,
  -4399518952562833109i64,
  8983201731584606618i64,
  -3619349943200840740i64,
  -1915449511517820574i64,
  1462684663039362949i64,
  -1420386396366067487i64,
  -2190285085962283936i64,
  5517953280395780014i64,
  -5081543958721991847i64,
  5492003990119244627i64,
  -8741480951313662962i64,
  -7465162663852279379i64,
  3708715269074298369i64,
  -3241925544775558485i64,
  7807661741814472311i64,
  2467923775201750227i64,
  -8066610493528284918i64,
  1415010868102188346i64,
  5685238287061737210i64,
  6031989404503602818i64,
  -5247096459954979213i64,
  -5653198033646731788i64,
  1714115313998004155i64,
  6479632821243768676i64,
  -4922060183296140469i64,
  1149579704155785119i64,
  1744525719303765923i64,
  2032817098580012745i64,
  7294215972827583716i64,
  -138038510203964067i64,
  -3133818620019235275i64,
  -463243099775054833i64,
  1062623597361595615i64,
  4917598465099354399i64,
  8633760651272700113i64,
  9048213719383354888i64,
  -9085731290048884694i64,
  2071946797049494904i64,
  7191371670141382965i64,
  5184355159328482779i64,
  -8600501719779910071i64,
  -6659828798031615301i64,
  -3732434150858365099i64,
  -160596265511760342i64,
  -7970311989563890910i64,
  8577790334882102499i64,
  -3150763045531562010i64,
  7475799710083410372i64,
  8409573569657921287i64,
  -2356848288991779246i64,
  -8784835989542682062i64,
  2081660493722520020i64,
  -5614867908652389443i64,
  1011822733653570941i64,
  9172693988951028548i64,
  -2855977417581300310i64,
  -7266935606252375959i64,
  -481006816674712946i64,
  -9021006077208164185i64,
  -6457217739588753422i64,
  5775559798400405556i64,
  -7408435111192672826i64,
  4953627852977897995i64,
  -1355523654628689415i64,
  1069432674259758560i64,
  -8335693082241768302i64,
  7693968073638380575i64,
  4668637343947459761i64,
  1115867103749185497i64,
  2207678059912417691i64,
  -6627834615271780783i64,
  -9103842194319842636i64,
  4683676145617859544i64,
  -7078436117977477663i64,
  -3365155332861680316i64,
  4903823073790072614i64,
  9121892797286385606i64,
  -1485696044641684059i64,
  3313313365257702615i64,
  9201155045952304832i64,
  -8155686178294793401i64,
  -8759072060652743531i64,
  -4128901099993221186i64,
  -6112653884636075293i64,
  -5793658318875080876i64,
  -3598768416432743486i64,
  3787653003500708363i64,
  -7867954250978506449i64,
  -8276934883991861517i64,
  5544094051536870471i64,
  -6603974054453258191i64,
  3440210405616472643i64,
  -4259257449262430500i64,
  -7380046449692787512i64,
  -8354954937009063247i64,
  8460265334497334180i64,
  5738778341414905956i64,
  3783404266921791337i64,
  4749620745114194255i64,
  -2555506824893921709i64,
  -8580463629324639579i64,
  -780152851102536044i64,
  -1803252014613752284i64,
  -7668241783976983916i64,
  -6370911187134947406i64,
  5034199848384898172i64,
  5849411381906879003i64,
  2509507386921868216i64,
  6377934407140790837i64,
  -5952243936632110392i64,
  -2364616898220807348i64,
  -5548801075246979278i64,
  3659761241784367051i64,
  -6452098466890497526i64,
  2866040085994976344i64,
  -1213039894651771756i64,
  8940298849223787089i64,
  -4699429288141206688i64,
  -5074253060836341355i64,
  5308173189598267937i64,
  -7932785468170844434i64,
  -7495887870201194146i64,
  7359717187900228718i64,
  -6286828304200754717i64,
  -7609348864262783291i64,
  -3287956427894301909i64,
  -6165547795572836717i64,
  -3219639559115925718i64,
  -4252383430042949086i64,
  -8416846843950257057i64,
  1453375993780619082i64,
  -5050450027620328820i64,
  3514603334468711573i64,
  2291012552506667783i64,
  4491253404560365115i64,
  -7880579925672670504i64,
  950939304284595314i64,
  1885850512435988682i64,
  4257438443712879498i64,
  -5520218704590723439i64,
  5172410651089519141i64,
  -7772256845279972583i64,
  -8732080994248433486i64,
  -4201684366240110081i64,
  1205097943789527886i64,
  7220403678829669056i64,
  5905469637693597931i64,
  -8575216336418678614i64,
  7321354996570747478i64,
  2437452084543809123i64,
  2765619826952581309i64,
  2858003193981250253i64,
  -8733825292463824221i64,
  3187225441025176588i64,
  -7679317801414563572i64,
  -2748548040600740204i64,
  -822526387466089628i64,
  -1450806977164957524i64,
  -6883935386250850239i64,
  910932618942888530i64,
  4142411321742624693i64,
  3022053239064840921i64,
  3106263172146799435i64,
  7393745171324703073i64,
  -7317748674705035636i64,
  -1394415570779772976i64,
  2982289125771385141i64,
  -2982257252155757035i64,
  7719908110194484672i64,
  7551128805551619665i64,
  4989659528811726957i64,
  -3784125957791879143i64,
  -7197598123419402263i64,
  -6456291646512663798i64,
  -3363232397461936068i64,
  6726494148052732816i64,
  -6610342378360082555i64,
  -6798281028980535215i64,
  -4194664491288878931i64,
  -8564412276706166388i64,
  2956047186298881848i64,
  8948533650251489801i64,
  -2404608189230579204i64,
  2123275156755422888i64,
  -6294702633775424716i64,
  -5302376025760833555i64,
  -5988908390033391568i64,
  -5685620906570213343i64,
  6232394071574502084i64,
  -4789453255074308922i64,
  -3540696067077989817i64,
  6883586263412903590i64,
  4229592080004179353i64,
  4207308487715832114i64,
  -7350516321614939113i64,
  5568136685169592500i64,
  5873108724171858940i64,
  -8261135847977766770i64,
  -3104820597196668422i64,
  7005221779920872814i64,
  7181902348802960222i64,
  3277321818789632275i64,
  -853529496099854348i64,
  -4896230268013357091i64,
  -7473523493261694879i64,
  -5910066466562221389i64
}; // weak
int dword_9FC28D6 = -2072813156; // weak
char byte_B2AE888[2] = { '\x8C', '\xA7' }; // weak
int dword_B6520CF = 857657637; // weak
_UNKNOWN unk_D7B83BC; // weak
_BYTE byte_100A1F28[5] = { 78, -56, 42, 74, -91 }; // weak
char byte_101EDD44[440] =
{
  '\xFF',
  'u',
  '8',
  '{',
  '[',
  '\xCD',
  '\x99',
  '\xB5',
  'T',
  '\xF3',
  '\x9C',
  '\x1E',
  'w',
  'U',
  '.',
  'R',
  'A',
  'u',
  '\"',
  '\xBA',
  '4',
  ',',
  '\x15',
  ',',
  '\xA2',
  '\x03',
  '\x03',
  '\xE5',
  'm',
  'g',
  '\x8E',
  '\xB7',
  '\xBB',
  '\xE5',
  '\xF9',
  '\x97',
  '\xD1',
  '\xD9',
  '\0',
  '\x05',
  '\xFB',
  '\x89',
  '\x97',
  'm',
  '\x1F',
  'y',
  'f',
  '\xEB',
  '%',
  ';',
  '\x87',
  '\xC0',
  '\x8E',
  '\xDC',
  '\xC4',
  'k',
  '\x8A',
  '\x1C',
  'D',
  'K',
  '\xEA',
  '\xCA',
  '\xC6',
  '\xC9',
  '\xCF',
  '\xD1',
  'B',
  '\x8B',
  'z',
  '\x8C',
  '.',
  '\xEA',
  'h',
  'A',
  '\x13',
  '\x18',
  '\xA4',
  '\x9D',
  '\xCD',
  '\xEB',
  'm',
  '\xAE',
  '\xD5',
  '\x02',
  '\xA2',
  '^',
  'B',
  'c',
  '\x14',
  'i',
  '\xCC',
  '\x7F',
  'D',
  ';',
  '\x8B',
  '\xAE',
  '\xD9',
  '\a',
  'D',
  '\xDB',
  '\xCE',
  '\xDE',
  '\xD9',
  '\xFB',
  '\xF2',
  '\xCC',
  '\xD6',
  '!',
  '\xD9',
  'w',
  'D',
  'N',
  '\xE3',
  '\x96',
  'l',
  '\x91',
  '\xA2',
  '\xBD',
  'E',
  '#',
  '\xA0',
  '?',
  '\xAF',
  '\'',
  'K',
  '\xB4',
  '\x99',
  '}',
  '8',
  '\xC2',
  '\xBD',
  ']',
  '\xB6',
  '\x11',
  'O',
  '\x15',
  '\0',
  '\t',
  '\xA8',
  '%',
  '\xEB',
  '\xF1',
  '|',
  '\xA2',
  '\xDE',
  '\x9A',
  '\xA3',
  'H',
  '\x0F',
  '\x06',
  'k',
  '\x99',
  '<',
  '\xBD',
  '\xB5',
  '\xB3',
  '\x96',
  '\x10',
  'I',
  '\xE9',
  '\xA9',
  '\x95',
  'D',
  '\x0E',
  '\xA7',
  '+',
  'U',
  '\xE5',
  '\x91',
  '\x1D',
  '\xB9',
  'E',
  '\xF9',
  '\xEC',
  'G',
  '-',
  '\xCA',
  '\xCE',
  '\xC6',
  'S',
  'A',
  '\x1B',
  '[',
  '\xA0',
  '\xC0',
  'a',
  'l',
  '\xB7',
  '\xD5',
  'D',
  '*',
  '(',
  'Z',
  't',
  '\xB3',
  '\xDA',
  '\x12',
  '\x99',
  '\xC3',
  '\xDB',
  '\xAE',
  '\x1B',
  '\x81',
  '\x05',
  '|',
  '\xE8',
  '\xBA',
  '[',
  '\xD4',
  '.',
  'Z',
  '\xA0',
  '\xC1',
  '\x14',
  '4',
  '\xB4',
  '\x15',
  '|',
  '\xEE',
  '\xBC',
  'h',
  '`',
  '\xA4',
  '\x05',
  'w',
  '\xAB',
  '}',
  '\xA4',
  '\x1A',
  '\x1B',
  '\x90',
  ',',
  '\xCC',
  '&',
  '\xF0',
  '\x19',
  'Y',
  'Y',
  '\x94',
  '\x0E',
  '\xD3',
  '\x97',
  ':',
  '\xDD',
  '\xBC',
  '\xCE',
  '\xE1',
  'L',
  '\xFD',
  'm',
  'A',
  '\x97',
  's',
  '\x81',
  '&',
  '\xE0',
  'u',
  '\x11',
  '\xED',
  '\xC9',
  '\x88',
  'T',
  'k',
  '#',
  '\x97',
  '5',
  '\xD6',
  '\xA3',
  '\x7F',
  'S',
  '*',
  '&',
  '\x91',
  'b',
  '=',
  '\b',
  '\xD7',
  '\xBE',
  '\xE8',
  '\xB4',
  '~',
  'r',
  '\xE0',
  '\xAE',
  '\xBC',
  '$',
  '\xC5',
  '\x9D',
  '\"',
  '\xE0',
  'L',
  '\xFD',
  '<',
  '\xD7',
  '\x8D',
  '\x05',
  '\x04',
  '\xF0',
  '\xA5',
  '\xEC',
  'a',
  '\xFA',
  '\xE5',
  '\xBD',
  '\x89',
  'f',
  '\r',
  '\x9D',
  '\xFD',
  '\xDD',
  '\xD6',
  '\xB5',
  '(',
  'p',
  '\x91',
  '\x91',
  '\xC4',
  '\xB8',
  '\xEA',
  '\x1C',
  '\x86',
  '\xD0',
  '6',
  'K',
  'H',
  '\x9E',
  '2',
  'g',
  't',
  's',
  '^',
  'l',
  '\xBC',
  '\x9F',
  '\xED',
  'J',
  '\xEB',
  '\xC4',
  '\x9E',
  '\x8D',
  'a',
  's',
  'j',
  '\x95',
  '\xF0',
  '#',
  'm',
  '+',
  '-',
  ' ',
  '\xE7',
  '\x81',
  '[',
  '2',
  '\xAB',
  '\xEF',
  '\x02',
  'D',
  '\xDA',
  'W',
  'T',
  ';',
  '\x05',
  'I',
  '\xBB',
  '|',
  '\xD0',
  '-',
  '\x8A',
  'e',
  '\xAB',
  '\x7F',
  '<',
  '\x87',
  '1',
  '\xBA',
  'J',
  '\xC0',
  '\x89',
  '7',
  '\'',
  '`',
  '\xF4',
  '\b',
  'K',
  'U',
  '\xD8',
  '\x1D',
  '\x9E',
  ':',
  'n',
  '\x89',
  '\xC8',
  '\x98',
  '\x11',
  '6',
  '\x8B',
  '\xB2',
  '\xA7',
  '\"',
  '\0',
  '\xE9',
  'R',
  ' ',
  'K',
  '\x8C',
  '\x9B',
  '\\',
  '\xB5',
  '\xC8',
  '\xDA',
  '\x95',
  '\xB8',
  '\xC7',
  ')',
  'e',
  'l',
  'j',
  'n',
  'L',
  '\xF0',
  '\xF3',
  'g',
  '\x06',
  ';',
  'H',
  '\xAA',
  '=',
  '\x96',
  '\x1C',
  '\xE5',
  '\x81',
  '1',
  '\xF4',
  '\xA0',
  '9',
  '\xF3',
  '<',
  'X',
  '\xEC'
}; // weak
_UNKNOWN loc_10C7CCBE; // weak
void *__ptr32 off_1460D13D = (void *__ptr32)0x3B8855BCi64; // weak
_UNKNOWN unk_14BE14DD; // weak
__int64 qword_19871108[512] =
{
  6704240018767104359i64,
  -5426591771300599722i64,
  -6004821296033958565i64,
  -2851131733363534754i64,
  -800701340485982724i64,
  7055552005379026278i64,
  2154041628339896905i64,
  6947421846892544071i64,
  -7628116718073853141i64,
  -3068334341126433544i64,
  7694745812475418972i64,
  -1598001798152778196i64,
  -5124928095217365526i64,
  5522640660962069801i64,
  -6313271123564476334i64,
  -211833550145413894i64,
  -7646665378296771856i64,
  -6721415432027337257i64,
  -9002190536889490506i64,
  -5700094605812110149i64,
  1209795818165844715i64,
  -4187997272332889783i64,
  8443566003511039505i64,
  -6578751378431261382i64,
  -8150788557029352470i64,
  -3142037412192725231i64,
  -1665296824828410060i64,
  -5985886672874204052i64,
  4099495383756901985i64,
  8120929024588858315i64,
  4563627419711255305i64,
  7125463168089707890i64,
  -572377732318447426i64,
  224432165121570789i64,
  5348907374805302045i64,
  -1696803491747097782i64,
  -6181788258478095547i64,
  -2520479129573568878i64,
  -4644052398522677370i64,
  -8896030710959901997i64,
  6276909124147777387i64,
  -6454219078169567963i64,
  -8953841625769804048i64,
  -4085132451319303797i64,
  8911035130614570103i64,
  -1749957694149654729i64,
  4555155240682917389i64,
  -422008219168231314i64,
  -6676711655525016240i64,
  5111416040958843062i64,
  -1301174725433054067i64,
  538470160159312260i64,
  2277537038631788051i64,
  2030477049991606444i64,
  -1757679528937920175i64,
  -8370562980672640044i64,
  7846180496224430071i64,
  4093133892697926541i64,
  3621270955539955556i64,
  2045929308877866698i64,
  -3715297967030195409i64,
  2752639583969127209i64,
  -6410402785926804518i64,
  -8546344107009744101i64,
  7406893320739733902i64,
  7902104753220345625i64,
  1143535242538144373i64,
  169761184400371387i64,
  1494146793784270175i64,
  -2726023105641549604i64,
  -5579571769335406941i64,
  5683456677761427608i64,
  -1955646389699089036i64,
  6713465331504724466i64,
  -2090468617622937495i64,
  -227410216590018206i64,
  -5972470223381777436i64,
  7528924858943468439i64,
  -8719989494677340182i64,
  2229808385422816036i64,
  2820301328711642109i64,
  -7199547095753032131i64,
  -403265813846495335i64,
  -2898433955602187523i64,
  -3035850329705197769i64,
  3348948727415323439i64,
  -6564340714724672286i64,
  -2353117301934522440i64,
  -1919307611727671746i64,
  6397355814523926950i64,
  3960712693927818061i64,
  -2528409938071867173i64,
  7648092750156496347i64,
  7160229107062202026i64,
  8572279655283128986i64,
  -3125887859195197816i64,
  3588403719649909398i64,
  -8248131395920325433i64,
  6009365208068703032i64,
  -6364572238734022172i64,
  769562910600080455i64,
  5046580008574542012i64,
  -6832035329463141923i64,
  -3428497749465221138i64,
  7965728921391944174i64,
  6517315809131262035i64,
  1749213002690303080i64,
  9020383724497156303i64,
  4504990748861755846i64,
  -7427351558676349835i64,
  3518570768899771052i64,
  -6454388981933288810i64,
  1238775301657218032i64,
  -6158567458360626545i64,
  -6032810965416853646i64,
  7534158198404477884i64,
  -6158279661380455560i64,
  -6276040927651185188i64,
  1883929610019494334i64,
  -6580300015740210569i64,
  7615044631065355578i64,
  -6886545160268034836i64,
  -8233185297121969700i64,
  8386368010884711781i64,
  8069703919454056878i64,
  -7953909085520367211i64,
  -50695450461073090i64,
  -7585391624561519047i64,
  -9117961043073896165i64,
  -4334384560494404437i64,
  -4738950366350971181i64,
  -7685767158069257559i64,
  6071043522314807818i64,
  -3901103213870089347i64,
  -2121469246530439413i64,
  8285252478790368194i64,
  -220133781916413720i64,
  -8906457981883367184i64,
  -4532286270363413058i64,
  -5846309758257423349i64,
  -8964458541791677143i64,
  2584568827471143129i64,
  1333055643266276410i64,
  -7004247262029881420i64,
  -2185394775917339920i64,
  -4415509197153790148i64,
  -8317184586956625801i64,
  -7639587506581264094i64,
  4565335243975166321i64,
  -1282424757587154573i64,
  4310612509718466335i64,
  -5815777677634049370i64,
  -5576603420519284796i64,
  2376799914220196527i64,
  3703392424617391676i64,
  2629556681093240952i64,
  8887139301943770003i64,
  -849142583053533357i64,
  -3161320930623389462i64,
  7330665830109476989i64,
  -8722880132802984333i64,
  8915021076308605675i64,
  -4164757212787520441i64,
  -4558757980605377765i64,
  7080194245831137737i64,
  5251741471763005373i64,
  -614596472061620861i64,
  8357958480536628185i64,
  -1397094607141399161i64,
  -1342178879265284714i64,
  7735747314951888794i64,
  -4426446206753670909i64,
  3949471639103162138i64,
  8279626858061839147i64,
  -2783088601980252803i64,
  8485775213821942610i64,
  2899023059592586869i64,
  3821103654797770641i64,
  -7357674232551408460i64,
  -121500113753965116i64,
  -3006357570297744041i64,
  3802555976966284255i64,
  481653022790057618i64,
  -7927821473229100656i64,
  8283972368068982594i64,
  -6126357199996416804i64,
  -2038545606068572933i64,
  8055319955671460463i64,
  9111098474514065228i64,
  2891791804618344525i64,
  1713184577316698735i64,
  6448191744641654103i64,
  -5096164892261774510i64,
  -1920682973850476201i64,
  776716891892130218i64,
  -4808397741304823993i64,
  3395078037816412736i64,
  -4057521198286923025i64,
  8232479120031437752i64,
  4875334350726214742i64,
  -4871805316482579098i64,
  3993447119205238603i64,
  4231069190139474469i64,
  3264229872466693960i64,
  -5582302083230704610i64,
  3355943025079971409i64,
  -5149038596768566612i64,
  5718653622543432106i64,
  8680595564059500900i64,
  -8759358581441202025i64,
  -7863301859106624136i64,
  8733103052433760169i64,
  -6685706000513656371i64,
  -8150505538047600242i64,
  6136879820594464596i64,
  -4989550618414509841i64,
  -8763021684664099516i64,
  8816039231873821164i64,
  8254721682814776187i64,
  -4639501890012219055i64,
  5055067375908480660i64,
  3615914834109650715i64,
  7634861873781073015i64,
  9079137703622330196i64,
  -8293292145668544987i64,
  -1010440919107659378i64,
  2538030581886107117i64,
  5366155918852057183i64,
  -4954807526749896856i64,
  -6067061862031106346i64,
  6650741279049399171i64,
  8591402412426402274i64,
  7511738639468267987i64,
  -1299478472239878220i64,
  5454618442050640105i64,
  -6597371755898238195i64,
  1918796179756993448i64,
  -3876600292843115359i64,
  -4847463811712901278i64,
  3478228573116904937i64,
  7663238375240180416i64,
  -3848020897186848327i64,
  8977452333883702498i64,
  -4382190785757107037i64,
  -8885228322400843118i64,
  5523214206789819895i64,
  6437654542388243511i64,
  4764080737121289542i64,
  -6121263604453016783i64,
  -6365507962358555720i64,
  -5832517527735113028i64,
  8457227950839475697i64,
  2960636324021230251i64,
  -1391397361726058065i64,
  -3421469571915637297i64,
  -1542875233555637672i64,
  3800956606447533225i64,
  5591939189078737715i64,
  6069639749671504277i64,
  6749476260191565605i64,
  -3211656780253859126i64,
  -5563494835132158037i64,
  -2692333577998453907i64,
  1851473753301621589i64,
  -6276462461829653198i64,
  -8152103110313825109i64,
  5523761381718421652i64,
  6153980060992593493i64,
  2383247612981678535i64,
  5268155555272859483i64,
  -2762565833286195310i64,
  4001304734109688522i64,
  5091764728006499800i64,
  -8145439520537294438i64,
  2132726313888518544i64,
  6802505438674906090i64,
  1006313264476682866i64,
  -814925916695665333i64,
  8068321110377719144i64,
  3038651346314940949i64,
  -5662821392217457560i64,
  8328322363666321858i64,
  -8429265967182932552i64,
  3915831879109364338i64,
  -6752852274080752806i64,
  8379316734175437215i64,
  -3874230057427297363i64,
  2618059844561389193i64,
  8303004851256087593i64,
  3689938758001588776i64,
  3585522075429399387i64,
  -7227262951176699870i64,
  1598191705253143730i64,
  6749473703710528981i64,
  -684118914144266192i64,
  -9094370989941671332i64,
  1235550187653828549i64,
  -2748040646427500118i64,
  7780678266323650284i64,
  1886072650268439084i64,
  -6276231512164348646i64,
  -7254724294853005406i64,
  3041247309444541469i64,
  4984030752314245785i64,
  5948556196485673310i64,
  -4809014634812340002i64,
  -4213378383245750231i64,
  2131651266195202924i64,
  1573299040014539167i64,
  6031549908523603166i64,
  3186853840821549232i64,
  3560428749952363126i64,
  1111554914651534775i64,
  4208328639457331406i64,
  -8845300263455149404i64,
  8384908027586767148i64,
  -8972808079385700481i64,
  -5644541595470979333i64,
  6095435645045391188i64,
  -4467952796793415542i64,
  -6249434525084487022i64,
  8021569867728265914i64,
  -5047639432884072997i64,
  1063057031509042354i64,
  6662485435150911485i64,
  -1731378667286912186i64,
  -3158543600122985789i64,
  -2643223555192584426i64,
  -4131472477796734548i64,
  -7130178229982106118i64,
  901316773320365353i64,
  5191120274307982673i64,
  -3560384182066992121i64,
  6942205191967116780i64,
  -1517542463576973644i64,
  -3104155791024630617i64,
  -7169170084232885757i64,
  -5939587034736325870i64,
  3140015088996013610i64,
  5031134939737390990i64,
  -6332400781418124673i64,
  -6981740700592453510i64,
  2923877605215896011i64,
  5977018757578654869i64,
  -7198627104090791511i64,
  4211049363824060960i64,
  4231795560347894190i64,
  -2778501868954706743i64,
  -8895110649131063931i64,
  -7816904887213621971i64,
  -3138140141124935144i64,
  -7578050251298491685i64,
  -7647918956912208497i64,
  -7814878861892178107i64,
  -2342106443148876919i64,
  -1521329441794885320i64,
  -1945061428373603602i64,
  1706153680827481087i64,
  -3544349765731083113i64,
  8552306989109399207i64,
  2448933910087314900i64,
  2168391709442471527i64,
  -165625805151332299i64,
  2152684552051361121i64,
  3724748934159700377i64,
  -7431473011879316465i64,
  -1335173437715896299i64,
  -2345804396419593172i64,
  -2972799812707812071i64,
  6728223304000202344i64,
  -5284328820271627576i64,
  -7374429169880450283i64,
  -7104243815456184014i64,
  7277001426745282303i64,
  -8102809409267908714i64,
  5244595828526324851i64,
  -2002094148569626867i64,
  6446466200439068611i64,
  9005737205057793336i64,
  505974251317817548i64,
  -2833996411715325052i64,
  -313061829960635592i64,
  6001717400025745490i64,
  3408015061163658059i64,
  7324499544490734014i64,
  -903219502163199281i64,
  -33185100877279353i64,
  -6251235566798332375i64,
  904805673012112470i64,
  670533355673255241i64,
  -1515891210567918012i64,
  -8427781769228493026i64,
  -1590658806307434678i64,
  8152372419961625841i64,
  -8285458261938542365i64,
  3458180561275094885i64,
  -8712907541003731123i64,
  9213835970279598475i64,
  -4878356250344720707i64,
  -1561011419447361665i64,
  5431144750857038854i64,
  -7672045385751230766i64,
  1567135581385089637i64,
  -2717373084565409109i64,
  -3583350660397489411i64,
  6355005324087163584i64,
  2952888879682688401i64,
  7153738591258059929i64,
  -7361633934578008067i64,
  -4164520479719247529i64,
  -370929668027788454i64,
  -2960174698449196947i64,
  5448948022480059746i64,
  -5650893124567529803i64,
  -318045011900738474i64,
  -9053821431038890901i64,
  -7329239323414923467i64,
  7271250961277586545i64,
  8263977442114784025i64,
  2460834974783172024i64,
  1569565250075374166i64,
  6141056103709756650i64,
  4118725242705957347i64,
  4931240656395148697i64,
  -94222268629604886i64,
  4403385700723691341i64,
  -226352134782215001i64,
  6816535049217997155i64,
  -3620904556287780230i64,
  7901142518715117162i64,
  -6142233065337433031i64,
  8971339740500298604i64,
  4524483429027143417i64,
  7946364003353245284i64,
  2792794080121120887i64,
  -2038094691979768107i64,
  1484696096426932944i64,
  -76620064542402875i64,
  416411713340493663i64,
  -8625006728348095036i64,
  5950638939920031526i64,
  5985386383998018205i64,
  6940473742626181281i64,
  1304368570202467603i64,
  2385400605417577168i64,
  5303982670747333252i64,
  -50865995999921949i64,
  2906950495140235576i64,
  -7576707929233096415i64,
  2454129194419547656i64,
  -8560980015940836856i64,
  4698844911257062560i64,
  -837220446465914878i64,
  4677307536369791856i64,
  -6829388050187655895i64,
  -8831037414708612113i64,
  -3322357302415986138i64,
  -5888137862049592758i64,
  -7626905649045815024i64,
  7109957876126851650i64,
  5758030249143986595i64,
  -8890084870340688500i64,
  -612369631408713148i64,
  6096725292838357797i64,
  -4789031609681668251i64,
  -7866380120396402867i64,
  6537938675017296906i64,
  8423198339777229108i64,
  1751804185617387790i64,
  -7373188351609391283i64,
  3515586558154664204i64,
  7959489369589866926i64,
  -1311905130559678648i64,
  2647411749419446819i64,
  3366907354160258940i64,
  -3696608173354659929i64,
  4634250577185237574i64,
  -1933041982206832868i64,
  7206657190712127859i64,
  8521985441867793666i64,
  2331839623332785608i64,
  3146211853339997574i64,
  8528680142963448003i64,
  3164781118527947271i64,
  -8982748264090629796i64,
  -7216006796723617755i64,
  958062834259152932i64,
  4441728673913017326i64,
  8652890749081644065i64,
  7221411527916273422i64,
  3234979266714740518i64,
  -8576856956968797849i64,
  -3882642954878787202i64,
  -7633804012002632399i64,
  6772399073407310496i64,
  -8839727015466138794i64,
  1130489763401585819i64,
  7055553563280216211i64,
  -8861315500191103056i64,
  8324572437049103045i64,
  -5978000479310261926i64,
  -1180462807708902847i64,
  7977099559420023433i64,
  -682823054865716569i64,
  -4694482448479229920i64,
  9027106553088750882i64,
  -1259002990261350290i64,
  6068905493492961353i64,
  -3573371743190301209i64,
  2524415617673826773i64,
  -3636299661053409991i64,
  -792751233644233641i64
}; // weak
_UNKNOWN loc_19DD1B8E; // weak
void *__ptr32 off_1A8B5E9B = &unk_15AAEEC5; // weak
void *__ptr32 off_1B840025 = &unk_23F2E65; // weak
_UNKNOWN loc_1CBC0B9A; // weak
_UNKNOWN unk_1D018C8F; // weak
_UNKNOWN unk_1D3F380A; // weak
__int64 qword_1E302940[88] =
{
  4009662339641420310i64,
  -3642541847648971057i64,
  -9018234918997711013i64,
  -6195551084936054844i64,
  -2049173345599482060i64,
  -240892717238480762i64,
  2165583503407812886i64,
  -7303197864447351470i64,
  6005642841648344066i64,
  -1026083677258992666i64,
  4032796185670175254i64,
  6896207086590160107i64,
  -5007775648442031378i64,
  -7624156698089126473i64,
  -7631935506948940154i64,
  -1727081288976996783i64,
  -3354555662125923317i64,
  2290238306087784050i64,
  -3205005581883224664i64,
  1181616328267176623i64,
  819126400548266797i64,
  -3875731557657343177i64,
  -2904187680459042485i64,
  -7325241110087963171i64,
  1997912502918307714i64,
  -134980011068446360i64,
  -4133438193257873895i64,
  7176868760422072051i64,
  -5508351476588297980i64,
  7881458402558213184i64,
  -3877734384201121523i64,
  433312646047745131i64,
  6582428968453553848i64,
  -1833002383466246743i64,
  4159214584494526594i64,
  -498275306355930042i64,
  1279968339234784283i64,
  -6073017898659269212i64,
  -3787313646417872958i64,
  -8430763977160669552i64,
  -6958237260039100286i64,
  4244812076880751430i64,
  997519643411960528i64,
  1299649434451139256i64,
  8388191822345158050i64,
  2792692736633193279i64,
  3809624996038634031i64,
  -2496366678899654045i64,
  -5277566538649371235i64,
  2322857643225914207i64,
  -6085349274555017103i64,
  -3981011211320610335i64,
  835267935911015396i64,
  1235513858915312455i64,
  4179637536377306177i64,
  758190365406432268i64,
  -3833621300158305553i64,
  6155803848179484462i64,
  8397421370832855546i64,
  3742235156538661260i64,
  -8283965541945256346i64,
  -227187046774861500i64,
  1007430833114526244i64,
  -8508137632119398098i64,
  -5546892240521386806i64,
  5751240614825453534i64,
  -3061336740492255676i64,
  -1355554648932511248i64,
  -5014814691876132715i64,
  4657237641873421473i64,
  -1787624521980055635i64,
  -7215213494716940333i64,
  -3702577086590116433i64,
  -991539681086684942i64,
  -6172104846216993208i64,
  -4573635377033114137i64,
  8460159440326091562i64,
  7421296718365116362i64,
  8617250674478895328i64,
  -8160679830157634039i64,
  872450704425142959i64,
  1809981066571628444i64,
  -3506748728703944780i64,
  -4584536377797056375i64,
  4347673456764671305i64,
  -4618675530030648242i64,
  -3736384191179490165i64,
  1670856884245225429i64
}; // weak
_DWORD dword_21ADFC73[2] = { 1946751658, -1751907722 }; // weak
_UNKNOWN unk_2252A433; // weak
char byte_235FA245[3] = { '\x10', '1', '0' }; // weak
char byte_24246C59[7] = { '\x87', '\x1A', 'U', 'a', '\xD5', 'N', '\t' }; // weak
void *__ptr32 off_25EF6B66 = &unk_8434B09; // weak
char byte_26391161[3] = { '\f', 'D', 'P' }; // weak
char byte_26677309[3] = { '\xD9', 'G', '\xA5' }; // weak
char byte_2723D93B[2] = { '\xF6', '\xF1' }; // weak
char byte_28DCAF61[3] = { 'E', '\xBC', '\x97' }; // weak
void *__ptr32 off_2A4E0235 = &unk_209B0EB6; // weak
_UNKNOWN unk_2A50595D; // weak
_UNKNOWN unk_2B654254; // weak
__int16 word_2C180C96 = 9449; // weak
__int64 qword_2CB13658[512] =
{
  -3206214861731386711i64,
  -7917512820833222271i64,
  7136301824462320077i64,
  -848135012417576406i64,
  -3913342088329442371i64,
  -4837781456399527423i64,
  6051106247571051703i64,
  8187848178834159890i64,
  95184268430164919i64,
  8138189484983634258i64,
  4956741417745259064i64,
  -8430319813499169594i64,
  -2012014591289851090i64,
  5672332138614086854i64,
  -926640125032984817i64,
  -6769956265951930237i64,
  6680941332843303333i64,
  7768626976840567648i64,
  -3032738975089897748i64,
  6425732083072771550i64,
  -6721605484110882152i64,
  7758469787520262860i64,
  -1487965847665420331i64,
  6375263083651967939i64,
  7353961935337022578i64,
  5075571075612442634i64,
  198439894279835079i64,
  -4911193614041219073i64,
  -2705598453184893457i64,
  -1552676811018732105i64,
  -6962861594249742597i64,
  -811522497698384170i64,
  7732592017574435709i64,
  6172139019205819355i64,
  -1344712230287958661i64,
  418741126051414133i64,
  -507799249082147260i64,
  1859772977112905990i64,
  5260710122307699935i64,
  5654560090019413932i64,
  -5045187622349150341i64,
  -1194589549800084811i64,
  -7359216400981686481i64,
  -9206846755724778229i64,
  4737427947346443300i64,
  4818608426051265666i64,
  2387061001523218722i64,
  4776384258885801545i64,
  -7905750249476825886i64,
  -375764145068054027i64,
  -1333377748446350154i64,
  -1203693770992622109i64,
  -8678535510372506745i64,
  6143432294169088137i64,
  -3316118248670173403i64,
  -2974839874156116997i64,
  4741159944285454698i64,
  1097690675441921365i64,
  4906459540221405866i64,
  -7926087037713686797i64,
  7635271664260781980i64,
  7953249487586248533i64,
  9042042045554966435i64,
  -7352387339906995366i64,
  -300906022657482799i64,
  -7359211720693604125i64,
  -1157590069036100341i64,
  4866130214450893148i64,
  -8397058441450727426i64,
  8304539845580263688i64,
  -3497072611416268287i64,
  6154720373802097185i64,
  4527136082652124171i64,
  -6102510379210307540i64,
  5466882077999781682i64,
  8232729835706191647i64,
  -1292497633775847777i64,
  -3007137904558588201i64,
  1313522817376105i64,
  -8048462229354318044i64,
  2782476587930223104i64,
  -6137002368228633254i64,
  -1624895657258900762i64,
  -1450682309026879747i64,
  2630104691034539990i64,
  41098541429895159i64,
  6063655163405388032i64,
  -4541179315468889515i64,
  -2540069694040046590i64,
  -7906064679034257542i64,
  4667788275208951i64,
  73325012856966041i64,
  72466459844833552i64,
  200286677189675041i64,
  -5242370953762815726i64,
  8323215140074835418i64,
  -1482649648596028759i64,
  8232582629782077143i64,
  -2017603824759212385i64,
  -2841208380541766274i64,
  2343068113970376662i64,
  -7686226642482168960i64,
  -2897312439524065276i64,
  -5063362203954961918i64,
  1436459089030284416i64,
  -5076570602244912864i64,
  3573387029062951424i64,
  -7550126170107985810i64,
  3420774188193091546i64,
  6897579488801692597i64,
  -8069320051082380163i64,
  -4467569593275482771i64,
  5188428393380440829i64,
  36150762742460002i64,
  36364087759241472i64,
  -2684364216303108352i64,
  6241812869754003382i64,
  -5300789882136291749i64,
  7907745612857606397i64,
  -3962855489206273020i64,
  5462383665465780601i64,
  6730509430483114975i64,
  4171623353782034170i64,
  -2887080100097427501i64,
  -3246090292620723337i64,
  -3842345921819471781i64,
  -3496385476075794084i64,
  418178167587357020i64,
  6170427972231541320i64,
  -8914287006037054686i64,
  -1187443689587905801i64,
  4923914225836547263i64,
  4053990912109748158i64,
  8919665174794722967i64,
  9020270542110909417i64,
  -5333518554210103780i64,
  5973783574437222287i64,
  -7144641767209551109i64,
  -751462868150925351i64,
  8046966450132071785i64,
  4527234455223267830i64,
  1576223413599996824i64,
  -3962671058057707967i64,
  -741332333651329351i64,
  4171083601009212711i64,
  4517751478817216183i64,
  -4783003793893791059i64,
  8304564248414002367i64,
  5798912143342322817i64,
  6841109069610283922i64,
  1835718831018589623i64,
  -2455311955591980547i64,
  -8597812633087629694i64,
  -8061239190161274602i64,
  -5405566122631409748i64,
  -6489928375131773321i64,
  -5261054523945701142i64,
  1394227986815911003i64,
  2383264289786925200i64,
  254265817555738753i64,
  2229100980207886596i64,
  -5405566389228055134i64,
  -6011681254206675337i64,
  -4034568503689565361i64,
  4070926030030279223i64,
  -1482774514016539378i64,
  -5682399218303063341i64,
  581069817407003565i64,
  208987453929152578i64,
  -7237383776928513756i64,
  8303468629484634633i64,
  -6353576284641908063i64,
  -740038391407047921i64,
  -2661064411211337487i64,
  -7908311565356753054i64,
  1173469343982075868i64,
  -7926140750231322558i64,
  4618213259137007616i64,
  3350022212327383056i64,
  -8657469070009936560i64,
  -5930958129848473531i64,
  2594082547874668367i64,
  145381942991663847i64,
  581606548377861570i64,
  5260206306342779336i64,
  2315977150633866678i64,
  -5403785122953111408i64,
  5772956522594238551i64,
  -5405753551693395627i64,
  -7513059567881986262i64,
  -1980915285885961167i64,
  2298701246559609i64,
  336311138930457307i64,
  6147582236252157952i64,
  577130334747361281i64,
  -8574462505597040608i64,
  -3445707699461291772i64,
  2256212914190979754i64,
  5466811400154262908i64,
  -6011707230506088467i64,
  -2301334444506865841i64,
  1152997736140895414i64,
  384390022035365060i64,
  -7576700542110400511i64,
  -333215519408643876i64,
  1686733321864768590i64,
  -3410913764412107714i64,
  1153485421977399640i64,
  577024547179777285i64,
  2666272187156691097i64,
  362779285952333909i64,
  -2749922916233740112i64,
  9032793574781485088i64,
  -4857173596235071388i64,
  -1593318645851159991i64,
  -5246814494025206027i64,
  4900067009226551545i64,
  216027887382144i64,
  2308385230281051905i64,
  1261439400986652179i64,
  -9191795835111582427i64,
  -7999565810009942782i64,
  -380255211906333438i64,
  -2682158560250420023i64,
  -2672998494670503299i64,
  -2733944973954041705i64,
  225250489201803189i64,
  1188986421439205275i64,
  2450159362479217923i64,
  -5814186736459929054i64,
  9221264110040653858i64,
  364933958861708614i64,
  5188288180354987471i64,
  293001135441140753i64,
  -439744248174892414i64,
  -6388860648192704284i64,
  -5093477406492007194i64,
  1245254096439274627i64,
  1243033601389999457i64,
  -4257076291779253206i64,
  8928946119945227524i64,
  9216328784478208457i64,
  1522515745011720058i64,
  149199410881568655i64,
  2308236014328720102i64,
  4806042007196768479i64,
  4120621295356455488i64,
  -164672245107521246i64,
  -3999783105063776005i64,
  3090697129733369226i64,
  3715161643688335274i64,
  6145679180711134478i64,
  1188893655738183760i64,
  7872453487343050510i64,
  6133074022727329621i64,
  -1237401187200147797i64,
  -7882356331113322680i64,
  -8307792813651954368i64,
  4731914247492687339i64,
  3851599496846571118i64,
  8732406144425049434i64,
  -1892076283941519325i64,
  2661512746015878562i64,
  -5968685972155669221i64,
  -9212979642079523819i64,
  -5097980884366174603i64,
  -6154502958559349590i64,
  -1629408025840419110i64,
  7806298706261152371i64,
  -416346984969889557i64,
  3825556685993262303i64,
  -1199064425079136426i64,
  3340146196780641055i64,
  -6821504747364354185i64,
  946479330328689779i64,
  -3366244189264493583i64,
  -4395193992606819545i64,
  3335009611705996283i64,
  4276095731849488765i64,
  -112501935491327493i64,
  -2524656786751505164i64,
  2731334182402847485i64,
  6189416956144927578i64,
  6229925960551740066i64,
  136441964784248458i64,
  -4761119473600373826i64,
  8924743610823687335i64,
  5740953292709919054i64,
  -689755408169600593i64,
  -4849690776365239652i64,
  8241300199767296994i64,
  -3460488724704837614i64,
  2378585596745367407i64,
  2305844318936317666i64,
  5284202504914319113i64,
  837505514129654792i64,
  -774798595745377728i64,
  -8934498792513546303i64,
  -6159572132180430076i64,
  -8940068874829168611i64,
  9033697484972504943i64,
  -7522102093166935172i64,
  -2916071962494966083i64,
  7246291811891679000i64,
  1306044992227179133i64,
  21554989667096284i64,
  -7906068932458956826i64,
  521816456067076i64,
  686675444999725312i64,
  9055423782139596800i64,
  -2461445757335207890i64,
  -1796935785160294393i64,
  -4323455275858236763i64,
  582464144489758556i64,
  836252101246182528i64,
  -2666865298283293356i64,
  -285978427435126777i64,
  -4449555813249755976i64,
  -2265169875059873415i64,
  750559241041084i64,
  2519377361883031312i64,
  -3458211737111494647i64,
  1128106894041350826i64,
  -2695479143760743348i64,
  4510280540032673025i64,
  -1482808824090328346i64,
  8682940665734539987i64,
  -2807989935212861187i64,
  192143055327176662i64,
  1152923563604197892i64,
  6489034492847716496i64,
  -618441216810287083i64,
  192070319278655488i64,
  1153965143963616400i64,
  288238987485708289i64,
  -6160254708269411822i64,
  1670973793218068490i64,
  -2023397166118072304i64,
  -8070410228814495135i64,
  72621639475350759i64,
  324483733343074592i64,
  3474542573140021760i64,
  5670308245306212419i64,
  -298557347687557804i64,
  -6352651483751373732i64,
  -6102469233423278763i64,
  8885144431920499770i64,
  -1203624073319900801i64,
  -3842345971706930957i64,
  -5975366471159049724i64,
  -6160516004578988270i64,
  -8610385749517814238i64,
  -4764433185101758748i64,
  8211432268962813662i64,
  3844523165355562632i64,
  -3073074143660653197i64,
  6283284162618888706i64,
  5260456525242641076i64,
  190308122563701726i64,
  -3175525742091147793i64,
  7635611916953050686i64,
  6241805622163084831i64,
  -337847880690366283i64,
  -1855861430661545808i64,
  1675045761899053090i64,
  4527224043459925352i64,
  7635209148635825340i64,
  -6957419240728592449i64,
  6418267969186361846i64,
  -2430794421997577665i64,
  -370667288928981173i64,
  146666788692476404i64,
  4612284480183557668i64,
  213534019047644708i64,
  4613321811674661888i64,
  52247678928625664i64,
  -9214938389939978112i64,
  323608087033413632i64,
  -387466798059989680i64,
  5269211725006149752i64,
  2594090977814107954i64,
  1126698613862177i64,
  2598602482027279874i64,
  647216107308560256i64,
  -776395590215731552i64,
  -1334929711514976223i64,
  334955845651577219i64,
  -9223360311274301237i64,
  4505519164964280i64,
  5269219325445926408i64,
  563801891045378i64,
  72143485625932928i64,
  162130096175382816i64,
  20336631311157508i64,
  162411218289024066i64,
  2630204170520457472i64,
  2070668122956267529i64,
  16867323910553664i64,
  339172205650772994i64,
  243811926861154308i64,
  2263612013450194062i64,
  3420633451285058351i64,
  -8069807684489297987i64,
  -6151581831515079224i64,
  1373350822083166226i64,
  134738399397479568i64,
  2175704095757771336i64,
  3476382796627349760i64,
  269459204405796993i64,
  768426955524278536i64,
  17653714804424704i64,
  -7280390031796008824i64,
  -5391258690441379797i64,
  -2841771194325127809i64,
  -9223363215862305322i64,
  5380256629464366445i64,
  680896575432302592i64,
  6172138042371872085i64,
  -6014539671973841459i64,
  -1214844897686017201i64,
  4775102769291300261i64,
  -4030146731445690638i64,
  7246688224207432059i64,
  -6957462118617228675i64,
  -1203624074025173258i64,
  -5963120067315166861i64,
  -1203641662781215126i64,
  4526029085369960207i64,
  4227560277822213016i64,
  4067301030601310748i64,
  6914077100674435360i64,
  3342771963225282751i64,
  6126883266763720928i64,
  -319189435674026863i64,
  -1791119059074212020i64,
  -638219699034261595i64,
  -5963132829892284567i64,
  8455120555653271914i64,
  -4355079867963662184i64,
  2747113760251585028i64,
  -3762805956609501868i64,
  5530346944408592644i64,
  1538680093570794628i64,
  9076087923410094099i64,
  -5963128122566333823i64,
  -2023950475625856118i64,
  8615303604613562672i64,
  6545140197900689454i64,
  -648854772965677955i64,
  -4090158245094296932i64,
  2028381396268087250i64,
  3338386684740675453i64,
  795027723003067748i64,
  2474047951135921305i64,
  -7418677612275345946i64,
  -1199080884935071261i64,
  4572175798512347423i64,
  -4759039714915700803i64,
  -746658773093165596i64,
  -8005231835923002990i64,
  4116512138971690274i64,
  9216487343736683384i64,
  -648955127038128261i64,
  -3932287155904035908i64,
  -7861089366943620523i64,
  6181326733478275912i64,
  90479218486029896i64,
  -134939997821584525i64,
  -6920064490433889036i64,
  -1453631094192977550i64,
  -4857168588796426204i64,
  3046947738964755076i64,
  1661899578950900648i64,
  4616827407669243698i64,
  288624956071202620i64,
  -7548562890690811197i64,
  -6225651165337997892i64,
  -1733310537040608645i64,
  2569080942597594i64,
  5260284338111343150i64,
  74478216960419330i64,
  4682821074713348132i64,
  -4577388903864654583i64,
  -8076238924097252864i64,
  -406468539372451640i64,
  3465436530791682267i64,
  -4538462665024166019i64,
  6145548767167511284i64,
  577094837634663328i64,
  2594293828223196939i64,
  61034635893091968i64,
  2375482912409485440i64,
  7889562100035633280i64,
  4502760634484654216i64,
  5694877279574870198i64,
  4583864528688111i64,
  6665331984140160867i64,
  758821923805i64,
  267060977642169i64,
  -1961329279941694902i64,
  -154733170429460352i64,
  4536547867757674605i64,
  -2736091800320867872i64,
  3278670629521443197i64,
  6485183741661984143i64,
  2594074456366202616i64,
  55370280079148544i64,
  -3970288041773891566i64,
  7682872669222076560i64,
  4635621287599530963i64,
  70665493511i64,
  358311883991698413i64
}; // weak
char byte_2DAB547B[221] =
{
  '^',
  '\xBC',
  'P',
  '\xBC',
  '\x91',
  '\x9B',
  '\x17',
  '\xD8',
  '\xB5',
  '\xE5',
  '|',
  '\xF1',
  '\x14',
  '2',
  'i',
  '\xBF',
  '\x82',
  '\xE5',
  '\xAF',
  'o',
  '\xF9',
  'u',
  '1',
  '6',
  'Q',
  '\xAC',
  'V',
  '\xF7',
  't',
  '%',
  '\x93',
  '(',
  '\xF3',
  '\x94',
  'P',
  '\x9B',
  '\xE7',
  '\x8D',
  '\x86',
  '\x82',
  '}',
  '\xB7',
  'Z',
  '\xF8',
  '\xC5',
  '\xFE',
  '.',
  '\xCD',
  '=',
  'p',
  '\x18',
  '\xEE',
  '\xFA',
  '\x0E',
  '\xE0',
  '\xBC',
  '\x06',
  'F',
  '0',
  '\xF8',
  '\xE7',
  '\x16',
  '#',
  '\xB1',
  '\xEA',
  '\x9F',
  '\x11',
  '\0',
  'T',
  '=',
  'O',
  '\x98',
  '\x86',
  '[',
  'i',
  '&',
  '\xA4',
  '\x1A',
  'V',
  'H',
  '|',
  '\xC2',
  '?',
  'A',
  '%',
  '#',
  '\xB7',
  '\xE8',
  '\x8E',
  '\xD9',
  '\xFA',
  'i',
  '\x8C',
  '?',
  '\xF5',
  '<',
  '\x90',
  '\x9C',
  '\xCB',
  '\x80',
  '%',
  '\xCF',
  '\xFE',
  '\x8F',
  'o',
  ',',
  '\xDF',
  'w',
  '\xAE',
  '\xA5',
  '\x96',
  '\xEB',
  'f',
  '\r',
  '\x9C',
  '\xA4',
  '3',
  '\x83',
  'J',
  'j',
  'Y',
  '\x04',
  '2',
  '\xC7',
  '\xB5',
  '\xD0',
  ']',
  '\xEA',
  '^',
  '\xFD',
  '\xEB',
  't',
  '<',
  '\xDC',
  'd',
  '\xAF',
  '\xAA',
  '~',
  '\xF5',
  '\xC1',
  '\xB3',
  '\xFB',
  'a',
  '\xA0',
  'f',
  '\xA9',
  '\x93',
  '\x7F',
  '#',
  '\xE9',
  '\xE1',
  '\xB5',
  'P',
  '\xEA',
  'M',
  '\xDC',
  '\x8A',
  '6',
  '*',
  '\xF8',
  '\xCD',
  '\xAE',
  '\x16',
  '>',
  '\xDE',
  'q',
  '\x8C',
  '\xCA',
  '\xD9',
  '\xD5',
  '\xA2',
  '\x9F',
  '\x86',
  '*',
  '<',
  '\xBA',
  '[',
  'a',
  '\x81',
  '\x1F',
  '\xDC',
  '\x80',
  '\xA5',
  '\x96',
  '\xC6',
  '\x81',
  '\xCB',
  '\x0E',
  '\x05',
  '\x03',
  '\xF7',
  '6',
  '\f',
  '3',
  '\x9D',
  'V',
  '\xD4',
  '}',
  '\x82',
  'V',
  '\xB0',
  '\x94',
  '\xF9',
  '\x10',
  'z',
  '\x11',
  '\x96',
  '.',
  '\x1C',
  '\xC0',
  '}',
  '1',
  'E',
  '\xFA',
  '\xCF',
  '\x01',
  '2',
  '6',
  '\xB2',
  'p',
  '\x89'
}; // weak
_UNKNOWN loc_2EAD25F1; // weak
_UNKNOWN unk_2F69A181; // weak
_UNKNOWN unk_2F6D21C4; // weak
char byte_2F90E81D[3] = { 'F', '6', 'i' }; // weak
char byte_2FEA2391[2] = { '\x18', ']' }; // weak
int dword_300940E9 = -1585859842; // weak
_UNKNOWN unk_30C33BA1; // weak
char byte_31AE81E2[2] = { '\xD5', '\x99' }; // weak
_UNKNOWN loc_31F1B639; // weak
void *__ptr32 off_31FDCA06 = &unk_19714C5E; // weak
char byte_325E85C3[] = { '\xA8' }; // weak
int dword_33CC6D99 = -1038421390; // weak
_UNKNOWN loc_344E0A26; // weak
char byte_34A497EF[1303] =
{
  '\xBC',
  '\xCA',
  '\xA2',
  't',
  '\x10',
  'z',
  '^',
  '\xE5',
  '/',
  '6',
  '\xBA',
  '*',
  '\xFD',
  'd',
  '\xFF',
  '\x8B',
  '\x8C',
  '\xEA',
  '\xE1',
  '\xC3',
  '\x94',
  '\xFD',
  '\xBB',
  '\x17',
  'W',
  'Q',
  'z',
  'F',
  'Y',
  '\"',
  ']',
  '\xD4',
  '\x9E',
  'Q',
  '\x96',
  '\f',
  'l',
  '\xBB',
  '\x0F',
  'S',
  'R',
  '\x16',
  '\x87',
  'n',
  '\xBB',
  '\x0F',
  '\x99',
  '\xF6',
  '\xEF',
  '4',
  'W',
  'y',
  '\xDF',
  '\xAC',
  '\x83',
  '=',
  '\xAB',
  'C',
  '\xDA',
  '.',
  '\xFD',
  '\xA4',
  '<',
  'a',
  '\xE0',
  '\xF6',
  '9',
  '\xED',
  '\'',
  '\xE5',
  '\t',
  '\x03',
  '\xDA',
  '\xCF',
  '\xD3',
  '\xE4',
  '5',
  'A',
  '\xA8',
  '\xF2',
  '\xF3',
  '\xBC',
  '\xF4',
  '\x93',
  '\xF2',
  '\x94',
  '\x81',
  'm',
  '\xD7',
  '$',
  '\xAF',
  '\"',
  '\xD2',
  '\xE1',
  'j',
  'R',
  '\xF6',
  '\x80',
  't',
  '\xB9',
  '\xC6',
  '\xFE',
  '\xA0',
  '<',
  'a',
  '`',
  '\xFB',
  '\x9C',
  '\xF6',
  '\x1F',
  '\xFB',
  'w',
  '\x91',
  '\xCE',
  '\x01',
  '\xFD',
  'L',
  '\x89',
  '\x84',
  '\n',
  '\x9F',
  '\xD3',
  ':',
  '\x15',
  '\xC8',
  '\xC0',
  'v',
  '`',
  '\xF2',
  '*',
  'O',
  '\x18',
  '\xB8',
  '\xED',
  '\xD2',
  '\xCF',
  '\x1F',
  '\xE5',
  ')',
  '\xD2',
  '\xD5',
  '\x93',
  '~',
  '\x86',
  '\xC0',
  'B',
  '\x87',
  '+',
  '5',
  '\xD3',
  '\xFE',
  '\a',
  'J',
  'w',
  'G',
  '2',
  '\xED',
  '\x91',
  'P',
  '\xE5',
  'z',
  '\xA5',
  '\xE7',
  'U',
  '\xA0',
  'Z',
  '\xE1',
  's',
  '\xD2',
  'S',
  '\x02',
  'a',
  '\x95',
  '\xCF',
  'i',
  '?',
  '\x7F',
  '\x14',
  '\xC8',
  '\xC0',
  'v',
  '\0',
  '\xE7',
  '\x1E',
  '\b',
  'U',
  '\xAE',
  '\xBF',
  '\xD9',
  '3',
  '\n',
  '.',
  'v',
  '\xB8',
  '\x92',
  'L',
  '\xE5',
  'O',
  '\x18',
  '\xB8',
  '}',
  'N',
  '{',
  '^',
  '\xE5',
  '\x1F',
  ' ',
  '\x1D',
  '\xAE',
  '\xA6',
  'N',
  '{',
  ' ',
  'T',
  '\xF9',
  't',
  'z',
  '^',
  '\x93',
  'f',
  '@',
  '\xFB',
  '\x9C',
  '\xF6',
  '\xDB',
  '(',
  '\x7F',
  '\x82',
  't',
  '\xB8',
  '\x92',
  '\xE4',
  'U',
  '\xC0',
  '\xB8',
  '\xCA',
  '\xE7',
  '\xB4',
  '\xE7',
  '{',
  '\x81',
  '\f',
  '\xD8',
  'v',
  '\xEC',
  'I',
  '\x99',
  '4',
  'T',
  '\xB9',
  '\x92',
  'P',
  '\x02',
  '\xB1',
  '\xCA',
  '\xE7',
  '\xB4',
  'g',
  '*',
  '\xD1',
  'P',
  '\xE5',
  's',
  '\xA3',
  '.',
  ')',
  '\xDF',
  '\xC8',
  '\xC0',
  '\xB6',
  '\x8B',
  '\xDC',
  'R',
  '\xB2',
  'D',
  '\xD8',
  '\x0E',
  '9',
  '\xCD',
  '\x94',
  '\x82',
  '\x17',
  '\xAA',
  '\xC8',
  '\xCD',
  '\x9A',
  '\x92',
  'U',
  '\xE9',
  '\xEC',
  '2',
  '\x99',
  'W',
  '\xF9',
  'F',
  '\x06',
  '\xB6',
  'C',
  'N',
  '\xF3',
  '*',
  '\x7F',
  '\x92',
  '\xD1',
  '\x84',
  '~',
  '\xB3',
  '.',
  'I',
  '\xC1',
  '\x8B',
  'U',
  '\x04',
  '\x8F',
  'i',
  '\x8F',
  '^',
  '\xE8',
  '\xEC',
  'r',
  '\xFA',
  '%',
  '%',
  '\x8B',
  '\xD2',
  'E',
  '8',
  ']',
  'R',
  '\\',
  '#',
  ']',
  '\x04',
  '\x8E',
  '\xA9',
  '<',
  '\x91',
  '\x0E',
  '\x82',
  's',
  '^',
  '\x85',
  '5',
  '\xD2',
  '\xC5',
  '\xDC',
  '\xAC',
  'y',
  '\x95',
  '\'',
  '\x19',
  '\xDA',
  '\x0E',
  '=',
  '\x9D',
  'S',
  '\xB2',
  'F',
  ':',
  '\b',
  'l',
  '\xD3',
  '6',
  '\xA9',
  't',
  '\x11',
  ' ',
  '\xAF',
  '\xF2',
  '\xA4',
  'Y',
  '\xE5',
  '\x90',
  '\xD3',
  '\xE5',
  '\xC7',
  '\xA4',
  '\xD0',
  'E',
  '\xA0',
  '\xE6',
  'U',
  'P',
  ';',
  '\b',
  '\xD4',
  'i',
  '+',
  'k',
  '\x86',
  '\xB6',
  'C',
  'N',
  '\x97',
  '=',
  'k',
  '\x86',
  '\xB6',
  'C',
  'N',
  '\x7F',
  '\v',
  'Y',
  '\x1D',
  '\xDA',
  '\x0E',
  '9',
  '=',
  '\xA6',
  '\xF2',
  '\xB4',
  '\xB9',
  '\x8A',
  '\xFD',
  'v',
  '\xF7',
  '\xCB',
  '(',
  '\xA8',
  '\x1D',
  '\0',
  'C',
  '\xB6',
  '\xDD',
  'S',
  '\xC3',
  '}',
  '[',
  '\x1D',
  '\xD8',
  '\x0E',
  'O',
  '\x89',
  '_',
  '\xEB',
  '\xCA',
  '\x90',
  '\xED',
  '\xE0',
  'o',
  '\x8E',
  '\x99',
  '\x96',
  '\x85',
  '\f',
  'l',
  '\xEF',
  '\xDB',
  '\"',
  '3',
  '\xDC',
  ']',
  'l',
  '\xAE',
  '\xF0',
  '\xBE',
  '\xB9',
  'R',
  '\x8E',
  '2',
  '\xDB',
  '\xA8',
  '\xF2',
  '\xBE',
  'Y',
  'S',
  '\xB6',
  '\xB2',
  ':',
  't',
  '\xDB',
  '\xD9',
  'H',
  '\xA6',
  '=',
  '\x8B',
  '\xD2',
  'A',
  '\xE9',
  'y',
  'M',
  '(',
  ']',
  '\x90',
  '~',
  'R',
  '\xF0',
  'b',
  '\x95',
  '\xF7',
  '\xDD',
  '\xFA',
  'J',
  '\xB9',
  ',',
  '\xB2',
  '\xCA',
  '\xFB',
  'f',
  '\xCD',
  't',
  '\x96',
  'E',
  'q',
  'C',
  'z',
  '\xFE',
  'Y',
  'V',
  '\x87',
  '\xB6',
  '\xF7',
  '\xDD',
  ':',
  ',',
  'z',
  'q',
  '\x95',
  '\xF7',
  '\xDD',
  ':',
  ',',
  '*',
  ']',
  '\xD4',
  '\x9E',
  'Q',
  'T',
  ':',
  '\xA8',
  '=',
  '\xA3',
  ',',
  '\x19',
  '\xB2',
  '\xED',
  '<',
  'L',
  '\xF9',
  '\xA3',
  '\xA8',
  't',
  '\xB9',
  'Z',
  '3',
  '\xED',
  '\x91',
  '\x95',
  '\xCE',
  '\x0E',
  '\xC9',
  '\xB4',
  'G',
  '\xA4',
  '\xBB',
  'k',
  '\x7F',
  'P',
  ' ',
  '\x03',
  '\xB7',
  '\x1D',
  '\xC8',
  '\xB4',
  'G',
  '\xA4',
  '\xCB',
  '5',
  '\xF6',
  '\xD3',
  '\x02',
  '\xA1',
  '\xCA',
  '\xCF',
  '\xD3',
  '\x9E',
  'W',
  '\x81',
  '\xEA',
  '*',
  '?',
  'o',
  '\x90',
  '\xB2',
  'G',
  '\xA4',
  '\xBB',
  'k',
  '\xF2',
  '*',
  '\x12',
  '\xAB',
  '\\',
  '\xAD',
  '\x99',
  'R',
  '0',
  '\x03',
  '\xDB',
  '.',
  '=',
  '\xFB',
  'w',
  '\xD4',
  '.',
  'W',
  '\xFA',
  '\x19',
  '\x02',
  '\xD2',
  '\xF1',
  'J',
  '\xCD',
  'D',
  '$',
  'T',
  '\xF8',
  '(',
  '\x99',
  '\xB6',
  '\x02',
  '\xA1',
  '\xC2',
  '\xE7',
  'w',
  '\x93',
  'W',
  '\x81',
  'P',
  '\xE1',
  'j',
  '\x92',
  '\xD7',
  '$',
  '\x19',
  '\xB8',
  '}',
  '\xB0',
  '&',
  '\xE5',
  '\t',
  '\x03',
  '\xB7',
  '\x03',
  'y',
  '\xFD',
  '\xAF',
  '@',
  '\x86',
  'n',
  '\xBB',
  '&',
  'S',
  '\xF9',
  '\x03',
  '\xA1',
  '\xCB',
  '\x95',
  '\xD4',
  '\x1F',
  '\x05',
  '2',
  'p',
  '\xFB',
  '\0',
  '\xBF',
  '\xA5',
  '<',
  '\t',
  '\x15',
  '>',
  '\xA7',
  '\xFD',
  '\xCB',
  '\x1E',
  '\x90',
  '\xCE',
  '\x01',
  '|',
  'I',
  '\x89',
  '\xC6',
  '*',
  '\x9F',
  '\xD3',
  '\x9E',
  'Q',
  ' ',
  '\x03',
  '\xB7',
  'C',
  '\xEA',
  '\x92',
  '\xF2',
  '\'',
  'H',
  'w',
  '\x97',
  '$',
  '%',
  '\x12',
  '\xAA',
  '~',
  'N',
  '\xFB',
  '\x12',
  '\x84',
  '\f',
  'i',
  '\xBB',
  '\xE4',
  'K',
  'J',
  '\x17',
  '\xE9',
  'p',
  '\xB5',
  'R',
  '\n',
  '\x90',
  '\x01',
  '\xDB',
  '\xE7',
  'a',
  '\xAF',
  '\x7F',
  '\x15',
  '\xC8',
  '\x80',
  '\xB6',
  '\x03',
  '\xC9',
  '\xF7',
  '\x02',
  '\x19',
  '\xB0',
  '\x1D',
  '\x9C',
  'f',
  '*',
  'Y',
  '\x91',
  '.',
  'p',
  '\xB3',
  'N',
  ')',
  'x',
  '\xB1',
  '\x03',
  '\xE8',
  '\x9C',
  'W',
  '\xF9',
  'F',
  '\x06',
  '\xFE',
  '\xCD',
  '\xCE',
  '\xE9',
  '\xF2',
  '\xDF',
  '\x82',
  '\x17',
  '\xAB',
  '\0',
  '\xCC',
  ')',
  'Y',
  '\x94',
  '.',
  '\xA2',
  '\xBF',
  '\xA7',
  '\xB0',
  '*',
  'l',
  '\x87',
  '\x9C',
  'f',
  'j',
  '\xE5',
  '\x9B',
  '\x19',
  '\xD8',
  '\xE8',
  '7',
  'j',
  '^',
  'S',
  '\'',
  '\xA3',
  '\x89',
  '\xC2',
  '<',
  '\xA5',
  '\xE8',
  '\xC5',
  '*',
  't',
  '\xE4',
  '\x98',
  '2',
  '\xE9',
  '\x85',
  '*',
  '\xF6',
  '\x1B',
  '5',
  '%',
  'K',
  's',
  '\x15',
  '\xFA',
  '\x8D',
  'm',
  'I',
  '\t',
  '^',
  '\xB2',
  '\x8A',
  ';',
  '\xA7',
  's',
  '\xC8',
  '\"',
  't',
  '\x11',
  '\xD8',
  '\xA6',
  'L',
  'x',
  'a',
  '\x15',
  '\xFB',
  '\x9D',
  '\x9A',
  'W',
  'y',
  '\xDA',
  '\xA8',
  'b',
  '\xBF',
  'Q',
  '\x97',
  '\x90',
  '\xD5',
  '\x81',
  '\r',
  '\xC1',
  'c',
  '*',
  'O',
  '\x1A',
  '\xAB',
  '\xD8',
  'o',
  '\x7F',
  'w',
  'I',
  'y',
  '\xD2',
  '\\',
  '\xC5',
  '~',
  ';',
  '\xCC',
  '\xAB',
  '\xA8',
  'v',
  '\x11',
  '<',
  '^',
  '\x93',
  'j',
  '\x17',
  '\xC4',
  'L',
  '\xDF',
  '\v',
  'j',
  '\x17',
  '\x90',
  'd',
  '\xCF',
  '\x92',
  '\xA1',
  '\xED',
  '\x90',
  '\xB0',
  '\xA5',
  '<',
  'm',
  '\xAC',
  'b',
  '_',
  '\0',
  '\x02',
  '\x87',
  'n',
  '\x86',
  'k',
  '=',
  '\xA7',
  'R',
  '\x02',
  '\xED',
  'Q',
  'G',
  '\xE5',
  '\x91',
  '\xBF',
  'b',
  '\xAE',
  'm',
  '<',
  '\xB9',
  '\x93',
  '7',
  '\xEC',
  'U',
  '\xC5',
  '\xC9',
  '\xE5',
  '\xAF',
  'Q',
  '\xBF',
  'b',
  '\xAE',
  '/',
  'w',
  '\xC2',
  '\xDF',
  '\xCD',
  '\x97',
  'm',
  '\xD0',
  '\xEA',
  '\xCF',
  'i',
  '\xF6',
  '\b',
  'v',
  '\xD0',
  '\xC9',
  'g',
  '\xB3',
  'Q',
  '\xBF',
  'b',
  '\xED',
  'A',
  '[',
  'M',
  '\xBA',
  'r',
  '\x1D',
  '\xB0',
  '2',
  'Y',
  '\t',
  'p',
  '\xF2',
  '\x1D',
  '\xBA',
  '\x19',
  '\'',
  '\x95',
  'y',
  '\xAC',
  '\xDF',
  '\xB1',
  'W',
  '\x17',
  '\xA2',
  '\xB6',
  '\x98',
  '\xF4',
  ']',
  '\xB6',
  '\x86',
  'I',
  '\xD3',
  ')',
  '\x98',
  'y',
  '\x0E',
  '\xDD',
  '\x0E',
  '\x8A',
  '\xFF',
  '\xCB',
  '\xA7',
  '.',
  '\xDB',
  '\x03',
  '\"',
  '\xF2',
  '\xAF',
  '5',
  '\x1B',
  '\xD0',
  '\xED',
  '\x01',
  '\x91',
  '\xBE',
  'U',
  '\xE6',
  '\xB3',
  '~',
  '\xCD',
  '\xC5',
  'V',
  '_',
  '\x94',
  '\x97',
  '\x0F',
  '!',
  '\xEE',
  '\x94',
  'Y',
  '+',
  's',
  '\x9C',
  '\x10',
  'v',
  '/',
  '\x05',
  ')',
  '\xD4',
  'o',
  '\xD0',
  '\xAA',
  '\x17',
  '\xA4',
  '\xCB',
  '\x7F',
  '^',
  '\xFD',
  '\xBF',
  'F',
  '\xC0',
  'd',
  '\x9E',
  'T',
  '\xC7',
  '\x82',
  '\x1E',
  '\xED',
  'E',
  '\x92',
  '\x92',
  '\xEA',
  '7',
  '\xE8',
  'U',
  '\x19',
  '\'',
  '\x94',
  'f',
  '\x1E',
  't',
  '*',
  '\xC5',
  '\xE1',
  '5',
  '\xFC',
  '\x98',
  '\x03',
  '\xA4',
  '\x13',
  '\xCA',
  'K',
  '\t',
  '\\',
  '\xBA',
  '@',
  '\xDF',
  ')',
  ',',
  '\xD0',
  '\xE7',
  'H',
  '\x1B',
  '\x95',
  '\x7F',
  '5',
  '\xA7',
  '>',
  'U',
  '\x89',
  '\x17',
  '\xCA',
  '\x99',
  '%',
  'r',
  '\xE9',
  '\0',
  '\xF2',
  '\xB6',
  '\x99',
  ' ',
  'v',
  '\xC0',
  'd',
  '\n',
  'S',
  '\r',
  '\\',
  '\xAB',
  '\x1A',
  '=',
  '\xA7',
  'Y',
  '\xBA',
  '\xE1',
  '\xDA',
  '\xA9',
  '\xFC',
  '\xA4',
  '\xB2',
  '\x1D',
  '\xB6',
  '\x03',
  '0',
  'R',
  '\x99',
  '%',
  'r',
  '\xA9',
  'P',
  '(',
  '\xFC',
  '\x81',
  '\xDB',
  '`',
  '0',
  '=',
  '\x94',
  '\x90',
  '\x1C',
  '\xED',
  '\x04',
  '\xF2',
  '\xB7',
  '\xDA',
  's',
  '\xE1',
  'P',
  '\x83',
  '\xD9',
  '$',
  '\xAE',
  '\x1D',
  '\0',
  '\x9E',
  'T',
  '\xC9',
  '+',
  '\x87',
  '@',
  '\x0F',
  'k',
  '\xCC',
  '\x03',
  '\x9D',
  '\0',
  '\x9E',
  'S',
  '?',
  'i',
  '\xCF',
  '\xB6',
  '\x06',
  '@',
  '\xA4',
  '\x7F',
  '`',
  'v',
  '\xE0',
  'a',
  '<',
  '\xA3',
  '$',
  '\xB8',
  '8',
  '\xED',
  '\x81',
  '\x90',
  '+',
  'd',
  '\xC3',
  '\xCF',
  '\x95',
  'J',
  '\x81',
  '[',
  'L',
  '\xD6',
  's',
  '\xE5',
  'X',
  '\x92',
  'c',
  '\xF1',
  '\xF5',
  '+',
  '\x97',
  'H',
  '\'',
  '\x95',
  'y',
  '4',
  '\xE7',
  '\xDB',
  '\x81',
  '\x90',
  ')',
  '&',
  '/',
  '\xCA',
  '\xB1',
  '\x04',
  '\xC6',
  'I',
  '\xA1',
  '\xDB',
  'C',
  '\t',
  '\xE5',
  '\x17',
  '\x92',
  '\xED',
  '\xB8',
  '\x19',
  ';',
  '\xFD',
  '\xA6',
  'I',
  '\xBC',
  '\xFC',
  '\xAB',
  'T',
  '\n',
  '\xBC',
  '\x93',
  'W',
  '\x0E',
  '\x90',
  'w',
  '\xFB',
  'L',
  '\xD6',
  '\xAE',
  'U',
  '\x88',
  '\x15',
  'y',
  '\r',
  '\\',
  '\xAA',
  '\x10',
  ',',
  '\xF2',
  'a',
  '\xFB',
  '\xCA',
  '\xB9',
  '\xB4',
  '\xFC',
  '\xC3',
  '\xDA',
  '\x83',
  '\xA5',
  'E',
  '#',
  '\xAC',
  '\xDF',
  'y',
  'W',
  '4',
  '\xEF',
  '\x94',
  '\x8E',
  '\xB3',
  '}',
  '\xE5',
  'Y',
  '\xB7',
  '\x7F',
  '\xB2',
  '\x98',
  '}',
  '\xDB',
  'h',
  'f',
  '\xEF',
  '\xF6',
  'S',
  '\x0F',
  '\xBB',
  '\xBA',
  'P'
}; // weak
void *__ptr32 off_357080EC = (void *__ptr32)0x27E446C9i64; // weak
_UNKNOWN unk_35724D61; // weak
int dword_367C7D39 = -50156854; // weak
void *__ptr32 off_369A5D1E = (void *__ptr32)0x29E0474Di64; // weak
char byte_375101E7[161] =
{
  '\b',
  '\x0F',
  ':',
  '\xA5',
  'k',
  '@',
  '\xC9',
  '\xD0',
  '\xEB',
  '\x14',
  '[',
  'E',
  '\xAD',
  '\xE8',
  '\xF6',
  '\xC7',
  '\x9C',
  '\xAD',
  '\xE0',
  '\xE6',
  '9',
  '\xD1',
  '>',
  '\xEA',
  '\xFF',
  '\x83',
  '\x19',
  '\xFB',
  '\xA5',
  '0',
  '\xDB',
  'Z',
  'D',
  'I',
  'X',
  '\x99',
  '\x92',
  'Q',
  '/',
  '\xDE',
  '\xFB',
  '\x8D',
  '\xF7',
  'k',
  '\xE7',
  '\xEB',
  '\xDE',
  'g',
  '+',
  '}',
  '\xB1',
  '\xFD',
  'f',
  '\xBB',
  '\xC1',
  'g',
  '\xAF',
  '\x87',
  '\xC1',
  '\xE7',
  '\xB4',
  '\xC7',
  '9',
  '\xCF',
  '\xCB',
  'n',
  '\x9B',
  '}',
  '\xB4',
  '\x06',
  'w',
  ':',
  'G',
  '\x9F',
  '\xEF',
  '\xBB',
  'B',
  '\xCF',
  '\x95',
  '\xC8',
  '\x86',
  'j',
  'o',
  'm',
  '\x1D',
  '\xA6',
  '\x93',
  '\xF6',
  '2',
  'H',
  '\xEA',
  '\xF8',
  '\x8E',
  '\x11',
  '\x8A',
  '>',
  '\x18',
  '\xFA',
  '\x1A',
  '\xE2',
  '\x1F',
  '\x97',
  'N',
  '\xE3',
  '\x15',
  '\xAB',
  '\x98',
  '\xA2',
  '+',
  '\xB6',
  '\xCF',
  '\xF7',
  '\x1A',
  'U',
  '>',
  '\xDF',
  '\xB6',
  'W',
  '\xF9',
  '\f',
  '\xA7',
  'L',
  '\x87',
  'D',
  '\xDD',
  '_',
  '\xB7',
  '8',
  '\xA7',
  '\xDF',
  'N',
  '_',
  '\xDD',
  '\xBE',
  '\xBA',
  '\x19',
  '\x95',
  '\\',
  '\xFB',
  '\xFF',
  '\xCE',
  '\xAD',
  '\xA4',
  'x',
  'A',
  '\xDB',
  '\x1F',
  '\xD3',
  '+',
  'L',
  '\x9F',
  'u',
  '@',
  '\xE7',
  '<',
  '\xD0',
  '\x89',
  'D',
  'D',
  '\xE4',
  '\x95'
}; // weak
char byte_379410F7 = '\x92'; // weak
__int64 qword_37DCEF40[512] =
{
  -8273826227712083518i64,
  -7462357622050713551i64,
  -5783072470363095772i64,
  -4834269219034806225i64,
  -3874011637657640028i64,
  -2859643664824763254i64,
  -7379836643711761137i64,
  2647200622766302417i64,
  2703600930097851516i64,
  -4857820850007027583i64,
  8019259622758274826i64,
  -8622635424154831545i64,
  -3355271669889479030i64,
  1441152613340393003i64,
  -2000011615646956257i64,
  1707743517536528760i64,
  5709670416654220463i64,
  -8058116792168384690i64,
  7068263504454921898i64,
  -737869347505431490i64,
  -4698155133648788330i64,
  -5570579306072946770i64,
  4405483185742696342i64,
  2208019195808982347i64,
  -2005225430605718651i64,
  -8884122239479228126i64,
  6026629158824469015i64,
  7754422467666784945i64,
  -3689393747535479517i64,
  -6640657068399182260i64,
  -5563254085087257872i64,
  3043932063330629854i64,
  -4846417650895189033i64,
  8444979133112174196i64,
  7223252668783675318i64,
  -782100740797331101i64,
  5727226619132879781i64,
  207456429358609i64,
  1688871335362561i64,
  3377746965757960i64,
  4785143324540942i64,
  5911060411514898i64,
  8162877405331478i64,
  9288811672436766i64,
  10414728759410722i64,
  11540645846384678i64,
  12666562933358634i64,
  13792480020332590i64,
  14918397107306546i64,
  16044314194280502i64,
  17170231281254458i64,
  18296148368228414i64,
  19422065455202370i64,
  25051582169546822i64,
  29555319237836890i64,
  30681236324941930i64,
  31807153411915886i64,
  32933070498889842i64,
  34621946129350776i64,
  -8934997622490595204i64,
  -8358532472081709824i64,
  -7854117219003756800i64,
  216174983636882432i64,
  1801454144767133440i64,
  5260235151547308544i64,
  5548518305062472192i64,
  5836753079327804928i64,
  6124987853593137664i64,
  6557337815934326272i64,
  6845574789256469504i64,
  7133809563521802240i64,
  8502909347884459008i64,
  -8646769445420632320i64,
  -8286470479930160896i64,
  -71891565265515008i64,
  6413126968887214079i64,
  -3473676074151248800i64,
  272480747381491587i64,
  380274668295096066i64,
  -3181987185376372777i64,
  -3472315102087934005i64,
  -2913881894333722680i64,
  -8643551369206965301i64,
  -1162140584007498896i64,
  855086722671888575i64,
  6119346089626160072i64,
  -3510126190356462904i64,
  6634670990704017475i64,
  731880414730653791i64,
  3268610701049663510i64,
  1163932233629768996i64,
  6635526681310797094i64,
  1741539741836716314i64,
  131048884694803i64,
  145246662941278012i64,
  144125655095838732i64,
  73471574665527810i64,
  288231510073672963i64,
  360856434881135617i64,
  360300198113181953i64,
  72346804653392653i64,
  68679948910534913i64,
  3391298781055354951i64,
  7999977202404606080i64,
  -6844868952160130048i64,
  1790463452142125448i64,
  -2716987509799032824i64,
  -8839720515967908065i64,
  -1044834563792458880i64,
  -7310810398607920586i64,
  -7812755174463311729i64,
  -12595930i64,
  -1877214671266643969i64,
  -4887250079154505425i64,
  -33i64,
  -2809114969735827459i64,
  -426190416147382204i64,
  -3544490862947938374i64,
  2879286701338806799i64,
  9003926828801768913i64,
  1296760371113223839i64,
  3073455289836761175i64,
  -5999446194063804324i64,
  -2525609081075402897i64,
  -7592688677380691115i64,
  47879662545320487i64,
  -7303486813620014565i64,
  6096094922410181343i64,
  4438243839645572083i64,
  8242529241428509502i64,
  4842487561629018746i64,
  8606435040733967299i64,
  -1631696772095560018i64,
  -8928709628304155669i64,
  -2361973267904848145i64,
  -3099780588124369657i64,
  4119780630873588143i64,
  -6459363291096123018i64,
  1058522793003693548i64,
  -6108710902041793898i64,
  3336134996499233642i64,
  3147709057871044576i64,
  -9105535233926636089i64,
  -2192670551089884662i64,
  -575097342064061504i64,
  -9186657049686025535i64,
  524788979272280556i64,
  2664673059802220591i64,
  -4345690431398405979i64,
  8896807151570567919i64,
  -1015030661727665372i64,
  5090193547573298251i64,
  8025814628341925066i64,
  3395856365986988287i64,
  4733566402018420862i64,
  5769795105351242368i64,
  681066322821400856i64,
  3188627952332718324i64,
  6647395134577056268i64,
  -2641612314609507942i64,
  -8646863025357394684i64,
  4098533418631519722i64,
  184924663095763492i64,
  4457260711357639305i64,
  5090202861615391268i64,
  5731185025381042728i64,
  127258850348342673i64,
  6339223458168218913i64,
  7489765516153556928i64,
  -6058283479555475365i64,
  -9111960761441148078i64,
  -4047998218458605377i64,
  2505838504195806117i64,
  -4369549041205731055i64,
  1399347762973547563i64,
  8714853961150316966i64,
  110202372233638019i64,
  3094033999448232842i64,
  -5256439430060629302i64,
  -2078687334428581521i64,
  109304596457913491i64,
  -7029097665205345840i64,
  -3963155863662818806i64,
  2055702406199833252i64,
  -8069885906249235320i64,
  -6178226447881565951i64,
  -4273068468822279239i64,
  5612305625329572322i64,
  5027170853679710230i64,
  7050987706648306915i64,
  8105827421156488312i64,
  -296221218414468720i64,
  3939763538867978208i64,
  3476331582736622531i64,
  3787519795198419939i64,
  -317856127566313390i64,
  9153879802923593474i64,
  -7649086377462446940i64,
  2270231441056118801i64,
  -2009110919109246280i64,
  5353907543783375356i64,
  -4226611813022885963i64,
  -8135808864658916116i64,
  5673533376646024944i64,
  2104592148156134005i64,
  -2177728263882491902i64,
  -7221060140499484160i64,
  -8437476822096806444i64,
  6503182155277402283i64,
  -6679755981817315070i64,
  -4158714044879939753i64,
  -5398827982319122464i64,
  616527033932543261i64,
  -7216130890749911264i64,
  4648410564927160615i64,
  -5419916901843738468i64,
  -8269550099751841611i64,
  -3475432096999331091i64,
  2305332991074368621i64,
  1256782571024758550i64,
  -5896228144362229738i64,
  -6233694603404383220i64,
  -2105386458786812793i64,
  -873583118790197224i64,
  4681046272011072563i64,
  -2045387128343350300i64,
  647292497663377273i64,
  8436755099050778048i64,
  6185702160099996773i64,
  4985484795807811195i64,
  2388078441626131613i64,
  7729658284050988583i64,
  433583844770393660i64,
  -6679370546429039765i64,
  790685398385852210i64,
  -9088282132386305825i64,
  -1375063968803391421i64,
  1716089434310858114i64,
  4519873115853239i64,
  -2950984673653016624i64,
  -73318537025023026i64,
  -4040453256496749196i64,
  644338079915310513i64,
  -953008001067482654i64,
  -8769575870022849172i64,
  -103317985066091249i64,
  2288394375306525876i64,
  -544962154409543584i64,
  -1757825270224781070i64,
  -9074234816657291919i64,
  -1956423474974978860i64,
  -1787386734064589388i64,
  -160948785495423319i64,
  6005246002709307264i64,
  2237603892558353548i64,
  -6949713641940126079i64,
  4377980714432108416i64,
  1810290468969556188i64,
  2290086001089147232i64,
  2976896712780710163i64,
  -7862618185888370490i64,
  3405249183051500807i64,
  676992576532580574i64,
  5553445694109114637i64,
  -8074395661591848442i64,
  8532012848310615261i64,
  -6933770527811517834i64,
  887678708010027273i64,
  6596915519873601949i64,
  1074722078971050629i64,
  4684342615094771954i64,
  -4070935054319000001i64,
  -891867442256281352i64,
  4761135233093346765i64,
  1897361582721387536i64,
  5943865074086096848i64,
  5661025427228316790i64,
  4158222956293613984i64,
  1469127014889322624i64,
  7352480677922208391i64,
  4540495070933681679i64,
  -6596543022469862685i64,
  1383164245834466396i64,
  1007236089364691752i64,
  301523082617016188i64,
  -4085727475511355087i64,
  -3236954554736447201i64,
  -6667306578228683484i64,
  -2377073849011576703i64,
  -2532275886291231603i64,
  2054508255543398733i64,
  1721230715573507848i64,
  -518244412285996326i64,
  1874940308902292338i64,
  1873266669275876254i64,
  -8528797777745686095i64,
  7411182654047877367i64,
  -6076403168629195465i64,
  -1716995732780076405i64,
  1258597148633617101i64,
  -4760842507222805345i64,
  3958813531564634033i64,
  2848432090981748689i64,
  1770726932550487640i64,
  3853201766170388167i64,
  -4492781478785124064i64,
  6445919517406502156i64,
  -4554250002812561300i64,
  -9207733079115714377i64,
  -516911971372331980i64,
  891251764734474141i64,
  -3865598344195059602i64,
  9179435923489928475i64,
  8338034717408566819i64,
  2361021456293442233i64,
  7550458683612750351i64,
  -1315930451509243359i64,
  1533600326133842541i64,
  1198804858436219736i64,
  -2089884468781048450i64,
  -8704844385200997254i64,
  6657277633336601625i64,
  -3849161476228102784i64,
  -162136545950954069i64,
  5116230771804915374i64,
  2505477074580237375i64,
  2556485009421452769i64,
  -7105023287547640575i64,
  3840351582258346107i64,
  5441477691887641254i64,
  4921527705864282944i64,
  -7477386934681312892i64,
  3374226130286165894i64,
  -1821271181190895746i64,
  762411229532031586i64,
  -5227884978550872319i64,
  3465215994889506513i64,
  4421345152936845864i64,
  1746294821006195246i64,
  2495774975169295854i64,
  -8151349904034489702i64,
  -7682644535688369194i64,
  -4598141859592041145i64,
  1241273263563689077i64,
  1120375514337662751i64,
  5622446987854799571i64,
  -7243617610050103005i64,
  -7847318951776545722i64,
  -7976579318904825403i64,
  5836398852565755434i64,
  -4283738654780261831i64,
  -5198610666304243133i64,
  6628150869822464316i64,
  8124391939699694603i64,
  -4331304129749787995i64,
  -27301671619552236i64,
  -614288099853324478i64,
  4970865471955839511i64,
  158456067510210531i64,
  7638134950421993569i64,
  -5029719326465165119i64,
  -4134596964863001164i64,
  884102263380008166i64,
  7417010009933809465i64,
  7018392085895840960i64,
  -2964674119749636141i64,
  -2574437214844390052i64,
  -4552652408738516639i64,
  -9045455320835909145i64,
  -1873940424692293624i64,
  -6085724648972127433i64,
  9107955644038111336i64,
  -7957095158152574594i64,
  -1059870609482440994i64,
  5506277757824321987i64,
  2301426351603078124i64,
  8471194035232301518i64,
  -734498342743207956i64,
  1346427178103163175i64,
  -4429060318194758160i64,
  -7458503224394263895i64,
  -2150292522757449720i64,
  88226939885378168i64,
  -4882323585376749523i64,
  2112561144358507750i64,
  2255439425565279970i64,
  -5167752049805150224i64,
  7476113467924449893i64,
  4865743579895678964i64,
  9091877975600841114i64,
  737557585380141482i64,
  5392804581862430055i64,
  8557544781647193088i64,
  -2478566400498773411i64,
  -5223345057813647258i64,
  7258803750506007525i64,
  8996319232902436477i64,
  -4913473429604698240i64,
  9184235093135197055i64,
  -4431740066405641988i64,
  8120989483333428333i64,
  5364223417695468310i64,
  2457683300675882480i64,
  5032359928586638610i64,
  -7993463823555295660i64,
  5692583061111261978i64,
  -6583294280954224839i64,
  -3498940408882308225i64,
  2071428640110169937i64,
  -4916200895898094155i64,
  7161531443643006849i64,
  -529495711008044663i64,
  1957081963916003941i64,
  6405109300917171386i64,
  -1239498485721929344i64,
  6207376083784659233i64,
  -8930831128955310366i64,
  4018675669771776370i64,
  3220529207621562383i64,
  7485763364583160516i64,
  -558007165971733690i64,
  -7723416714109374255i64,
  -8327211263250413218i64,
  -247713302277321500i64,
  2748763099674347899i64,
  8722246834180762340i64,
  1096664167341315377i64,
  -6978050202156176897i64,
  8975032704858889719i64,
  -2765184244761916376i64,
  442010279739964046i64,
  755598432669286088i64,
  5697688510521593208i64,
  4252285731215284530i64,
  821106548546109546i64,
  5137366524660667474i64,
  -752506694631330795i64,
  -8635623560668397476i64,
  -6905841301622736727i64,
  -3693768694669314178i64,
  1063944961994275019i64,
  123345690725829436i64,
  -7351548615243385166i64,
  -1853219206283634509i64,
  4891814309241470578i64,
  3992894040695021940i64,
  3475198630254251558i64,
  8224558545217708945i64,
  826571580228182730i64,
  -7321856803191379759i64,
  3828647314886192118i64,
  -8105967106113524288i64,
  2388418816233742795i64,
  5793755729910550289i64,
  -1656264218801983226i64,
  -1882471718498434853i64,
  -7026607708328968668i64,
  -8732089343553829808i64,
  1151049146827537611i64,
  -696273458789254891i64,
  -4632472427168581340i64,
  3541445051262698630i64,
  -6458389139909453055i64,
  194553004131394328i64,
  6640068413912293192i64,
  1247633455554021316i64,
  3368626489196960584i64,
  2661770850989367934i64,
  -6947171226510663380i64,
  -9161707912160575932i64,
  2665495475812252270i64,
  8797173143830067685i64,
  -5141208110976840280i64,
  -6512893664484181837i64,
  -4795636438119015888i64,
  -392056711158211646i64,
  879469739285550061i64,
  1738978808548819909i64,
  7286934748072804741i64,
  -7975834923877965783i64,
  -7007362874938177343i64,
  5681690353194057269i64,
  -2168784100432978265i64,
  -774122874447989504i64,
  841180330222578396i64,
  1525261900397118792i64,
  8869831797551966396i64,
  5010271672377425967i64,
  2274399453530201660i64,
  6387380566507162129i64,
  -4988846635768122208i64,
  -6145945118022532184i64,
  -7244952044884205568i64,
  -3488118881184320025i64,
  7408614159181541559i64,
  500650191774716791i64,
  -5257614092422901363i64,
  8202127910622924656i64,
  4429387722435451711i64,
  1106826078511100145i64,
  -5332873929668459360i64,
  -2589499879734742465i64,
  -8106860119681093742i64,
  8406093444994942680i64,
  4523670172582921205i64,
  8230223345427964339i64,
  -4879152080370099997i64,
  -5469130779956328221i64,
  -3891055846601622591i64,
  2785532474006240781i64,
  -2191999282014922270i64,
  -8014979103004415188i64
}; // weak
char byte_38C3D96D[2] = { '\x9A', '8' }; // weak
int dword_38C7091C = 201960760; // weak
_UNKNOWN unk_3A15C0CB; // weak
char byte_3A2A5314[10] = { '\x95', '}', 'a', '\x8E', '\x94', '\x92', 'R', '\xA6', '\xBB', '|' }; // weak
int dword_3A7D0D56 = -692207877; // weak
int dword_3AA7BEA9 = 68242316; // weak
char byte_3AFE15CF[2374] =
{
  'z',
  '\xE2',
  'p',
  '\xEA',
  '\xA0',
  '\xC3',
  '\xE9',
  '\xAF',
  '\x90',
  '\xB4',
  '\xF9',
  '\x99',
  '\x16',
  '\xB2',
  '\xAC',
  '5',
  '\xDB',
  'I',
  '\xE0',
  '(',
  'U',
  '#',
  '+',
  'q',
  '\xDE',
  '\x9A',
  '\x8F',
  'p',
  'd',
  '\xD8',
  '\xAC',
  '\xDF',
  '\0',
  '\'',
  'o',
  'f',
  '\xD2',
  '\xC0',
  't',
  '\xFA',
  '\xA9',
  '\x8C',
  'Z',
  '\x1C',
  '#',
  '\xF4',
  '\x13',
  '\xDB',
  'p',
  'l',
  '\xD3',
  '{',
  '\xBC',
  'I',
  '\xE8',
  '\xBF',
  '5',
  '\xBB',
  'Q',
  'D',
  '9',
  '\xFD',
  '\xAD',
  '\xC1',
  'R',
  '\xA9',
  '\x1E',
  '\xB6',
  '\x15',
  '\x83',
  '\xA3',
  '\xD9',
  '\xFC',
  'L',
  '\x17',
  'B',
  '\xF6',
  '1',
  '9',
  '\xBA',
  '\x12',
  '\xD2',
  '\xCF',
  'N',
  '\xA4',
  '\0',
  'G',
  '\xDA',
  '\xEC',
  '\xC7',
  'f',
  '\xB2',
  '\xEC',
  'T',
  '1',
  '\xEB',
  'p',
  'l',
  '3',
  '\xAD',
  'X',
  '\"',
  '.',
  'Q',
  '\x11',
  '\xEB',
  'q',
  '\xBC',
  '\xAF',
  '\x04',
  '\xBB',
  '\xB8',
  '\x94',
  '-',
  '\xFA',
  '\x8F',
  'Z',
  '\x1C',
  'E',
  'r',
  '\x84',
  '8',
  '\x8A',
  'M',
  '\x02',
  'O',
  'H',
  'w',
  '\xDB',
  '\x0E',
  '\x83',
  '\xA3',
  '\xB3',
  '\f',
  'y',
  'B',
  '\xB6',
  '\x99',
  '\xEE',
  'd',
  '\x14',
  '\xB2',
  'T',
  '\x8E',
  ':',
  'r',
  'l',
  '\xB0',
  '\x8B',
  '\xB0',
  '8',
  '\x12',
  '*',
  '\xA5',
  '\x96',
  '\x90',
  '\xCD',
  'v',
  '_',
  '\xEA',
  '\b',
  '\xD9',
  'j',
  '\xBE',
  'a',
  '\xBB',
  '\x0F',
  'i',
  '\xB5',
  'o',
  '\xB2',
  '\x15',
  '\a',
  '\x9A',
  'N',
  ')',
  'N',
  '-',
  '\xF2',
  '\x18',
  'B',
  '*',
  '\xCC',
  '.',
  'D',
  'H',
  '\a',
  '\xF5',
  '%',
  '\xC4',
  '\xE5',
  '\x83',
  'x',
  '\x0E',
  '=',
  '\xEF',
  '\xD7',
  '\xC6',
  '^',
  '-',
  '\x86',
  'b',
  'B',
  '\x96',
  'K',
  '\xAC',
  '%',
  '\xE3',
  '\x13',
  'J',
  '\xB1',
  '\x05',
  '\x87',
  'W',
  '#',
  '\x87',
  '\xE0',
  'h',
  'S',
  ')',
  '\xDF',
  '\xE0',
  'h',
  '\xD0',
  'V',
  'z',
  '\xE0',
  'H',
  '\xAB',
  '+',
  '\xB5',
  '8',
  '\x86',
  '\xCA',
  'k',
  '?',
  '\x1C',
  '^',
  'u',
  '\xD4',
  '\x10',
  '\xD2',
  '\xC7',
  '\xCC',
  '\xA3',
  '\x18',
  '\x87',
  '\xCC',
  '\x10',
  '\x96',
  '\x13',
  '2',
  'B',
  '\xF5',
  '\xB4',
  '\xE1',
  'H',
  '\xAB',
  '\x9E',
  '\r',
  '\x84',
  'l',
  '1',
  '\"',
  '\xC4',
  '\xB1',
  'C',
  'y',
  ':',
  '\xE2',
  '\xC8',
  '\xC8',
  '\xD2',
  '\x86',
  'S',
  '^',
  '1',
  '\xBD',
  '\xC8',
  '\xD0',
  '\xA6',
  'f',
  'v',
  '\xE0',
  'h',
  '6',
  'y',
  '\n',
  'q',
  '>',
  '\xA5',
  '6',
  '\x06',
  '2',
  '\x9D',
  '-',
  '\xEA',
  '\xC5',
  'N',
  '\x1C',
  '\x83',
  'U',
  '\xCF',
  '\xA1',
  '8',
  'Z',
  'M',
  '\x82',
  '\xF3',
  'q',
  '\xEC',
  'T',
  '7',
  '\xB6',
  '\x13',
  '\xD2',
  'A',
  'u',
  '4',
  '\x10',
  '\xF9',
  '\xE2',
  '\xA0',
  '\x8E',
  ':',
  '\x1C',
  '\xC6',
  '\xD6',
  '\xD3',
  '\x9F',
  '\x90',
  'f',
  '\xB5',
  'r',
  '2',
  '!',
  '\xA8',
  '\x99',
  '\xDF',
  '\t',
  '\xFD',
  '\x1E',
  '\xC1',
  '\x1A',
  'm',
  '#',
  '\xA4',
  '\xB7',
  '\f',
  '\x7F',
  '\xE3',
  '(',
  'R',
  '\x8C',
  '\xC3',
  '\xB1',
  '\xD3',
  ':',
  'Z',
  '\x89',
  'X',
  'f',
  '\xDB',
  '\xFB',
  '\x02',
  '2',
  '\xCC',
  'S',
  'G',
  '?',
  '\0',
  '\xC7',
  '_',
  '\xA6',
  '\v',
  'E',
  '\x84',
  '\f',
  '\xB0',
  '\xF5',
  'L',
  '#',
  'C',
  '\x8B',
  ',',
  'u',
  '8',
  '\xF2',
  '\xC6',
  '\xB1',
  '\x11',
  '\xC7',
  'v',
  '\xC5',
  '$',
  'q',
  '\x14',
  '\xCA',
  '\xD0',
  '\r',
  '\xC7',
  '\x0E',
  '%',
  '\x98',
  '\x8B',
  '\xA3',
  '\xBB',
  '\x8A',
  '0',
  '8',
  '\n',
  'm',
  '!',
  '\xFB',
  '\x10',
  'R',
  '\xAF',
  '4',
  '[',
  '(',
  '\xA3',
  'P',
  '\x01',
  'y',
  'r',
  '\xB4',
  '&',
  '\x87',
  '\xD2',
  '\x89',
  '\x88',
  '\x06',
  '\x19',
  'F',
  '\x10',
  'j',
  '\xA7',
  ',',
  '{',
  '\xE0',
  '\xB0',
  '*',
  '\xC1',
  '\xE3',
  'H',
  '\xC9',
  '\xB0',
  '\x89',
  '\x90',
  '\xE3',
  '\xD5',
  '\x86',
  '\xC1',
  'Q',
  'd',
  'Z',
  '\xF8',
  '\x1E',
  '\xD7',
  '\xF6',
  'f',
  'c',
  '\xC8',
  '\xFD',
  '\xBF',
  '\xAB',
  '\xA0',
  '\x7F',
  'B',
  'd',
  '\x89',
  '\xA8',
  '7',
  '1',
  'u',
  'd',
  ')',
  'H',
  '4',
  '\xB0',
  '\x9D',
  'r',
  '6',
  '\x15',
  'x',
  '\xB6',
  'S',
  '\xC6',
  '\xD6',
  ' ',
  '\xA6',
  '\x13',
  '\xE3',
  '\xF0',
  '\xB6',
  '\x1D',
  '\x9B',
  '\x98',
  'N',
  '`',
  '\xA0',
  '=',
  '9',
  '\x14',
  '\f',
  '\xA0',
  '\x84',
  '\xD9',
  't',
  'I',
  '\xD6',
  'R',
  '\xCC',
  '\xAB',
  '\x1A',
  '\x9C',
  '\xDC',
  '\t',
  '\xE4',
  'X',
  'e',
  '-',
  '\xDB',
  'x',
  '\x90',
  '\xAC',
  'm',
  '\xC3',
  'P',
  '\xC6',
  'F',
  '\x9B',
  '!',
  'A',
  'D',
  '\'',
  'k',
  'i',
  '!',
  'd',
  'K',
  '\xA6',
  '\x98',
  'V',
  '\"',
  'j',
  '\x92',
  '\x01',
  '\xF5',
  'D',
  't',
  '\xB1',
  'y',
  'F',
  '\xDB',
  '\xDD',
  '\x1A',
  '\x1E',
  '\x1F',
  '\xD1',
  'S',
  '\xD1',
  '\x88',
  '\xBB',
  'K',
  '\xE6',
  '\xF6',
  '\xAE',
  '\xA5',
  '\xB6',
  'l',
  '\x1B',
  's',
  'z',
  '_',
  '\xCB',
  'm',
  '\xC3',
  '\x8F',
  'e',
  '\xF3',
  '\xA8',
  '\xB3',
  '\xB1',
  '\x1D',
  'v',
  '\xD0',
  '2',
  '\xA2',
  'f',
  '\xC4',
  '\xC4',
  '-',
  'W',
  '\x97',
  'u',
  '_',
  '7',
  'j',
  '\xC4',
  '\xF5',
  '\xCD',
  '\a',
  '\x1D',
  '\x0E',
  '\xF0',
  '.',
  'K',
  'v',
  '\xFB',
  '\xA8',
  '\xC4',
  '\xEF',
  '6',
  '.',
  '\x9C',
  '9',
  '\"',
  '\xCB',
  '9',
  '<',
  '\xD1',
  '\xD2',
  '+',
  '?',
  '\x87',
  '\xB7',
  '\xF4',
  'W',
  '\xDB',
  'Q',
  'y',
  '\xA7',
  '2',
  'M',
  'k',
  '\xBB',
  '+',
  '\xEF',
  't',
  '\xAA',
  '^',
  '\xCC',
  '\x9F',
  '\x93',
  '/',
  'c',
  '\x1F',
  '\xB3',
  '_',
  '\xDB',
  '\x88',
  '|',
  '\x8E',
  '\xF7',
  '\xED',
  '\xF2',
  '\xB6',
  '\xB1',
  '\xF9',
  'I',
  '\xEC',
  '_',
  '\\',
  '\xD1',
  '\xFA',
  'H',
  '>',
  '\xC3',
  '\xE2',
  '\xF6',
  '\xC7',
  '\xB4',
  '\xDE',
  '\x94',
  '\xCF',
  '\xB2',
  '\xB8',
  'c',
  'S',
  '\xEB',
  '\xB9',
  '\xF9',
  '+',
  'i',
  '\xD7',
  '\xBB',
  ' ',
  ']',
  'K',
  '\x1B',
  '!',
  '\x14',
  'N',
  'S',
  '+',
  '\x91',
  'l',
  '\xAA',
  '\x80',
  ':',
  '\xAA',
  '\xC8',
  '\x9B',
  'Z',
  '\xFE',
  '\xE7',
  'A',
  '~',
  '\xD0',
  'v',
  '\x02',
  '&',
  'R',
  '`',
  '\xB7',
  '\xA9',
  '\x8E',
  '\x88',
  '.',
  'i',
  '\x80',
  '\x1C',
  '\xC9',
  ' ',
  'M',
  'G',
  '\x1C',
  'M',
  '\xC1',
  '@',
  '\xDF',
  '\xD3',
  '\xE7',
  '\x18',
  'i',
  '\xEB',
  ')',
  ' ',
  '\"',
  '\xA9',
  'a',
  '\xF3',
  '\xAE',
  '\x10',
  '\xA9',
  'b',
  'M',
  '\x9D',
  'W',
  '\xAB',
  '(',
  'u',
  '\x82',
  '\x19',
  '5',
  'o',
  ' ',
  '9',
  '\"',
  '\xBA',
  '\x11',
  '\x10',
  'Q',
  'h',
  '\x06',
  '\xD2',
  'J',
  '\xA5',
  '\xB6',
  '\a',
  '\x1B',
  '\xD9',
  'M',
  '9',
  '\x16',
  '\x04',
  'c',
  'h',
  '!',
  'G',
  '`',
  '\xFA',
  '\xD1',
  '\x8F',
  '\x88',
  'R',
  '\xED',
  '\xA2',
  '\x03',
  '\x11',
  '\xB1',
  'y',
  '\x80',
  '\xD9',
  'T',
  '\xD2',
  'j',
  '\xDB',
  'c',
  'q',
  '\x1C',
  '\xA6',
  '\xF6',
  '\x14',
  '\x92',
  '\xE5',
  '\x05',
  '\xF3',
  '\x16',
  '\xEF',
  '\xFA',
  '\x90',
  'n',
  '\xC6',
  '\xD1',
  '\x88',
  'c',
  '\x91',
  'M',
  '\xB3',
  '\x93',
  'q',
  '\xAC',
  '\xB7',
  '\x7F',
  '0',
  '\x97',
  '\x88',
  '\xB5',
  '\xEA',
  '\x80',
  '!',
  '\xD2',
  '&',
  '\xB5',
  'c',
  '$',
  '!',
  '\xC6',
  '\xAC',
  '\xA7',
  '\x81',
  '\x1C',
  '\xBD',
  'M',
  '\x03',
  '\x85',
  '8',
  'v',
  '\x19',
  'K',
  '\a',
  '~',
  '\xA7',
  '}',
  'b',
  '\x01',
  ')',
  '\"',
  '\x1A',
  'T',
  '\xCA',
  '\x1C',
  '\x1C',
  '\xBB',
  'l',
  'w',
  '\x06',
  '\x11',
  '\xD2',
  '\xDE',
  'v',
  ' ',
  'M',
  'D',
  'l',
  'R',
  '\xB4',
  '\x90',
  'a',
  '\x87',
  'j',
  '\xA8',
  '\xC7',
  '\xE1',
  '\xEC',
  '\x0E',
  '\x8E',
  '&',
  'K',
  ':',
  '\x98',
  '\xC7',
  'N',
  '\"',
  'F',
  '\xD8',
  '\xB9',
  'l',
  '\"',
  '\xE2',
  ',',
  'S',
  'O',
  '\x8A',
  '\x90',
  '\xEE',
  '\x81',
  '\xFC',
  '^',
  '\xBE',
  '\x13',
  '\xA5',
  '\xE4',
  '|',
  '\xD6',
  '\xD6',
  '\xD1',
  '\x95',
  '\x90',
  '\x9E',
  'f',
  '$',
  '\xB5',
  '8',
  '\x96',
  '\xA9',
  '=',
  '\x9D',
  'q',
  '\xF4',
  '5',
  '\xBF',
  '\x93',
  '\xA1',
  '\x8C',
  '\xF6',
  'Z',
  '\xCC',
  '<',
  '\x9C',
  '\xCF',
  '\xD8',
  'r',
  '\x9A',
  '(',
  '\xD3',
  '\x83',
  '&',
  '\xE9',
  '\x1B',
  'p',
  'X',
  '\xF5',
  '\xF6',
  '\x05',
  '\x84',
  '\xF4',
  '\xD1',
  '\x0E',
  '\xB6',
  '\x10',
  '\x92',
  'L',
  '|',
  '\xCD',
  '\x7F',
  '\xE4',
  '(',
  '5',
  '\xFF',
  '\xF8',
  '\xFE',
  '\x84',
  '4',
  '\xCB',
  '\xF2',
  ';',
  '_',
  '\xD2',
  'O',
  'G',
  '\xD0',
  '\v',
  '\xC7',
  '\'',
  '\xFA',
  '\x91',
  'M',
  '8',
  '\n',
  '\xF5',
  '0',
  'K',
  'p',
  '>',
  'm',
  '\xDE',
  '&',
  '$',
  'd',
  '\xAD',
  '=',
  '\x84',
  '\xB5',
  '\xE4',
  'h',
  'L',
  'v',
  'd',
  '-',
  '\x8E',
  'N',
  '\xA6',
  '\x80',
  '6',
  'B',
  '\x06',
  '\x9B',
  'u',
  '\xB4',
  '\xE2',
  'p',
  '\xEA',
  'J',
  '\x1D',
  '\x8E',
  '-',
  'I',
  '\xC7',
  '\x1E',
  '*',
  '\xA3',
  '8',
  '=',
  '\x94',
  'F',
  '\xCA',
  'Y',
  '\x1A',
  '\x14',
  '\xAB',
  '\x85',
  '\x88',
  '\x0E',
  '\xC1',
  '\x1E',
  '\xBE',
  '\x88',
  '\x90',
  '.',
  '\xAA',
  '\xA7',
  '\f',
  '\xA7',
  '\x12',
  '\xF3',
  ';',
  '\x10',
  '2',
  '\xD4',
  '\x1E',
  '\xCB',
  '@',
  '\x85',
  '\f',
  'V',
  '7',
  'Z',
  'q',
  '\xB4',
  '\x99',
  '\x80',
  '.',
  '*',
  '\xA3',
  '\xD9',
  '\xF4',
  'e',
  '\v',
  'Y',
  '6',
  '\x9B',
  '\xFF',
  '\xD8',
  '\x85',
  '\xC3',
  '\xE9',
  '\x7F',
  '<',
  '!',
  '\x85',
  'f',
  '%',
  '\xDB',
  '\xBD',
  '\x03',
  '\xD3',
  '\x85',
  '4',
  '\x8E',
  '\x1D',
  '\x8A',
  '\x18',
  '\xE8',
  '\x1D',
  '\xBF',
  'J',
  '\xFC',
  '\x87',
  'c',
  'o',
  'e',
  '\xE8',
  '@',
  '\x98',
  '\xEF',
  '\x96',
  '_',
  '\xE9',
  'W',
  '\xFA',
  '\xFF',
  '\xED',
  '\x85',
  '\xF1',
  '\xE7',
  'y',
  '\xE7',
  '/',
  '\xD2',
  '!',
  '\\',
  '\xD8',
  '\x16',
  '\xC6',
  '\xCF',
  '\xB5',
  'v',
  '\xE3',
  '\xB0',
  '\xB6',
  '\x9A',
  '\xF8',
  '\x1B',
  '\xEE',
  '\xF7',
  '\xDF',
  '\xE4',
  ']',
  '\xFE',
  '\xD0',
  '\xA0',
  '\xC5',
  '\xFF',
  '\xD0',
  'V',
  '\x15',
  '\xAF',
  'L',
  '\xDF',
  '\xE7',
  '?',
  'o',
  '\x9B',
  '\x9D',
  '\b',
  '\xF6',
  '\xA3',
  '\x88',
  '\xE9',
  'l',
  '1',
  '\x19',
  '\xFA',
  'P',
  '\xC9',
  '\xC0',
  '\xC2',
  '9',
  '\xD4',
  'P',
  '\xC5',
  '\x1F',
  '\x85',
  '\xFF',
  '\xA8',
  '\x85',
  'q',
  'l',
  '+',
  '\xE8',
  'D',
  '\r',
  '\x03',
  '\xB8',
  ';',
  'Q',
  '\xE8',
  '\x03',
  '\xC6',
  '1',
  '\"',
  'h',
  '\xA2',
  '\x95',
  '\x89',
  '\xC8',
  'n',
  '\xA3',
  '\x9E',
  '\x89',
  '\xAC',
  'N',
  'd',
  'I',
  'Q',
  '\x85',
  '\x82',
  '\x1E',
  '\xB4',
  '\'',
  '\xC7',
  ' ',
  '+',
  'v',
  '\x92',
  'k',
  '\xBD',
  '~',
  '\xFF',
  'O',
  '\x18',
  '\xDD',
  'C',
  '\x9C',
  '\xD1',
  '\xB4',
  '\x85',
  '\x13',
  '\x89',
  '\xD4',
  'G',
  '7',
  '2',
  'F',
  '\x8E',
  '\xF7',
  '\x83',
  '\x13',
  '9',
  '@',
  '\x8E',
  '&',
  '\xF3',
  '\x1E',
  '\xDF',
  '\x10',
  'r',
  '\xAA',
  'N',
  '\xE6',
  '\t',
  'B',
  'v',
  '\x0F',
  ':',
  '\xD0',
  '\xEA',
  's',
  '\xF4',
  '\xB2',
  '\xAB',
  'X',
  'A',
  'H',
  'k',
  '\xE2',
  '\x1F',
  '\xFE',
  '\xC2',
  '\xF9',
  '1',
  '\xF2',
  '<',
  'D',
  '\x19',
  'M',
  '\x1A',
  '\xCE',
  'v',
  '\x1C',
  '6',
  'Q',
  '\xAE',
  '\x8E',
  '\x84',
  '4',
  '\xDA',
  '\x1E',
  'X',
  '\x7F',
  '\x19',
  '\x8F',
  '\x99',
  '\xD3',
  '\xD8',
  'G',
  '\x8E',
  '\x11',
  'j',
  'O',
  '\x9A',
  '\x90',
  'O',
  '\x83',
  '\x01',
  'l',
  '\xF4',
  '\xE5',
  't',
  'L',
  '\xFC',
  '\x8B',
  '\xA8',
  '\xE2',
  '\xD8',
  '\xC4',
  '\xD8',
  '\xB8',
  '\x94',
  '\x90',
  'c',
  '\xEC',
  '\xEE',
  '\xEC',
  'G',
  '\x05',
  '\x17',
  '$',
  'S',
  '\xBE',
  '\x93',
  '/',
  '\xF3',
  '\xA1',
  '\xFD',
  '\x0E',
  'O',
  '\xC4',
  '\xCF',
  'v',
  '(',
  '\xFB',
  '\x10',
  '1',
  '8',
  '\x18',
  'M',
  '=',
  'e',
  '\xE4',
  '\xED',
  '6',
  'N',
  '\x96',
  '\xC3',
  '\x9A',
  '{',
  '\x19',
  '*',
  '\xE7',
  '\x8F',
  'T',
  '/',
  'z',
  '\xE3',
  'X',
  '\x95',
  'L',
  '\xF0',
  '\x05',
  '!',
  '}',
  '\xCC',
  'N',
  '\xEE',
  '\xF7',
  '\x8E',
  'K',
  'm',
  '\xAD',
  '\xFA',
  '\x93',
  '\xE1',
  'R',
  '\xD3',
  'N',
  '\xF7',
  '\x13',
  '\xB2',
  '#',
  '\b',
  'h',
  '\xF4',
  'a',
  '~',
  '\xFD',
  '\xAF',
  '!',
  '3',
  '\x9F',
  '\xD5',
  '1',
  '\x03',
  '\xCD',
  'k',
  'T',
  '\x91',
  '\xD5',
  'l',
  '{',
  '\x8F',
  '\xCF',
  '\xFA',
  '\xD0',
  '\x1F',
  'f',
  'N',
  '\xF2',
  'U',
  'D',
  '~',
  '/',
  '{',
  '4',
  '\x9D',
  '\x14',
  'r',
  '\x9E',
  '\x1D',
  '\xA5',
  'n',
  'T',
  '\x99',
  '\xDE',
  'f',
  '\f',
  '_',
  '*',
  '\xCB',
  '\xB1',
  '\xF6',
  '\x05',
  'j',
  '\x89',
  '\xA8',
  '\xB1',
  '\x11',
  '\xBF',
  '\x13',
  ')',
  '\x17',
  '\xDC',
  '\xCE',
  '\x81',
  '\xFA',
  '\x92',
  '\x84',
  '\xB9',
  ']',
  '7',
  '\x93',
  '\xA1',
  '\xD8',
  '\xF4',
  'c',
  '\xA7',
  'r',
  '\xDA',
  '?',
  '\xF8',
  '\x9E',
  '\xAF',
  '\xA8',
  '\x92',
  '+',
  '\xD8',
  '\xCE',
  '\x9D',
  '\xCA',
  'q',
  ']',
  'b',
  'V',
  '\xFC',
  '\x04',
  '\x93',
  ')',
  'J',
  'w',
  '\xA6',
  '^',
  '\x19',
  'v',
  '\x98',
  '[',
  '\xF8',
  '\x83',
  '\x17',
  '\x98',
  'i',
  '\xC7',
  '1',
  '\x98',
  '\x90',
  '\xEB',
  '\xED',
  '2',
  '^',
  '\xF4',
  '\x11',
  ';',
  '\xED',
  '\xEF',
  'Z',
  'F',
  '\xC4',
  'i',
  '\xE9',
  '/',
  '\xF8',
  '\x9F',
  '\x88',
  '2',
  '\xDB',
  '\x87',
  '#',
  '\xA8',
  '\xA0',
  'C',
  '\xF0',
  '\x0F',
  '%',
  '\x8A',
  '|',
  '\x17',
  '\xF3',
  '\x85',
  '\xEA',
  '}',
  '\xC8',
  'j',
  '\xAB',
  '/',
  '\xDA',
  '\xB5',
  ']',
  'k',
  '~',
  '\xA2',
  '\xF3',
  '\xD1',
  '\xFF',
  '*',
  '\xE4',
  'V',
  '\xF3',
  '\x99',
  '\xED',
  ')',
  '\xC7',
  'C',
  '\xA6',
  '\xDA',
  '\x9C',
  '\x89',
  '\xD3',
  'h',
  '\x93',
  '2',
  '\x8F',
  '\xE2',
  't',
  '\xBA',
  'y',
  '\x80',
  '[',
  '\b',
  '\xB5',
  '\xA7',
  ']',
  '\xE3',
  '\x87',
  '\x12',
  '\xF2',
  '\x99',
  '\x96',
  '\xFA',
  'u',
  '\xDE',
  '\xF9',
  '\x9C',
  '\xD6',
  '\xF3',
  '\xA4',
  '\xCF',
  '\xFA',
  '\xCE',
  '\xE6',
  'S',
  'B',
  '9',
  '\xBF',
  '\xD0',
  'v',
  'b',
  '\x8A',
  'B',
  '\xC6',
  '\xD8',
  '{',
  '\xFD',
  '2',
  'S',
  '\xA5',
  '\xA9',
  '\xC1',
  '\f',
  '\xFE',
  '\xC2',
  'q',
  '\x91',
  '\xFE',
  '\xF6',
  '\xDB',
  '\xE3',
  '\xF9',
  '\f',
  '2',
  '\x87',
  '\xF9',
  '\x88',
  '*',
  '\xBF',
  '!',
  '\xF5',
  '\0',
  '\r',
  '\x94',
  'q',
  '\x85',
  '\xE9',
  '\xCF',
  ':',
  '\x1C',
  '\xAB',
  '\xD5',
  'Q',
  '\xEB',
  'q',
  '\\',
  '-',
  '\xC9',
  '\xE0',
  'x',
  '@',
  '\xEB',
  'L',
  'g',
  '\x1C',
  '\xFB',
  '\x98',
  '\xBB',
  '\xCD',
  ')',
  'D',
  'Z',
  'n',
  '\xDF',
  'b',
  'w',
  '\xAA',
  'h',
  '\xB6',
  '\x8D',
  '\xD4',
  '*',
  'd',
  '\x94',
  '\x1D',
  '\x9D',
  '\x9F',
  'G',
  '\xE8',
  '\xF7',
  'K',
  '\xDE',
  '\xE3',
  '\xFF',
  '\xA5',
  '\x92',
  '\xED',
  '\xE9',
  '\x9F',
  '\xFD',
  '\"',
  '\xFF',
  '*',
  '\xC7',
  '\'',
  '\x0F',
  '`',
  '\x8A',
  '\xAF',
  'd',
  'r',
  'p',
  'Y',
  '\xFE',
  'm',
  'E',
  '\xDC',
  '\x96',
  '\xD0',
  '\xA6',
  '=',
  '\xDB',
  '\xFE',
  '\xEA',
  '\xFD',
  '\t',
  '\xC7',
  ',',
  'z',
  'D',
  '\x8E',
  '{',
  '\x14',
  '\xEA',
  '9',
  '\x85',
  '4',
  '\x99',
  '\x17',
  'e',
  '|',
  '\xA8',
  '\xD7',
  '\xB4',
  '\\',
  '_',
  '\xF8',
  'P',
  '\xF7',
  '\xEA',
  'Z',
  '.',
  '\x93',
  'c',
  '\xA3',
  'V',
  '\xF1',
  '\x06',
  '\x19',
  '\xC6',
  '\x98',
  'J',
  '\xF6',
  '\xC3',
  '\xB1',
  '\xC9',
  '\x9A',
  '\xF8',
  'P',
  '\x9C',
  '\x9E',
  '\xD0',
  '\xAD',
  '\xDC',
  '\xEC',
  '\x1D',
  'w',
  '\x9B',
  '\xD2',
  '\xF8',
  'o',
  '\x9C',
  '\x9E',
  '5',
  'w',
  's',
  '\xBB',
  '\x0F',
  '\xF9',
  '\xC6',
  '\xFC',
  '\xCC',
  '\x9E',
  '8',
  '\xF2',
  '\xBA',
  '\x90',
  '\xB5',
  '\x84',
  '\xB4',
  '\xD9',
  '\xBD',
  '\xF5',
  '\x1B',
  '\xCE',
  '?',
  '\xAE',
  '\xEB',
  'u',
  '\x81',
  '\x9C',
  '?',
  '\xDD',
  '\xDC',
  'l',
  '\xFA',
  '\xE1',
  '\xFC',
  '\x8F',
  '\xBA',
  '\x98',
  '\xF7',
  '\x15',
  '\xB2',
  '\xC0',
  't',
  'd',
  '\xA4',
  '\xBF',
  '\x8C',
  'm',
  '\xE6',
  '@',
  '\xEF',
  '\xBC',
  '\xA3',
  '\xC2',
  '\\',
  '\xC3',
  '\xEE',
  '8',
  '\xF6',
  '0',
  '\x1F',
  '\xF1',
  '\x89',
  '\x0F',
  '\xB9',
  '\'',
  '\x18',
  'D',
  '\r',
  '\x11',
  '\xDB',
  '\x93',
  'e',
  'l',
  '&',
  '\xE4',
  ',',
  '\x13',
  '\xA8',
  '\xCD',
  'D',
  '\xEC',
  'o',
  'n',
  '\xA5',
  '\x81',
  '\x90',
  '\x87',
  '\xCD',
  '@',
  '\x1D',
  '\xE2',
  '\xC7',
  '\xB3',
  '\x7F',
  '\xF0',
  '1',
  '\xBB',
  '\x14',
  '\x12',
  '\x98',
  '1',
  '\xFC',
  '\x81',
  '\xE3',
  '7',
  '\xF3',
  '\xA9',
  '~',
  'd',
  '\x81',
  '\xFF',
  '.',
  '0',
  '@',
  'H',
  '\xB1',
  'm',
  '\xE6',
  '\x14',
  'r',
  '\x1A',
  'n',
  'w',
  '\xD2',
  '\xEC',
  '\xB3',
  ',',
  '\xB3',
  '\x1F',
  's',
  '\x04',
  '\x11',
  '\xF3',
  '\xEC',
  '~',
  '\x1C',
  'K',
  '\xE4',
  'W',
  '\xEA',
  'v',
  '\xBA',
  '\xE1',
  '\xFC',
  'o',
  '\xE6',
  '-',
  ',',
  '!',
  '\xBF',
  '\xD8',
  '\x81',
  '\xFE',
  '0',
  '\x1C',
  'y',
  '\xB3',
  '\xDD',
  '\xEF',
  '\xA9',
  'P',
  'u',
  'f',
  '\x11',
  '\'',
  '\xFA',
  '\x8C',
  '&',
  '(',
  '\xE1',
  '\v',
  '|',
  '\xC8',
  '\\',
  'm',
  'a',
  '5',
  '\x95',
  '\xEC',
  'c',
  '\x94',
  ',',
  '\xCD',
  'o',
  '\xF7',
  '\x9B',
  '\x14',
  '\xFA',
  '\xA3',
  '\xD4',
  '\x91',
  '\xCE',
  '\x84',
  '\xFE',
  ' ',
  '\xF3',
  '\xB4',
  '\xF6',
  '&',
  'd',
  '\x9D',
  'Y',
  '\xCE',
  'M',
  '8',
  '\xDE',
  'R',
  '\x8E',
  '\xDB',
  '\b',
  'u',
  '\xBD',
  '\x1D',
  '\xE7',
  '?',
  '\xC4',
  '\xB1',
  '\xCC',
  '\xD6',
  '\xFB',
  '\x0E',
  '\x84',
  't',
  '\xD4',
  'j',
  '\x7F',
  '\x1D',
  '\x0E',
  'o',
  '\x9E',
  '\xD5',
  '\xE5',
  '\x84',
  'l',
  '\xD6',
  '\x11',
  '\xAA',
  '\x90',
  '\xF3',
  '\a',
  '\xE9',
  '\x10',
  '\x1F',
  'z',
  'g',
  '\x12',
  'Z',
  '\xE7',
  '\x0F',
  '\x88',
  '\xB3',
  'z',
  '\xD7',
  '|',
  '\xA2',
  '?',
  '\x15',
  '\xF9',
  '\x9C',
  'z',
  '\xD2',
  '\x80',
  '\xF3',
  '\xB3',
  'u',
  '\n',
  '\x9B',
  '\xE4',
  '\xFC',
  'O',
  '\xF2',
  'Z',
  '+',
  '\xE7',
  'O',
  '\xD5',
  'Q',
  '\xEC',
  '\"',
  'd',
  '\x8E',
  '\x16',
  '\x92',
  '\xE6',
  '2',
  '\xEE',
  'P',
  '\x1B',
  '%',
  '8',
  'n',
  '\xD7',
  '\f',
  'n',
  '\"',
  '\xA3',
  'C',
  '\xCD',
  '\x81',
  'q',
  'H',
  '\xC8',
  '4',
  '\xB3',
  '\'',
  's',
  '\x18',
  '\xA7',
  'V',
  '\x9B',
  '\xE2',
  '\x0F',
  'U',
  '*',
  '\x99',
  '\xFC',
  '\x8F',
  '{',
  '\xE4',
  '(',
  '\xD3',
  '\xAB',
  '\xDA',
  '\xA5',
  '\x90',
  'w',
  '\xCD',
  '*',
  '\x1E',
  '!',
  '\"',
  'i',
  '\xE6',
  '\xEA',
  'v',
  '\xCA',
  'Y',
  '\x10',
  '\xC4',
  '\xFC',
  'K',
  '\xC8',
  'p',
  '\xF5',
  'V',
  '\x1D',
  'e',
  '\f',
  '4',
  '\x17',
  '\xB1',
  '7',
  '\x0F',
  '\x92',
  '\xD4',
  '\x1A',
  '\x06',
  '\xF9',
  '\xAC',
  '/',
  '\f',
  '\x06',
  '\xA8',
  '\xDE',
  ';',
  'z',
  '\x9A',
  '\x80',
  '\xAE',
  'd',
  '\xA9',
  'O',
  'l',
  '\xF0',
  '\x7F',
  '\x93',
  'E',
  'f',
  '%',
  'e',
  '\x84',
  '\x04',
  'v',
  '\x11',
  '\xE3',
  '|',
  '\xC8',
  '\xE3',
  '\xE6',
  '\'',
  'n',
  '&',
  'T',
  'Z',
  '\xFD',
  '\xFC',
  '\xD1',
  '\xDE',
  '\xF1',
  '\xB8',
  '\x8E',
  '\xF6',
  '\xFD',
  'p',
  '\xDC',
  '\xAA',
  '\v',
  'i',
  '!',
  '\xE4',
  '\x1F',
  '[',
  '\xA2',
  '\x81',
  '\xDE',
  '\xC5',
  '\x93',
  'W',
  'D',
  '\xAA',
  '*',
  '|',
  '\xDB',
  '\xFF',
  '_',
  's',
  '\x10',
  '+',
  '\x8B',
  '\xB6',
  '\xE5',
  '\x9F',
  '\xAD',
  '\xD9',
  '\xE4',
  '\xAF',
  '*',
  '\xF9',
  '\xA7',
  '\xB6',
  '\xFB',
  '\x8E',
  '\x15',
  '~',
  'g',
  '\xE6',
  '\xD4',
  '\xCD',
  '\xED',
  '\xB6',
  'O',
  '\xD2',
  'U',
  '\xED',
  '\x8F',
  ']',
  '\xF3',
  '\xCB',
  '\x8E',
  'S',
  '\x18',
  'U',
  '\xDA',
  'c',
  '\xC5',
  'm',
  ';',
  '7',
  '\x9A',
  '5',
  '\x05',
  '\xE7',
  '\xFC',
  '\xFF',
  '|',
  '\xED',
  'b',
  '\xBB',
  '\xB7',
  '>',
  '\x9B',
  'W',
  'R',
  '{',
  '\xAE',
  ':',
  '\xD4',
  '\x9F',
  '7',
  'c',
  'Z',
  '\xED',
  '\xFB',
  '\xDA',
  '\xA3',
  '\xE6',
  '\xF9',
  'i',
  'O',
  '\xD4',
  '^',
  '\xCF',
  '\x9E',
  '\x8D',
  '\x7F',
  '\xFE',
  '\xDC',
  '\xBC',
  '\xAB',
  '\xD9',
  '<',
  '\x19',
  '\xFF',
  '\xFA',
  '\xF7',
  'e',
  ';',
  '\x8F',
  '\xB7',
  '{',
  '\xE8',
  '\x89',
  '\xFF',
  '\xA6',
  '\xD6',
  ',',
  '\xB6',
  '\xF3',
  '\xFC',
  '\xD6',
  '\x15',
  '\xDB',
  '\xB7',
  '\xB7',
  '\xD3',
  '\t',
  '\xF9',
  '\xC1',
  '\xAD',
  's',
  '\xB7',
  '\x95',
  'i',
  '\xB2',
  '\xBD',
  '\xAC',
  'x',
  '\xF9',
  '\x8E',
  '\x1B',
  '\xCD',
  '\xD3',
  '\xC9',
  'k',
  '\xBB',
  '\xBC',
  'S',
  '3',
  'L',
  '\xC3',
  '\xB9',
  '\xF7',
  '\xC0',
  '|',
  '\xCD',
  '\xAB',
  '\xE6',
  'B',
  '\x1D',
  'u',
  '\xC4',
  '\xEC',
  '\x9D',
  '\x9D',
  'j',
  'V',
  '\xEE',
  '\x14',
  '8',
  '}',
  'o',
  '\x9C',
  '\x7F'
}; // weak
char byte_3B2098A2[3] = { '\xE6', '8', 'Z' }; // weak
__int16 *__ptr32 off_3B55F5A7 = &word_3949028E; // weak
int dword_3BE5D687 = -1803786443; // weak
char byte_3C6D590E = 'Z'; // weak
int dword_3CE5B0A4 = 1997669768; // weak
int dword_3D88A3C2 = 1754881670; // weak
_UNKNOWN unk_3E8E5DBD; // weak


//----- (00000000000106F8) ----------------------------------------------------
void __noreturn sub_106F8()
{
  __halt();
}
// 106F8: using guessed type void __fastcall __noreturn sub_106F8();

//----- (000000000009EE3E) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __noreturn sub_9EE3E()
{
  __halt();
}
// 9EE3F: positive sp value 8 has been found
// 9EE3E: using guessed type void __fastcall __noreturn sub_9EE3E();

//----- (00000000000B0004) ----------------------------------------------------
#error "B000C: cannot convert to microcode (funcsize=4)"

//----- (00000000000CDBE5) ----------------------------------------------------
void __fastcall sub_CDBE5()
{
  char v0; // cf
  int v1; // eax
  _DWORD *v2; // rdi

  *v2 += v1 + v0;
  __asm { iret }
}
// CDBE7: control flows out of bounds to CDBE8
// CDBE5: variable 'v1' is possibly undefined
// CDBE5: variable 'v0' is possibly undefined
// CDBE5: variable 'v2' is possibly undefined

//----- (00000000000EA04E) ----------------------------------------------------
__int64 __fastcall sub_EA04E()
{
  int v0; // eax

  return (unsigned int)(v0 - 2140183698);
}
// EA04F: variable 'v0' is possibly undefined
// EA04E: using guessed type __int64 __fastcall sub_EA04E();

//----- (0000000000173990) ----------------------------------------------------
__int64 sub_173990()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000000210020) ----------------------------------------------------
_DWORD *__fastcall sub_210020()
{
  _DWORD *result; // rax

  *result ^= 0x9C76469C;
  return result;
}
// 210020: variable 'result' is possibly undefined

//----- (000000000025AEAD) ----------------------------------------------------
__int64 sub_25AEAD()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000000326394) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_326394(int a1, unsigned __int16 a2)
{
  bool v5; // cf
  __int64 v6; // rcx
  unsigned __int64 v8; // [rsp-8h] [rbp-8h] BYREF

  _RBX = 2939233364i64;
  __writeeflags(v8);
  __asm { xlat }
  v6 = a1 - ((unsigned int)v5 + *(_DWORD *)(_RSI + 60));
  v8 = _RSI;
  v5 = *(int *)((char *)&dword_6001B94 + (_QWORD)(&v8 + v6)) != 0;
  *(int *)((char *)&dword_6001B94 + (_QWORD)(&v8 + v6)) = -*(int *)((char *)&dword_6001B94 + (_QWORD)(&v8 + v6));
  __asm { outsb }
  LOBYTE(_EAX) = __inbyte(a2);
  LOBYTE(_EAX) = _EAX - (v5 - 45);
  return (unsigned int)&off_31FDCA06 | _EAX;
}
// 32639E: positive sp value 51DA has been found
// 32639F: variable 'v5' is possibly undefined
// 32639F: variable '_RSI' is possibly undefined
// 3263B3: variable '_EAX' is possibly undefined
// 6001B94: using guessed type int dword_6001B94;
// 31FDCA06: using guessed type void *__ptr32 off_31FDCA06;

//----- (00000000003B5C19) ----------------------------------------------------
void __fastcall sub_3B5C19(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al

  __outbyte(a2, v2);
  __outbyte(0x8Du, v2);
  __asm { iretd }
}
// 3B5C2A: control flows out of bounds to 3B5C2C
// 3B5C1A: variable 'v2' is possibly undefined

//----- (0000000000501150) ----------------------------------------------------
void __noreturn sub_501150()
{
  __halt();
}
// 501150: using guessed type void __fastcall __noreturn sub_501150();

//----- (00000000006D5F35) ----------------------------------------------------
void sub_6D5F35()
{
  ;
}

//----- (0000000000744B62) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
char __fastcall sub_744B62(__int64 a1, __int64 a2)
{
  char result; // al

  __asm { xlat }
  *(_BYTE *)(a2 - 1099116610) = -*(_BYTE *)(a2 - 1099116610);
  return result;
}
// 744B6A: positive sp value 8 has been found

//----- (0000000000880020) ----------------------------------------------------
void sub_880020()
{
  __asm { retf }
}
// 880021: unbalanced stack, ignored a potential tail call

//----- (00000000008B5CC1) ----------------------------------------------------
void sub_8B5CC1()
{
  __asm { iret }
}
// 8B5CC2: control flows out of bounds to 8B5CC3

//----- (00000000008B6A80) ----------------------------------------------------
__int64 __fastcall sub_8B6A80(__int64 a1, unsigned __int16 a2)
{
  int v2; // eax
  __int64 v3; // rsi

  BYTE1(v2) = 7;
  MEMORY[0x9FB7ADBE743BA797] = v2;
  __inbyte(a2);
  return (*(__int64 (**)(void))(v3 + 923892181))();
}
// 8B6A89: variable 'v2' is possibly undefined
// 8B6A93: variable 'v3' is possibly undefined

//----- (000000000099DD1B) ----------------------------------------------------
__int64 __fastcall sub_99DD1B()
{
  __int64 result; // rax
  _DWORD *v1; // rdi
  unsigned __int64 v2; // [rsp+0h] [rbp-8h]

  *v1 = result;
  __writeeflags(v2);
  return result;
}
// 99DD1B: could not find valid save-restore pair for rbp
// 99DD1F: variable 'result' is possibly undefined
// 99DD1F: variable 'v1' is possibly undefined
// 99DD24: variable 'v2' is possibly undefined
// 99DD1B: using guessed type __int64 __fastcall sub_99DD1B();

//----- (00000000009DCB47) ----------------------------------------------------
__int64 __fastcall sub_9DCB47(__int64 a1, __int64 a2)
{
  char v2; // cf
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_BYTE *)(a2 + 96) -= v2 + BYTE1(a2);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 9DCB47: variable 'v2' is possibly undefined

//----- (0000000000A0767A) ----------------------------------------------------
void __fastcall __noreturn sub_A0767A()
{
  char v0; // cf
  __int16 v1; // ax
  __int64 v2; // rbp
  __int64 v3; // rdi

  *(_BYTE *)(v3 - 95) -= v0 + HIBYTE(v1);
  *(_BYTE *)(9 * v2 - 102) = v1;
  __halt();
}
// A0767A: variable 'v3' is possibly undefined
// A0767A: variable 'v0' is possibly undefined
// A0767A: variable 'v1' is possibly undefined
// A0767D: variable 'v2' is possibly undefined
// A0767A: using guessed type void __fastcall __noreturn sub_A0767A();

//----- (0000000000BDC54C) ----------------------------------------------------
void sub_BDC54C()
{
  ;
}

//----- (0000000000CA7635) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 sub_CA7635()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}
// CA7639: positive sp value 8 has been found

//----- (0000000000D80009) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_D80009()
{
  __asm { iretd }
}
// D80020: positive sp value 10 has been found
// D80020: control flows out of bounds to D80022

//----- (0000000000EBDE00) ----------------------------------------------------
void __noreturn sub_EBDE00()
{
  __halt();
}
// EBDE00: using guessed type void __fastcall __noreturn sub_EBDE00();

//----- (0000000000FF000C) ----------------------------------------------------
void __noreturn sub_FF000C()
{
  __halt();
}
// FF000C: using guessed type void __fastcall __noreturn sub_FF000C();

//----- (000000000115290C) ----------------------------------------------------
char __fastcall sub_115290C()
{
  __int64 v0; // rsi
  char v1; // al

  v1 = MEMORY[0xD845DA0E9E3D02CB];
  --*(_BYTE *)(v0 - 676455517);
  return v1 ^ 0xE5;
}
// 1152915: variable 'v0' is possibly undefined

//----- (0000000001174D79) ----------------------------------------------------
void __fastcall sub_1174D79(__int64 a1, int a2)
{
  _enable();
  MEMORY[0xBE026C07BCF5F8FE] = (unsigned int)&unk_53B6F58 | a2;
}

//----- (0000000001476A1D) ----------------------------------------------------
void sub_1476A1D()
{
  __asm { iret }
}
// 1476A1E: control flows out of bounds to 1476A1F

//----- (000000000152872F) ----------------------------------------------------
__int64 __fastcall sub_152872F(int a1, _DWORD *a2)
{
  char v2; // cf
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])(*a2 + (unsigned int)v2 + a1);
}
// 152872F: variable 'v2' is possibly undefined

//----- (0000000001580057) ----------------------------------------------------
void __fastcall sub_1580057(__int64 a1, __int64 a2)
{
  __int64 v2; // rax

  *(_BYTE *)(v2 + a2) += v2;
  __asm { iret }
}
// 158005B: control flows out of bounds to 158005C
// 1580058: variable 'v2' is possibly undefined

//----- (00000000016E0226) ----------------------------------------------------
void __fastcall __noreturn sub_16E0226(int a1, int a2)
{
  char v2; // cf
  int v3; // eax
  __int64 v4; // rbp
  char v5; // cf
  unsigned int v6; // ett

  v5 = __CFADD__(v2, v3) | __CFADD__(v2 + v3, 1448348237);
  while ( 1 )
  {
    __debugbreak();
    v6 = v5 + a2;
    v5 = *(_DWORD *)(v4 + 1649829384) < v6;
    *(_DWORD *)(v4 + 1649829384) -= v6;
    v4 = (unsigned int)(a1 + 1265440327);
  }
}
// 16E0227: variable 'v2' is possibly undefined
// 16E0227: variable 'v3' is possibly undefined
// 16E022D: variable 'v4' is possibly undefined

//----- (0000000001982BF0) ----------------------------------------------------
void __noreturn sub_1982BF0()
{
  __halt();
}
// 1982BF0: using guessed type void __fastcall __noreturn sub_1982BF0();

//----- (0000000001ACA93A) ----------------------------------------------------
void sub_1ACA93A()
{
  __asm { retfq }
}
// 1ACA942: control flows out of bounds to 1ACA944

//----- (0000000001AD71EA) ----------------------------------------------------
__int64 __fastcall sub_1AD71EA(_BYTE *a1, _BYTE *a2, _BYTE *a3)
{
  _DWORD *v3; // rax
  _WORD *v4; // rsi
  _BYTE *v5; // r10
  __int64 result; // rax

  *v4 = __ES__;
  *a2 += (_BYTE)v3;
  *v5 = (_BYTE)a3;
  *a3 += (_BYTE)a3;
  *v3 += (_DWORD)v3;
  LOBYTE(v3) = *(_BYTE *)v3 + (_BYTE)v3;
  result = (unsigned int)(*v3 + (_DWORD)v3);
  *a1 += result;
  return result;
}
// 1AD71EE: variable 'v4' is possibly undefined
// 1AD71F0: variable 'v3' is possibly undefined
// 1AD71F2: variable 'v5' is possibly undefined

//----- (0000000001B675A2) ----------------------------------------------------
void __fastcall sub_1B675A2()
{
  unsigned int v0; // eax
  __int64 v1; // rbp
  __int64 v2; // [rsp-38h] [rbp-40h]

  v2 = v1;
  __outdword(0x87u, v0);
  __asm { retf }
}
// 1B675B9: unbalanced stack, ignored a potential tail call
// 1B675A9: variable 'v1' is possibly undefined
// 1B675B4: variable 'v0' is possibly undefined

//----- (0000000001BDE153) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_1BDE153(__int64 _RCX, char a2)
{
  __int32 v2; // eax
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  _enable();
  LOBYTE(_RBX) = a2 ^ (unsigned __int8)_RBX;
  _AL = _InterlockedExchange(_RBX, v2);
  if ( !_RCX )
    return ((__int64 (*)(void))nullsub_2358)();
  __asm
  {
    xlat
    rcl     bl, cl
  }
  return MK_FP(retaddr[0], retaddr[0])();
}
// 1BDE158: positive sp value 2E8C has been found
// 1BDE159: variable '_RBX' is possibly undefined
// 1BDE15B: variable 'v2' is possibly undefined
// 1BDE127: using guessed type __int64 __fastcall __far nullsub_2358();

//----- (0000000001C1D864) ----------------------------------------------------
void __fastcall sub_1C1D864(int a1)
{
  __int64 v1; // rbx
  __int64 v2; // rbp

  *(_DWORD *)(v1 + 2 * v2) ^= a1;
  __asm { fnstenv byte ptr [rdi+21h] }
}
// 1C1D86B: variable 'v1' is possibly undefined
// 1C1D86B: variable 'v2' is possibly undefined

//----- (0000000001C9CA18) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_1C9CA18()
{
  __asm { iret }
}
// 1C9CA1E: positive sp value 3654 has been found
// 1C9CA1E: control flows out of bounds to 1C9CA1F

//----- (0000000001D18912) ----------------------------------------------------
void __fastcall sub_1D18912()
{
  int v0; // eax
  _DWORD *v1; // rdi

  *v1 = v0;
}
// 1D18914: variable 'v0' is possibly undefined
// 1D18914: variable 'v1' is possibly undefined

//----- (0000000001D2632E) ----------------------------------------------------
void __fastcall __noreturn sub_1D2632E()
{
  __int64 v0; // rdi

  *(_BYTE *)(v0 - 79) ^= 0xC0u;
  __halt();
}
// 1D26332: variable 'v0' is possibly undefined
// 1D2632E: using guessed type void __fastcall __noreturn sub_1D2632E();
// 1CC9B550: using guessed type __int64 qword_1CC9B550[507];

//----- (0000000001DE6B69) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_1DE6B69()
{
  __asm { iretd }
}
// 1DE6B6C: positive sp value 8 has been found
// 1DE6B6C: control flows out of bounds to 1DE6B6E

//----- (0000000001F4443B) ----------------------------------------------------
void __fastcall sub_1F4443B(__int64 a1, __int64 a2, __int64 a3)
{
  unsigned int v4; // esi
  __int32 v5; // esp
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __asm { rcr     dword ptr [rax-754FFF8Dh], 1 }
  _InterlockedExchange((volatile __int32 *)(_RAX + 80), v5);
  _disable();
  LOBYTE(a3) = 112;
  byte_28DCAF61[v4 + a1] += a2;
  MK_FP(retaddr[0], retaddr[0])(a1, a2, a3);
}
// 1F44448: variable '_RAX' is possibly undefined
// 1F44448: variable 'v5' is possibly undefined
// 1F4444C: variable 'v4' is possibly undefined

//----- (0000000001F8B26F) ----------------------------------------------------
__int64 sub_1F8B26F()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000001FB6A8D) ----------------------------------------------------
void __noreturn sub_1FB6A8D()
{
  __halt();
}
// 1FB6A8D: using guessed type void __fastcall __noreturn sub_1FB6A8D();

//----- (0000000001FBD6D9) ----------------------------------------------------
void sub_1FBD6D9()
{
  ;
}

//----- (000000000204E952) ----------------------------------------------------
__int64 sub_204E952()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (00000000020762C5) ----------------------------------------------------
// write access to const memory has been detected, the output may be wrong!
void __fastcall sub_20762C5(__int64 a1, __int16 a2)
{
  char v2; // cf
  char v3; // al
  unsigned __int32 v5; // eax
  char v6; // [rsp+0h] [rbp-8h]

  MEMORY[0xA19778950EF92408] = v3;
  __asm { rcr     dword ptr [rdi+7], 1 }
  MEMORY[0xA9F3193FF4C5E8E9] = v6;
  v5 = __indword(0x58u);
  BYTE5(qword_8ED3DE8[187]) = -67 - ((v5 < 0xBFF07A9B) + ((unsigned __int16)(a2 + v2 + a2) >> 8));
  __readeflags();
  __asm { iret }
}
// 20762F8: control flows out of bounds to 20762F9
// 20762F5: write access to const memory at 8ED43C5 has been detected
// 20762C6: variable 'v3' is possibly undefined
// 20762D8: variable 'v6' is possibly undefined
// 20762D6: variable 'v2' is possibly undefined
// 8ED3DE8: using guessed type __int64 qword_8ED3DE8[397];

//----- (000000000211A3EC) ----------------------------------------------------
__int64 __fastcall sub_211A3EC()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __asm { xlat }
  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (00000000021A1ACE) ----------------------------------------------------
void __fastcall __noreturn sub_21A1ACE(_DWORD *a1)
{
  unsigned int v1; // eax
  int v2; // ebp
  _BYTE *v3; // rdi
  _BYTE *v4; // rdi
  unsigned __int64 v5; // rdi
  _BYTE *v6; // rdi
  unsigned int v7; // et0

  *v3 = v1;
  v4 = v3 + 1;
  *v4 = v1;
  v5 = (unsigned __int64)(v4 + 1);
  while ( 1 )
  {
    *(_BYTE *)v5 = v1;
    v6 = (_BYTE *)(v5 + 1);
    *v6++ = v1;
    *v6++ = v1;
    *v6++ = v1;
    *v6 = v1;
    v5 = (unsigned __int64)(v6 + 1);
    *(_BYTE *)v5 = v1;
    LODWORD(v5) = v5 + 1;
    do
    {
      v7 = v1;
      v1 = v5;
      v5 = v7;
    }
    while ( (v2 & *a1) <= 0 );
  }
}
// 21A1ACE: variable 'v1' is possibly undefined
// 21A1ACE: variable 'v3' is possibly undefined
// 21A1AD6: variable 'v2' is possibly undefined

//----- (000000000220A5D7) ----------------------------------------------------
void sub_220A5D7()
{
  ;
}

//----- (000000000222DC9B) ----------------------------------------------------
void __fastcall __noreturn sub_222DC9B(__int64 a1, _BYTE *a2)
{
  a2[1784550594] = ~a2[1784550594];
  ++*a2;
  __halt();
}

//----- (00000000022496FB) ----------------------------------------------------
void __fastcall sub_22496FB(__int64 a1)
{
  char v1; // cf
  char v2; // ah

  _disable();
  *(_BYTE *)(a1 - 806294847) -= v1 + v2;
  __asm { iret }
}
// 224970D: control flows out of bounds to 224970E
// 22496FC: variable 'v1' is possibly undefined
// 22496FC: variable 'v2' is possibly undefined

//----- (00000000022A132E) ----------------------------------------------------
__int64 __fastcall sub_22A132E(__int64 a1, __int64 a2)
{
  char v2; // cf
  char v3; // ah
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  BYTE1(a2) += v3 + v2;
  return MK_FP(retaddr[0], retaddr[0])(a1, a2);
}
// 22A1333: variable 'v3' is possibly undefined
// 22A1333: variable 'v2' is possibly undefined

//----- (0000000002364AD3) ----------------------------------------------------
void __noreturn sub_2364AD3()
{
  __halt();
}
// 2364AD3: using guessed type void __fastcall __noreturn sub_2364AD3();

//----- (000000000268F641) ----------------------------------------------------
int __fastcall sub_268F641()
{
  int result; // eax

  BYTE1(result) = 82;
  return (__int16)result;
}
// 268F646: variable 'result' is possibly undefined

//----- (00000000026E60E9) ----------------------------------------------------
void __noreturn sub_26E60E9()
{
  __halt();
}
// 26E60E9: using guessed type void __fastcall __noreturn sub_26E60E9();

//----- (000000000272B12F) ----------------------------------------------------
void __fastcall sub_272B12F()
{
  __int64 v5; // rax
  char v7; // fl

  BYTE1(v5) = v7;
  __asm
  {
    outsb
    outsb
  }
  *_RSI -= 76;
  __asm { retn }
}
// 272B140: unbalanced stack, ignored a potential tail call
// 272B135: variable '_RSI' is possibly undefined
// 272B140: variable 'v5' is possibly undefined

//----- (00000000027CA0CC) ----------------------------------------------------
void sub_27CA0CC()
{
  ;
}

//----- (0000000002A806A1) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_2A806A1()
{
  char v0; // cf
  __int64 v1; // rax
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_BYTE *)(v1 + 1166207022) -= v0 + v1;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 2A806A8: positive sp value 8 has been found
// 2A806A1: variable 'v1' is possibly undefined
// 2A806A1: variable 'v0' is possibly undefined

//----- (0000000002C3BA29) ----------------------------------------------------
void __fastcall sub_2C3BA29(volatile __int32 *a1)
{
  __int32 v2; // esp

  _InterlockedExchange(a1, v2);
  __asm { retf }
}
// 2C3BA36: unbalanced stack, ignored a potential tail call
// 2C3BA2A: variable 'v2' is possibly undefined

//----- (0000000002CD11CE) ----------------------------------------------------
__int64 __fastcall sub_2CD11CE()
{
  __int64 result; // rax
  _DWORD *v1; // rdi

  __asm { int     79h }
  *v1 = result;
  return result;
}
// 2CD11D0: variable 'result' is possibly undefined
// 2CD11D0: variable 'v1' is possibly undefined
// 2CD11CE: using guessed type __int64 __fastcall sub_2CD11CE();

//----- (0000000002D28F6E) ----------------------------------------------------
void __fastcall sub_2D28F6E(__int64 a1, __int64 a2)
{
  *(_DWORD *)(a2 + 1087525152) |= a2;
}

//----- (0000000002DF01F8) ----------------------------------------------------
void sub_2DF01F8()
{
  _disable();
  __asm { retnq }
}
// 2DF01FC: control flows out of bounds to 2DF01FE

//----- (0000000002EB5F62) ----------------------------------------------------
__int64 __fastcall sub_2EB5F62(_DWORD *a1)
{
  char v1; // cf
  __int64 v2; // rax
  __int64 v3; // rbp
  int v4; // esi
  __int64 result; // rax
  void *retaddr; // [rsp+0h] [rbp+0h]

  *a1 -= v1 + v4;
  result = ((unsigned __int64)(373534833i64 * *((int *)&retaddr + 2 * v2)) >> 32 != 0) + (unsigned int)v2 + 370681936;
  *(_BYTE *)(v3 - 502392207) = __ROR1__(*(_BYTE *)(v3 - 502392207), 1);
  return result;
}
// 2EB5F62: variable 'v1' is possibly undefined
// 2EB5F62: variable 'v4' is possibly undefined
// 2EB5F64: variable 'v2' is possibly undefined
// 2EB5F75: variable 'v3' is possibly undefined

//----- (0000000003085430) ----------------------------------------------------
void __noreturn sub_3085430()
{
  __halt();
}
// 3085430: using guessed type void __fastcall __noreturn sub_3085430();

//----- (000000000313A2CD) ----------------------------------------------------
void __fastcall sub_313A2CD(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  __asm { retnq   7A2Bh }
}
// 313A2CE: control flows out of bounds to 313A2D2
// 313A2CD: too many input arguments, some ignored

//----- (00000000031AF830) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 sub_31AF830()
{
  unsigned __int64 v1; // [rsp-8h] [rbp-8h]
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __writeeflags(v1);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 31AF836: positive sp value 8 has been found
// 31AF835: variable 'v1' is possibly undefined

//----- (00000000032085C8) ----------------------------------------------------
void __noreturn sub_32085C8()
{
  __halt();
}
// 32085C8: using guessed type void __fastcall __noreturn sub_32085C8();

//----- (00000000034202F0) ----------------------------------------------------
void __fastcall sub_34202F0(__int64 a1, __int16 a2)
{
  __int64 v2; // rbx

  __debugbreak();
  HIBYTE(a2) = -53;
  _InterlockedExchange((volatile __int32 *)(v2 + 33), a2);
  __asm { iret }
}
// 34202F9: control flows out of bounds to 34202FA
// 34202F6: variable 'v2' is possibly undefined

//----- (000000000343D818) ----------------------------------------------------
char __fastcall sub_343D818(__int64 a1, unsigned int a2)
{
  unsigned int v2; // eax
  __int64 v4; // rbp
  char v5; // cf
  __int64 v6; // rt2
  __int64 v7; // rax

  __asm { rcr     dword ptr [rbx+49230FBh], 1 }
  v6 = __SPAIR64__(a2, v2) % *(int *)(_RBX + 92);
  v7 = (unsigned int)(__SPAIR64__(a2, v2) / *(int *)(_RBX + 92));
  *(_DWORD *)(unsigned int)v7 += v6 + v5;
  LOBYTE(v7) = BYTE1(v7) + v7;
  *(_DWORD *)(v4 + 2 * v7 - 391438533) |= 0xBu;
  return v7;
}
// 343D81E: variable 'v2' is possibly undefined
// 343D81E: variable '_RBX' is possibly undefined
// 343D821: variable 'v5' is possibly undefined
// 343D826: variable 'v4' is possibly undefined

//----- (00000000034C1703) ----------------------------------------------------
void __noreturn sub_34C1703()
{
  __halt();
}
// 34C1703: using guessed type void __fastcall __noreturn sub_34C1703();

//----- (0000000003635AE0) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_3635AE0()
{
  _DWORD *v0; // rdi
  unsigned __int32 v1; // eax

  v1 = __indword(0x67u);
  *v0 = v1;
  __halt();
}
// 3635AE7: positive sp value 8 has been found
// 3635AE5: variable 'v0' is possibly undefined
// 3635AE0: using guessed type void __fastcall __noreturn sub_3635AE0();

//----- (00000000036DE835) ----------------------------------------------------
__int64 sub_36DE835()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (00000000037C1619) ----------------------------------------------------
void __fastcall sub_37C1619(char a1, __int64 a2)
{
  *(_DWORD *)(a2 - 1201899804) = __ROL4__(*(_DWORD *)(a2 - 1201899804), a1);
  _enable();
}

//----- (0000000003839FEC) ----------------------------------------------------
void sub_3839FEC()
{
  __asm { retf }
}
// 3839FF3: unbalanced stack, ignored a potential tail call

//----- (0000000003873FA0) ----------------------------------------------------
void __fastcall sub_3873FA0()
{
  __asm { retn }
}
// 3873FA1: unbalanced stack, ignored a potential tail call

//----- (0000000003A1C673) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_3A1C673(__int64 a1, __int64 _RDX)
{
  __int64 (__fastcall **v2)(__int64, __int64); // rdi
  _BYTE *v3; // rsi

  BYTE1(a1) ^= *v3;
  *(_DWORD *)(v3 - 1024763417) |= 0x78A767D5u;
  __asm { insb }
  return (*v2)(a1, _RDX);
}
// 3A1C680: positive sp value 8 has been found
// 3A1C673: variable 'v3' is possibly undefined
// 3A1C681: variable 'v2' is possibly undefined

//----- (0000000003A3CFFC) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_3A3CFFC()
{
  __asm
  {
    outsd
    retf
  }
}
// 3A3D001: positive sp value 8 has been found

//----- (0000000003A5408A) ----------------------------------------------------
void __fastcall __noreturn sub_3A5408A()
{
  _DWORD *v0; // rbx
  int v1; // esi

  *v0 = v1;
  __halt();
}
// 3A5408A: variable 'v1' is possibly undefined
// 3A5408A: variable 'v0' is possibly undefined
// 3A5408A: using guessed type void __fastcall __noreturn sub_3A5408A();

//----- (0000000003A7CA9E) ----------------------------------------------------
void __fastcall sub_3A7CA9E()
{
  __int64 v0; // rsi

  *(int *)(v0 + 258668187) >>= 1;
}
// 3A7CAA3: variable 'v0' is possibly undefined

//----- (0000000003C9EB22) ----------------------------------------------------
void __fastcall sub_3C9EB22()
{
  char v0; // al

  MEMORY[0xA3A233AEE824C390] = v0;
  __asm { retf }
}
// 3C9EB36: unbalanced stack, ignored a potential tail call
// 3C9EB23: variable 'v0' is possibly undefined

//----- (00000000040148E2) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_40148E2(__int64 _RCX)
{
  char v1; // sf
  char v2; // of
  _DWORD *v3; // rbx
  __int64 v4; // rdi
  int v6; // [rsp-10h] [rbp-10h]

  if ( v1 != v2 )
  {
    __asm { rcl     byte ptr [rcx-1B6E3BD8h], cl }
    *(_BYTE *)(v4 - 55) += (_BYTE)v3;
    *v3 = v6;
    __halt();
  }
  return ((__int64 (*)(void))nullsub_830)();
}
// 40148F3: positive sp value 10 has been found
// 40148E2: variable 'v1' is possibly undefined
// 40148E2: variable 'v2' is possibly undefined
// 40148ED: variable 'v3' is possibly undefined
// 40148ED: variable 'v4' is possibly undefined
// 40148F6: variable 'v6' is possibly undefined
// 40148B8: using guessed type __int64 __fastcall __far nullsub_830();

//----- (0000000004150014) ----------------------------------------------------
void __noreturn sub_4150014()
{
  __halt();
}
// 4150014: using guessed type void __fastcall __noreturn sub_4150014();

//----- (000000000422CB33) ----------------------------------------------------
__int64 __fastcall sub_422CB33()
{
  int v0; // eax
  __int64 v1; // rbp
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_DWORD *)(v1 + 1967877744) += v0;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 422CB33: variable 'v0' is possibly undefined
// 422CB33: variable 'v1' is possibly undefined

//----- (000000000440E488) ----------------------------------------------------
__int64 __fastcall sub_440E488(char _CL)
{
  __int64 result; // rax

  __asm { rcl     ah, cl }
  return result;
}

//----- (00000000044B3E9A) ----------------------------------------------------
__int64 __fastcall sub_44B3E9A(__int64 a1, _BYTE *a2)
{
  int v2; // eax
  char v3; // ch
  __int64 result; // rax

  LOBYTE(v2) = v2 ^ 0x16;
  result = v2 & 0x78894390;
  *a2 -= v3;
  return result;
}
// 44B3E9A: variable 'v2' is possibly undefined

//----- (00000000044C5D91) ----------------------------------------------------
char __fastcall sub_44C5D91()
{
  char v0; // al

  return v0 - 1;
}
// 44C5D9B: variable 'v0' is possibly undefined

//----- (000000000454F412) ----------------------------------------------------
void sub_454F412()
{
  __asm { retfq }
}
// 454F418: control flows out of bounds to 454F41A

//----- (0000000004558829) ----------------------------------------------------
void sub_4558829()
{
  ;
}

//----- (0000000004561340) ----------------------------------------------------
#error "4561380: cannot convert to microcode (funcsize=23)"

//----- (0000000004562396) ----------------------------------------------------
void sub_4562396()
{
  __debugbreak();
  __asm { retfq }
}
// 456239C: control flows out of bounds to 456239E

//----- (00000000047D7765) ----------------------------------------------------
void __fastcall sub_47D7765(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  char v67; // sp

  *(_BYTE *)(a3 + 100913383) = v67;
  __asm { retnq   320Dh }
}
// 47D7771: control flows out of bounds to 47D7775
// 47D7765: variable 'v67' is possibly undefined
// 47D7765: too many input arguments, some ignored

//----- (0000000004846B21) ----------------------------------------------------
void __noreturn sub_4846B21()
{
  __halt();
}
// 4846B21: using guessed type void __fastcall __noreturn sub_4846B21();

//----- (00000000049EE083) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_49EE083()
{
  unsigned int v0; // eax
  __int64 v1; // r13
  char v2; // sp
  char v3; // tt

  v3 = (v0 < 0x1400E32C) + v2;
  *(_BYTE *)(v1 + 63) -= v3;
  __halt();
}
// 49EE08B: positive sp value 8 has been found
// 49EE083: variable 'v0' is possibly undefined
// 49EE08B: variable 'v2' is possibly undefined
// 49EE08B: variable 'v1' is possibly undefined
// 49EE083: using guessed type void __fastcall __noreturn sub_49EE083();

//----- (0000000004BED3B7) ----------------------------------------------------
__int64 __fastcall sub_4BED3B7(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al
  __int64 v3; // rdi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  HIBYTE(a2) &= byte_2FEA2391[v3];
  __outbyte(a2, v2);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 4BED3B7: variable 'v3' is possibly undefined
// 4BED3BD: variable 'v2' is possibly undefined

//----- (0000000004DAAE66) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __noreturn sub_4DAAE66()
{
  __halt();
}
// 4DAAE6F: positive sp value 8 has been found
// 4DAAE66: using guessed type void __fastcall __noreturn sub_4DAAE66();

//----- (0000000004F41BCD) ----------------------------------------------------
void __fastcall sub_4F41BCD(__int64 a1)
{
  char v1; // cf
  int v2; // eax
  __int64 v3; // rbx
  __int64 v4; // rax
  int v5; // esp

  v4 = v2 - ((unsigned int)v1 + *(_DWORD *)(v3 - 1055177960));
  *(_DWORD *)(a1 + v4) += v5;
  __asm { iret }
}
// 4F41BDC: control flows out of bounds to 4F41BDD
// 4F41BCD: variable 'v2' is possibly undefined
// 4F41BCD: variable 'v1' is possibly undefined
// 4F41BCD: variable 'v3' is possibly undefined
// 4F41BD9: variable 'v5' is possibly undefined

//----- (0000000004F4FCF2) ----------------------------------------------------
void sub_4F4FCF2()
{
  __asm { iret }
}
// 4F4FCF3: control flows out of bounds to 4F4FCF4

//----- (000000000521FBCA) ----------------------------------------------------
__int64 __fastcall sub_521FBCA(__int64 a1, __int64 a2)
{
  return MK_FP(*(_WORD *)(a2 - 2050635599 + 4), *(unsigned int *)(a2 - 2050635599))();
}

//----- (000000000522F3F9) ----------------------------------------------------
__int64 sub_522F3F9()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000000524305C) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 sub_524305C()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}
// 524305D: positive sp value 8 has been found

//----- (000000000525F136) ----------------------------------------------------
void sub_525F136()
{
  __asm { iret }
}
// 525F144: control flows out of bounds to 525F145

//----- (00000000052E7809) ----------------------------------------------------
__int64 __fastcall sub_52E7809(unsigned int *a1)
{
  __int64 v1; // rax
  int v2; // ebx
  _DWORD *v3; // rsi

  LODWORD(v1) = *v3;
  *(_DWORD *)(v1 + 51974212) -= v2;
  return MK_FP(*((_WORD *)a1 + 2), *a1)();
}
// 52E7809: variable 'v3' is possibly undefined
// 52E780A: variable 'v1' is possibly undefined
// 52E780A: variable 'v2' is possibly undefined

//----- (00000000053E17EB) ----------------------------------------------------
void __fastcall __noreturn sub_53E17EB()
{
  int v0; // eax
  _DWORD *v1; // rdi

  while ( 1 )
    v0 ^= *v1;
}
// 53E17F2: variable 'v1' is possibly undefined
// 53E17F2: variable 'v0' is possibly undefined
// 53E17EB: using guessed type void __fastcall __noreturn sub_53E17EB();

//----- (00000000053F0505) ----------------------------------------------------
void __noreturn sub_53F0505()
{
  __halt();
}
// 53F0505: using guessed type void __fastcall __noreturn sub_53F0505();

//----- (0000000005508FF3) ----------------------------------------------------
void __noreturn sub_5508FF3()
{
  __halt();
}
// 5508FF3: using guessed type void __fastcall __noreturn sub_5508FF3();

//----- (0000000005767E62) ----------------------------------------------------
void __fastcall __noreturn sub_5767E62()
{
  char v0; // dh
  __int64 v1; // rbx

  *(_BYTE *)(v1 - 32) += v0;
  __halt();
}
// 5767E63: variable 'v0' is possibly undefined
// 5767E63: variable 'v1' is possibly undefined
// 5767E62: using guessed type void __fastcall __noreturn sub_5767E62();

//----- (00000000057C46BB) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_57C46BB(__int64 a1, __int64 a2, __int64 a3, _DWORD *a4)
{
  unsigned int v4; // eax
  unsigned __int64 v5; // rax

  v5 = *a4 & v4;
  LOBYTE(v5) = v5 - *(_BYTE *)(a1 - 1028735205);
  *(_DWORD *)v5 = (__PAIR64__(*(_DWORD *)v5, v5) - __PAIR64__((_DWORD)&unk_1D018C8F, 587312559)) >> 32;
  __asm { iret }
}
// 57C46D0: positive sp value 8 has been found
// 57C46D0: control flows out of bounds to 57C46D1
// 57C46BB: variable 'v4' is possibly undefined

//----- (000000000586DF45) ----------------------------------------------------
void __fastcall sub_586DF45()
{
  char v0; // zf

  if ( !v0 )
    __halt();
  __asm { iretw }
}
// 586DF98: control flows out of bounds to 586DF9A
// 586DF46: variable 'v0' is possibly undefined

//----- (000000000590901B) ----------------------------------------------------
__int64 sub_590901B()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000000595A590) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_595A590()
{
  unsigned int v0; // ebx

  return v0;
}
// 595A591: positive sp value 8 has been found
// 595A590: could not find valid save-restore pair for rsi
// 595A591: variable 'v0' is possibly undefined
// 595A590: using guessed type __int64 __fastcall sub_595A590();

//----- (00000000059C1FD4) ----------------------------------------------------
__int64 sub_59C1FD4()
{
  void *retaddr[2]; // [rsp+8h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000005AE9F64) ----------------------------------------------------
void sub_5AE9F64()
{
  __asm { iret }
}
// 5AE9F6B: control flows out of bounds to 5AE9F6C

//----- (0000000005B6BFBD) ----------------------------------------------------
void __fastcall sub_5B6BFBD(__int64 a1, unsigned __int16 _DX)
{
  char v2; // cf
  unsigned int v3; // eax
  __int64 v4; // rsi

  __outbyte(_DX, v3);
  BYTE1(v3) -= v2 + *(_BYTE *)(v4 - 642198576);
  __asm { insd }
  __outdword(0x9Bu, v3);
  __outbyte(0x5Du, v3);
  __asm { iret }
}
// 5B6BFE7: control flows out of bounds to 5B6BFE8
// 5B6BFBF: variable 'v3' is possibly undefined
// 5B6BFC0: variable 'v2' is possibly undefined
// 5B6BFC0: variable 'v4' is possibly undefined

//----- (0000000005BE0DD4) ----------------------------------------------------
void __fastcall sub_5BE0DD4()
{
  __asm
  {
    xlat
    iret
  }
}
// 5BE0DD5: control flows out of bounds to 5BE0DD6

//----- (0000000005E089FB) ----------------------------------------------------
void __fastcall sub_5E089FB(__int64 a1, unsigned __int16 a2)
{
  __int64 v2; // rax
  char v3; // bl
  _BYTE *v4; // rdi
  _BYTE *v5; // rsi

  *(_BYTE *)(v2 - 1015285921) -= v3;
  __outbyte(a2, v2);
  *v4 = *v5;
  __asm { iret }
}
// 5E08A03: control flows out of bounds to 5E08A04
// 5E089FB: variable 'v2' is possibly undefined
// 5E089FB: variable 'v3' is possibly undefined
// 5E08A02: variable 'v5' is possibly undefined
// 5E08A02: variable 'v4' is possibly undefined

//----- (0000000005E37A75) ----------------------------------------------------
__int64 __fastcall sub_5E37A75()
{
  __int16 v0; // ax

  return (*(__int64 (**)(void))((char *)&unk_4D + ((unsigned __int64)v0 >> 32)))();
}
// 5E37A7B: variable 'v0' is possibly undefined
// 5E37A75: using guessed type __int64 __fastcall sub_5E37A75();

//----- (0000000005F8FCFE) ----------------------------------------------------
void __noreturn sub_5F8FCFE()
{
  __halt();
}
// 5F8FCFE: using guessed type void __fastcall __noreturn sub_5F8FCFE();

//----- (0000000005FCE9FD) ----------------------------------------------------
void __fastcall sub_5FCE9FD(__int64 a1)
{
  __int64 v1; // rbx
  double v2; // st7

  *(float *)(a1 - 822759076) = v2 / *(float *)(v1 - 2093499666);
}
// 5FCE9FE: variable 'v2' is possibly undefined
// 5FCE9FE: variable 'v1' is possibly undefined

//----- (0000000006037848) ----------------------------------------------------
void __noreturn sub_6037848()
{
  __halt();
}
// 6037848: using guessed type void __fastcall __noreturn sub_6037848();

//----- (000000000608A7B6) ----------------------------------------------------
__int64 __fastcall sub_608A7B6(__int64 a1)
{
  unsigned int v1; // eax
  char v2; // dh
  unsigned __int64 v3; // rbx

  LOBYTE(v1) = v1 + 10;
  v3 = v1;
  BYTE1(v3) = v2;
  LOBYTE(a1) = 2 * a1;
  return ((__int64 (__fastcall *)(__int64))v3)(a1);
}
// 608A7B6: variable 'v1' is possibly undefined
// 608A7C7: variable 'v2' is possibly undefined

//----- (00000000060AC037) ----------------------------------------------------
void __noreturn sub_60AC037()
{
  __halt();
}
// 60AC037: using guessed type void __fastcall __noreturn sub_60AC037();

//----- (00000000061ADDBA) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_61ADDBA()
{
  char v0; // cf
  __int64 v1; // rax
  int v2; // [rsp-10h] [rbp-10h]

  *(_DWORD *)(v1 - 419625993) -= v0 + v2;
  __halt();
}
// 61ADDCE: positive sp value 10 has been found
// 61ADDBB: variable 'v1' is possibly undefined
// 61ADDBB: variable 'v0' is possibly undefined
// 61ADDBB: variable 'v2' is possibly undefined
// 61ADDBA: using guessed type void __fastcall __noreturn sub_61ADDBA();

//----- (0000000006205338) ----------------------------------------------------
void sub_6205338()
{
  __indword(0xADu);
}

//----- (00000000062892D5) ----------------------------------------------------
__int64 __fastcall sub_62892D5(unsigned int a1, unsigned __int16 a2)
{
  __int64 v2; // rdi
  __int64 result; // rax

  result = a1;
  *(_BYTE *)(v2 + 4) = a1;
  __outbyte(a2, a1);
  return result;
}
// 62892D5: variable 'v2' is possibly undefined

//----- (0000000006354804) ----------------------------------------------------
void sub_6354804()
{
  __asm { retfq }
}
// 6354805: control flows out of bounds to 6354807

//----- (00000000064242F5) ----------------------------------------------------
void __fastcall sub_64242F5()
{
  __asm { jmp     fword ptr [rbp+1217403Ah] }
}
// 64242F6: unbalanced stack, ignored a potential tail call

//----- (00000000064A44BA) ----------------------------------------------------
void __fastcall __noreturn sub_64A44BA(__int64 a1, __int16 _DX)
{
  int v2; // eax
  __int64 v3; // rbp
  int v4; // edi

  _enable();
  MEMORY[0x553041A6CC7B8CA] = v2 ^ 0xC41B9E2A;
  __asm { insb }
  *(_DWORD *)(v3 - 122) += v4;
  __halt();
}
// 64A44C1: variable 'v2' is possibly undefined
// 64A44CB: variable 'v4' is possibly undefined
// 64A44CB: variable 'v3' is possibly undefined

//----- (00000000065A4ADA) ----------------------------------------------------
void __fastcall sub_65A4ADA()
{
  unsigned int v0; // edi

  __outdword(0x7Bu, v0);
  __asm { iret }
}
// 65A4ADE: control flows out of bounds to 65A4ADF
// 65A4ADC: variable 'v0' is possibly undefined

//----- (00000000066FC5F1) ----------------------------------------------------
void __noreturn sub_66FC5F1()
{
  __halt();
}
// 66FC5F1: using guessed type void __fastcall __noreturn sub_66FC5F1();

//----- (00000000067328D0) ----------------------------------------------------
void __fastcall sub_67328D0(__int64 _RCX)
{
  _BYTE *v1; // rbx
  _BYTE *v2; // rdi
  __int64 v3; // rsi
  unsigned __int64 v4; // kr00_8

  *v1 <<= _RCX;
  *v2 = *(_BYTE *)(v3 + 1);
  v4 = __readeflags();
  __asm
  {
    rcl     byte ptr [rcx], 31h
    retf
  }
}
// 67328D9: unbalanced stack, ignored a potential tail call
// 67328D1: variable 'v1' is possibly undefined
// 67328D0: variable 'v3' is possibly undefined
// 67328D4: variable 'v2' is possibly undefined

//----- (000000000677C530) ----------------------------------------------------
__int64 __fastcall sub_677C530(__int64 a1, __int64 a2)
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  LOBYTE(a2) = 22;
  return MK_FP(retaddr[0], retaddr[0])(a1, a2);
}

//----- (00000000067C0000) ----------------------------------------------------
void __fastcall sub_67C0000()
{
  __int64 v0; // rbp
  _BYTE *v1; // rdi
  _BYTE *v2; // rsi

  *v1 = *v2;
  *(int *)((char *)&dword_6FFB7D6 + v0) ^= 0xAA150BE4;
  __asm { retnq }
}
// 67C0016: control flows out of bounds to 67C0018
// 67C0007: variable 'v2' is possibly undefined
// 67C0007: variable 'v1' is possibly undefined
// 67C000C: variable 'v0' is possibly undefined
// 6FFB7D6: using guessed type int dword_6FFB7D6;

//----- (000000000696413F) ----------------------------------------------------
void __fastcall sub_696413F()
{
  unsigned __int8 v0; // al

  __outbyte(0xD8u, v0);
  __asm { iret }
}
// 6964141: control flows out of bounds to 6964142
// 696413F: variable 'v0' is possibly undefined

//----- (0000000006C3A307) ----------------------------------------------------
void __fastcall __noreturn sub_6C3A307(__int64 a1, unsigned __int16 a2)
{
  __indword(a2);
  __halt();
}

//----- (0000000006C4D32F) ----------------------------------------------------
void sub_6C4D32F()
{
  ((void (*)(void))loc_1C89A54)();
  __asm { retfq }
}
// 6C4D335: control flows out of bounds to 6C4D337
// 6C4D32F: ignored the value written to the shadow area of the succeeding call

//----- (0000000006E602CD) ----------------------------------------------------
void __fastcall sub_6E602CD(__int64 a1, __int16 _DX)
{
  char v2; // cf
  char v3; // al
  int v4; // ebp
  __int64 v5; // rsi

  __asm { insb }
  *(_DWORD *)(v5 - 48) += v4 + (__CFADD__(v2, v3) | __CFADD__(v2 + v3, -50));
  __asm { iretd }
}
// 6E602E6: control flows out of bounds to 6E602E8
// 6E602DA: variable 'v4' is possibly undefined
// 6E602CE: variable 'v2' is possibly undefined
// 6E602CE: variable 'v3' is possibly undefined
// 6E602DA: variable 'v5' is possibly undefined

//----- (0000000006F4B58A) ----------------------------------------------------
void __fastcall sub_6F4B58A()
{
  int v0; // ebp

  MEMORY[0xA5AF117D8FF999F2] = v0;
  __asm { iret }
}
// 6F4B5AB: control flows out of bounds to 6F4B5AC
// 6F4B58B: variable 'v0' is possibly undefined

//----- (00000000070029EC) ----------------------------------------------------
__int64 __fastcall sub_70029EC(__int64 a1)
{
  int *v1; // rsi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  if ( a1 )
    __halt();
  __asm { fstp8   st(5) }
  return MK_FP(retaddr[0], retaddr[0])(0i64, (unsigned int)(*v1 >> 31));
}
// 7002A0D: variable 'v1' is possibly undefined

//----- (0000000007045277) ----------------------------------------------------
__int64 __fastcall sub_7045277()
{
  int v0; // ebx
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  MEMORY[0xC4036205] = v0;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 7045288: variable 'v0' is possibly undefined

//----- (00000000070F0344) ----------------------------------------------------
void __noreturn sub_70F0344()
{
  __halt();
}
// 70F0344: using guessed type void __fastcall __noreturn sub_70F0344();

//----- (00000000072C41DC) ----------------------------------------------------
void __fastcall sub_72C41DC()
{
  unsigned int v0; // eax
  __int64 v1; // rdi
  __int64 v2; // rsi

  *(_BYTE *)(v1 + 1) = *(_BYTE *)(v2 + 1);
  __outdword(0xD1u, v0);
  __asm { retf }
}
// 72C41EC: unbalanced stack, ignored a potential tail call
// 72C41E3: variable 'v2' is possibly undefined
// 72C41E3: variable 'v1' is possibly undefined
// 72C41EA: variable 'v0' is possibly undefined

//----- (0000000007311505) ----------------------------------------------------
void __fastcall sub_7311505(
        __int64 a1,
        __int16 _DX,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  __asm
  {
    insd
    retnw   771Ah
  }
}
// 7311506: control flows out of bounds to 731150A
// 7311505: too many input arguments, some ignored

//----- (00000000074210BF) ----------------------------------------------------
unsigned __int8 __fastcall sub_74210BF()
{
  _DWORD *v0; // rsi

  *v0 = __ROL4__(*v0, 56);
  return __inbyte(0x6Cu);
}
// 74210BF: variable 'v0' is possibly undefined

//----- (000000000742D9FB) ----------------------------------------------------
__int64 __fastcall sub_742D9FB(__int64 a1, __int64 a2)
{
  unsigned int v2; // esp
  __int64 result; // rax
  char v4; // zf
  int v5; // eax
  _DWORD *v6; // rbx
  volatile __int32 *v7; // rsi
  double v8; // st6
  double v9; // st7
  int v12; // [rsp+0h] [rbp-8h]

  if ( v4 )
  {
    LOBYTE(a2) = a2 - ((unsigned __int16)((unsigned int)&unk_2A50595D | v5) >> 8);
    ((void (__usercall *)(__int64@<rcx>, __int64@<rdx>, double@<st0>, double@<st1>))loc_1CBC0B9A)(a1, a2, v9, v8);
    __asm { insd }
    *(_WORD *)(_RDX - 464365672) = (__int16)v9;
    _InterlockedExchange(v7, _RDX);
    __halt();
  }
  result = v2;
  *v6 ^= v12;
  return result;
}
// 742D9FD: variable 'v4' is possibly undefined
// 742DA02: variable 'v5' is possibly undefined
// 742DA0F: variable 'v9' is possibly undefined
// 742DA0F: variable 'v8' is possibly undefined
// 742DA21: variable '_RDX' is possibly undefined
// 742DA27: variable 'v7' is possibly undefined
// 742D98F: variable 'v2' is possibly undefined
// 742D991: variable 'v12' is possibly undefined
// 742D991: variable 'v6' is possibly undefined

//----- (00000000075C1AFC) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_75C1AFC(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  char v64; // of
  char v65; // pf
  __int64 result; // rax
  int v67; // ebp

  if ( !v64 )
  {
    if ( v65 )
      __halt();
    *(_DWORD *)(result - 238375749) &= v67;
  }
  return result;
}
// 75C1AFF: positive sp value 8 has been found
// 75C1AFC: variable 'v64' is possibly undefined
// 75C1B41: variable 'v65' is possibly undefined
// 75C1B43: variable 'v67' is possibly undefined
// 75C1B43: variable 'result' is possibly undefined
// 75C1AFC: too many input arguments, some ignored

//----- (0000000007772EC8) ----------------------------------------------------
void sub_7772EC8()
{
  __asm { retnq }
}
// 7772ECF: control flows out of bounds to 7772ED1

//----- (00000000077AF542) ----------------------------------------------------
__int64 __fastcall sub_77AF542()
{
  char v0; // zf
  char v1; // sf
  char v2; // of
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  if ( v1 ^ v2 | v0 )
    return nullsub_4378();
  else
    return MK_FP(retaddr[0], retaddr[0])();
}
// 77AF542: variable 'v1' is possibly undefined
// 77AF542: variable 'v2' is possibly undefined
// 77AF542: variable 'v0' is possibly undefined
// 77AF4D7: using guessed type __int64 nullsub_4378(void);

//----- (00000000077CE811) ----------------------------------------------------
__int64 sub_77CE811()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (00000000077F75D3) ----------------------------------------------------
__int64 __fastcall sub_77F75D3(__int64 a1, _BYTE *a2)
{
  char v2; // bh
  int v3; // edi

  LOBYTE(a1) = *a2 | a1;
  _EAX = v3 + 110;
  *(_BYTE *)(a1 + 92) += v2;
  __asm { rcl     ah, 7Dh }
  MEMORY[0x75A8A1420800C822] = _EAX;
  _disable();
  return (unsigned int)(_EAX - (_DWORD)&unk_2E55E94);
}
// 77F75D7: variable 'v3' is possibly undefined
// 77F75DA: variable 'v2' is possibly undefined

//----- (00000000077FDD34) ----------------------------------------------------
void __noreturn sub_77FDD34()
{
  JUMPOUT(0x571D59F7i64);
}
// 77FDD3B: control flows out of bounds to 571D59F7
// 77FDD34: using guessed type void __fastcall __noreturn sub_77FDD34();

//----- (000000000789112B) ----------------------------------------------------
void __fastcall sub_789112B()
{
  __int64 v0; // rbp
  double v1; // st7

  *(double *)(v0 + 620787328) = v1;
  __asm { retf }
}
// 7891132: unbalanced stack, ignored a potential tail call
// 789112C: variable 'v1' is possibly undefined
// 789112C: variable 'v0' is possibly undefined

//----- (0000000007919571) ----------------------------------------------------
__int64 __fastcall sub_7919571(__int64 a1)
{
  char v1; // cf
  int v2; // eax
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_DWORD *)(3 * a1) += v2 + v1;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 7919571: variable 'v2' is possibly undefined
// 7919571: variable 'v1' is possibly undefined

//----- (000000000797E5E4) ----------------------------------------------------
void sub_797E5E4()
{
  ;
}

//----- (00000000079CB2D7) ----------------------------------------------------
__int64 __fastcall sub_79CB2D7()
{
  unsigned int v0; // eax
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __outdword(0xE9u, v0);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 79CB2D7: variable 'v0' is possibly undefined

//----- (0000000007BA8186) ----------------------------------------------------
void __noreturn sub_7BA8186()
{
  __halt();
}
// 7BA8186: using guessed type void __fastcall __noreturn sub_7BA8186();

//----- (0000000007BB9638) ----------------------------------------------------
void sub_7BB9638()
{
  ;
}

//----- (0000000007C4FC61) ----------------------------------------------------
unsigned __int32 sub_7C4FC61()
{
  unsigned __int32 result; // eax

  result = __indword(0x4Du);
  _enable();
  return result;
}

//----- (0000000007CEF11A) ----------------------------------------------------
// attributes: thunk
void __noreturn sub_7CEF11A()
{
  while ( 1 )
    ;
}

//----- (0000000007DCCF83) ----------------------------------------------------
void sub_7DCCF83()
{
  ;
}

//----- (0000000007F0475E) ----------------------------------------------------
void sub_7F0475E()
{
  __asm { iret }
}
// 7F04762: control flows out of bounds to 7F04763

//----- (0000000007FEFCF9) ----------------------------------------------------
#error "7FEFCF9: function frame is wrong (funcsize=0)"

//----- (00000000080F7919) ----------------------------------------------------
__int64 __fastcall sub_80F7919()
{
  __int64 v0; // rbp
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  ++*(_DWORD *)(v0 - 41);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 80F7919: variable 'v0' is possibly undefined

//----- (0000000008120C37) ----------------------------------------------------
__int64 __fastcall sub_8120C37(__int64 a1, __int64 a2)
{
  void *retaddr[2]; // [rsp+8h] [rbp+0h]

  LOBYTE(a2) = a1 + a2;
  return MK_FP(retaddr[0], retaddr[0])(a1, a2);
}

//----- (0000000008152BE9) ----------------------------------------------------
void __fastcall sub_8152BE9()
{
  char v0; // al
  char v1; // bh
  _BYTE *v2; // rdi
  __int64 v3; // rsi
  double v4; // st7

  *v2 = v0;
  MEMORY[0xFFFFFFFFD283412E] = ~MEMORY[0xFFFFFFFFD283412E];
  *(_DWORD *)(v3 - 839545076) = (int)v4;
  *(_BYTE *)(v3 + 34) += v1;
  __asm { iret }
}
// 8152C18: control flows out of bounds to 8152C19
// 8152BE9: variable 'v0' is possibly undefined
// 8152BE9: variable 'v2' is possibly undefined
// 8152C02: variable 'v4' is possibly undefined
// 8152C02: variable 'v3' is possibly undefined
// 8152C08: variable 'v1' is possibly undefined

//----- (00000000081D1E7A) ----------------------------------------------------
void sub_81D1E7A()
{
  __asm { iret }
}
// 81D1E7F: control flows out of bounds to 81D1E80

//----- (00000000081F84C6) ----------------------------------------------------
int __fastcall sub_81F84C6(__int64 a1, _DWORD *a2)
{
  __int16 v2; // ax
  _BYTE *v3; // rsi

  LOBYTE(v2) = *v3;
  *a2 = (_DWORD)&off_369A5D1E;
  return v2 & 0x6A97;
}
// 81F84C6: variable 'v3' is possibly undefined
// 81F84D0: variable 'v2' is possibly undefined
// 369A5D1E: using guessed type void *__ptr32 off_369A5D1E;

//----- (0000000008204004) ----------------------------------------------------
void sub_8204004()
{
  ;
}

//----- (0000000008205821) ----------------------------------------------------
void __fastcall sub_8205821(_BYTE *a1)
{
  *a1 = BYTE1(a1);
  __asm { retfq   0E7ABh }
}
// 8205824: control flows out of bounds to 8205828

//----- (0000000008254457) ----------------------------------------------------
__int64 __fastcall sub_8254457()
{
  int v0; // ebp
  __int64 v1; // rdi
  _BYTE *v2; // rsi
  int v3; // eax

  HIWORD(v3) = HIWORD(v0);
  LOBYTE(v3) = *v2;
  _disable();
  BYTE1(v3) = *(_BYTE *)(v1 + 1901871903) & BYTE1(v0);
  return (unsigned int)(v3 - ((_DWORD)v2 + 1));
}
// 8254457: variable 'v0' is possibly undefined
// 8254458: variable 'v2' is possibly undefined
// 825445B: variable 'v1' is possibly undefined
// 8254457: using guessed type __int64 __fastcall sub_8254457();

//----- (00000000082960E0) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
char __fastcall sub_82960E0(char _CL)
{
  char v1; // al

  __asm { rcl     dword ptr [rbx-53F8347Fh], cl }
  return v1 & 0x9D;
}
// 82960E1: positive sp value 8 has been found
// 82960E0: could not find valid save-restore pair for rbp
// 82960EC: variable 'v1' is possibly undefined

//----- (00000000085666AC) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_85666AC()
{
  unsigned __int8 v0; // al
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __outbyte(0x65u, v0);
  __asm { icebp }
  __debugbreak();
  return MK_FP(retaddr[0], retaddr[0])();
}
// 85666AF: positive sp value 8 has been found
// 85666AC: variable 'v0' is possibly undefined

//----- (0000000008680390) ----------------------------------------------------
void __fastcall sub_8680390()
{
  int v0; // eax
  _DWORD *v1; // rdi

  *v1 = v0;
  __asm { iretd }
}
// 8680394: control flows out of bounds to 8680396
// 8680390: variable 'v0' is possibly undefined
// 8680390: variable 'v1' is possibly undefined

//----- (000000000894F29E) ----------------------------------------------------
void sub_894F29E()
{
  __asm { retf }
}
// 894F29F: unbalanced stack, ignored a potential tail call

//----- (0000000008990E75) ----------------------------------------------------
void __fastcall __noreturn sub_8990E75(__int64 a1)
{
  int v1; // ebx
  __int64 v2; // rsi
  bool v3; // of

  v3 = __OFSUB__(*(_DWORD *)(a1 + 6), v1);
  *(_DWORD *)(a1 + 6) -= v1;
  if ( !v3 )
  {
    *(char *)(v2 - 670999216) >>= 7;
    __halt();
  }
  __halt();
}
// 8990E78: variable 'v1' is possibly undefined
// 8990E89: variable 'v2' is possibly undefined

//----- (00000000089B2E6D) ----------------------------------------------------
void __fastcall sub_89B2E6D(__int64 a1, __int16 _DX)
{
  __asm
  {
    insd
    iret
  }
}
// 89B2E74: control flows out of bounds to 89B2E75

//----- (0000000008A9921E) ----------------------------------------------------
char sub_8A9921E()
{
  return -77;
}

//----- (0000000008B19FC4) ----------------------------------------------------
void sub_8B19FC4()
{
  __asm { retf }
}

//----- (0000000008CE0957) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_8CE0957()
{
  __int64 v0; // rbx

  _disable();
  byte_49C37A6[v0] ^= v0;
  _enable();
  __asm { iret }
}
// 8CE0976: positive sp value 8 has been found
// 8CE0985: control flows out of bounds to 8CE0986
// 8CE0968: variable 'v0' is possibly undefined

//----- (0000000008D5D2CF) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_8D5D2CF(__int64 a1, __int64 a2)
{
  unsigned int v2; // eax

  __outdword(0xEBu, v2);
  MEMORY[0x65F78B44] += 34;
  *(_DWORD *)(a2 - 2034853380) *= 2;
  __halt();
}
// 8D5D2DE: positive sp value 8 has been found
// 8D5D2D4: variable 'v2' is possibly undefined

//----- (0000000008D79A8C) ----------------------------------------------------
int __fastcall sub_8D79A8C()
{
  __int64 v0; // rbx
  int *v1; // rsi
  int result; // eax

  result = *v1;
  *(_BYTE *)(v0 + 1495227598) += 70;
  MEMORY[0x435E5577] |= 0xFFFFFFFB;
  return result;
}
// 8D79A8C: could not find valid save-restore pair for rdi
// 8D79A8D: variable 'v1' is possibly undefined
// 8D79A8F: variable 'v0' is possibly undefined

//----- (0000000008DD16DA) ----------------------------------------------------
void __noreturn sub_8DD16DA()
{
  __halt();
}
// 8DD16DA: using guessed type void __fastcall __noreturn sub_8DD16DA();

//----- (0000000009064A2D) ----------------------------------------------------
__int64 __fastcall sub_9064A2D(__int64 a1, int a2)
{
  __int64 v2; // rax
  __int64 v3; // rbx
  unsigned int v4; // ebp
  __int64 v5; // rsi
  __int64 result; // rax

  *(_DWORD *)(a1 + 74) += v2;
  *(_BYTE *)(v3 + v2) &= a1;
  *(_DWORD *)(v5 - 1876143187) ^= a2;
  __indword(0x67u);
  MEMORY[0x40ACD572] += a1;
  result = v4;
  __outbyte(v3 ^ a2, v4);
  return result;
}
// 9064A2D: variable 'v2' is possibly undefined
// 9064A30: variable 'v3' is possibly undefined
// 9064A35: variable 'v5' is possibly undefined
// 9064A50: variable 'v4' is possibly undefined

//----- (00000000090699D1) ----------------------------------------------------
void sub_90699D1()
{
  __asm { iret }
}
// 90699D3: control flows out of bounds to 90699D4

//----- (00000000090AF38E) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_90AF38E()
{
  int v0; // eax
  _DWORD *v1; // rdi
  _DWORD *v2; // rdi

  *v1 = v0;
  v2 = v1 + 1;
  MEMORY[0x398DD32027D05395] = v0;
  *v2 = v0;
  __asm { retn    0E7CEh }
}
// 90AF38F: positive sp value 8 has been found
// 90AF3A9: unbalanced stack, ignored a potential tail call
// 90AF38F: variable 'v0' is possibly undefined
// 90AF38F: variable 'v1' is possibly undefined

//----- (0000000009352060) ----------------------------------------------------
void sub_9352060()
{
  __asm { iret }
}
// 9352072: control flows out of bounds to 9352073

//----- (00000000093BAC32) ----------------------------------------------------
void __noreturn sub_93BAC32()
{
  __asm { int     4Dh; Z100 - Slave 8259 - S100 vectored line 5 }
  __halt();
}
// 93BAC32: using guessed type void __fastcall __noreturn sub_93BAC32();

//----- (00000000094D4260) ----------------------------------------------------
__int64 __fastcall sub_94D4260(__int64 a1, int a2)
{
  char v2; // al
  __int64 result; // rax

  *(_BYTE *)(a1 + 1968314544) += v2;
  LOBYTE(a2) = MEMORY[0xD5D2117D54925654];
  result = a2 | 0x5BFECF7Du;
  *(_WORD *)(result - 1361002253) = __SS__;
  return result;
}
// 94D4261: variable 'v2' is possibly undefined

//----- (000000000954E84E) ----------------------------------------------------
void sub_954E84E()
{
  __asm { iretw }
}
// 954E852: control flows out of bounds to 954E854

//----- (000000000960070F) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __noreturn sub_960070F()
{
  __indword(0x83u);
  __halt();
}
// 9600712: positive sp value 18 has been found
// 960070F: using guessed type void __fastcall __noreturn sub_960070F();

//----- (00000000097BDF1E) ----------------------------------------------------
__int64 __fastcall sub_97BDF1E()
{
  int v0; // eax

  return (unsigned int)(v0 + 2097069306);
}
// 97BDF1E: variable 'v0' is possibly undefined
// 97BDF1E: using guessed type __int64 __fastcall sub_97BDF1E();

//----- (00000000097D01EC) ----------------------------------------------------
void sub_97D01EC()
{
  __asm { icebp }
  JUMPOUT(0x97D01D8i64);
}
// 97D01F6: control flows out of bounds to 97D01D8

//----- (0000000009883409) ----------------------------------------------------
void __fastcall sub_9883409(__int64 a1, unsigned __int16 a2)
{
  unsigned int v2; // eax
  _DWORD *v3; // rdi
  unsigned int v4; // esp
  int v5; // eax
  unsigned __int64 v6; // kr00_8

  v6 = (*(unsigned int *)((char *)v3 - 5) | 0x6CF3956700000000i64) + __PAIR64__(v2, v4);
  v5 = HIDWORD(v6);
  LOBYTE(v5) = __inbyte(a2);
  *v3 = v5;
  __asm { iret }
}
// 9883418: control flows out of bounds to 9883419
// 988340B: variable 'v3' is possibly undefined
// 988340E: variable 'v4' is possibly undefined
// 988340E: variable 'v2' is possibly undefined

//----- (000000000990D57F) ----------------------------------------------------
void sub_990D57F()
{
  __asm { iret }
}
// 990D585: control flows out of bounds to 990D586

//----- (00000000099B4B71) ----------------------------------------------------
__int64 sub_99B4B71()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __indword(0xE9u);
  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000009B644FE) ----------------------------------------------------
#error "9B644FE: function frame is wrong (funcsize=0)"

//----- (0000000009D6B146) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_9D6B146()
{
  int v0; // ebp
  _BYTE *v1; // rdi
  __int64 v2; // rsi

  *(_DWORD *)(v2 + 55) += v0 + (*(_BYTE *)v2 < *v1);
  __halt();
}
// 9D6B147: positive sp value 8 has been found
// 9D6B14B: variable 'v0' is possibly undefined
// 9D6B148: variable 'v2' is possibly undefined
// 9D6B148: variable 'v1' is possibly undefined
// 9D6B146: using guessed type void __fastcall __noreturn sub_9D6B146();

//----- (0000000009E92C88) ----------------------------------------------------
__int64 __fastcall sub_9E92C88()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __asm { fnsave  byte ptr [rbp+5Bh] }
  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000009F4A8EA) ----------------------------------------------------
void __fastcall sub_9F4A8EA(char a1)
{
  char v1; // cf
  char v2; // zf
  __int64 v3; // rdi

  if ( v1 | v2 )
  {
    *(_DWORD *)(v3 - 631160545) = __ROR4__(*(_DWORD *)(v3 - 631160545), a1);
    __halt();
  }
  JUMPOUT(0x9F4A878i64);
}
// 9F4A8EF: control flows out of bounds to 9F4A878
// 9F4A8EF: variable 'v1' is possibly undefined
// 9F4A8EF: variable 'v2' is possibly undefined
// 9F4A8F1: variable 'v3' is possibly undefined

//----- (0000000009F62B9E) ----------------------------------------------------
__int64 __fastcall sub_9F62B9E(__int64 a1, __int64 a2)
{
  __int64 v2; // rsi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  LOBYTE(a2) = *(_BYTE *)(v2 - 102) | a2;
  return MK_FP(retaddr[0], retaddr[0])(a1, a2);
}
// 9F62B9E: variable 'v2' is possibly undefined

//----- (000000000A006EA1) ----------------------------------------------------
__int64 sub_A006EA1()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __debugbreak();
  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000000A2FE274) ----------------------------------------------------
void __fastcall sub_A2FE274(__int64 a1, __int64 a2)
{
  _DWORD *v2; // rdi
  _DWORD *v3; // rsi

  *v2 = *v3;
  *(_BYTE *)(a2 - 37) = 0;
  JUMPOUT(0x6ACD3D91i64);
}
// A2FE282: control flows out of bounds to 6ACD3D91
// A2FE279: variable 'v3' is possibly undefined
// A2FE279: variable 'v2' is possibly undefined

//----- (000000000A4482B5) ----------------------------------------------------
void __fastcall sub_A4482B5(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al

  LOBYTE(a2) = 79;
  v2 = __inbyte(a2);
  __outbyte(a2, v2);
  __debugbreak();
  __asm { iret }
}
// A4482BF: control flows out of bounds to A4482C4

//----- (000000000A4917C3) ----------------------------------------------------
__int64 sub_A4917C3()
{
  __int64 result; // rax

  BYTE1(result) = 89;
  return result;
}
// A4917C3: using guessed type __int64 __fastcall sub_A4917C3();

//----- (000000000A49D61F) ----------------------------------------------------
void sub_A49D61F()
{
  __asm { retf }
}
// A49D622: unbalanced stack, ignored a potential tail call

//----- (000000000A76F461) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_A76F461(__int64 a1)
{
  signed int v1; // eax
  char v2; // bl
  __int64 v3; // rdi
  unsigned __int64 v4; // [rsp-8h] [rbp-8h]

  __writeeflags(v4);
  __outdword(0x20u, v1);
  __inbyte(v1 >> 31);
  *(_BYTE *)(v3 - 1435894760) = v2;
  ++*(_DWORD *)(a1 + 89);
  __asm { iret }
}
// A76F462: positive sp value 8 has been found
// A76F477: control flows out of bounds to A76F478
// A76F461: variable 'v4' is possibly undefined
// A76F462: variable 'v1' is possibly undefined
// A76F46D: variable 'v2' is possibly undefined
// A76F46D: variable 'v3' is possibly undefined

//----- (000000000A844CA8) ----------------------------------------------------
void sub_A844CA8()
{
  ;
}

//----- (000000000A9A603B) ----------------------------------------------------
void __noreturn sub_A9A603B()
{
  JUMPOUT(0xFFFFFFFF9897DA4Bui64);
}
// A9A6042: control flows out of bounds to FFFFFFFF9897DA4B
// A9A603B: using guessed type void __fastcall __noreturn sub_A9A603B();

//----- (000000000AC9D6C4) ----------------------------------------------------
#error "AC9D6C4: stack frame is too big (funcsize=0)"

//----- (000000000ADFE8A5) ----------------------------------------------------
__int64 __fastcall sub_ADFE8A5()
{
  unsigned int v0; // ebp

  --*(_DWORD *)((char *)&unk_29 + v0);
  return sub_ADFE8AE();
}
// ADFE8A5: variable 'v0' is possibly undefined
// ADFE8A5: using guessed type __int64 __fastcall sub_ADFE8A5();
// ADFE8AE: using guessed type __int64 sub_ADFE8AE(void);

//----- (000000000ADFF987) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_ADFF987()
{
  __asm { iret }
}
// ADFF988: positive sp value 8 has been found
// ADFF988: control flows out of bounds to ADFF989

//----- (000000000AEA79E9) ----------------------------------------------------
void __fastcall sub_AEA79E9(__int64 a1, __int16 _DX)
{
  _DWORD *v2; // rbx

  if ( !a1 )
  {
    _enable();
    JUMPOUT(0x4523088Di64);
  }
  __asm { insb }
  *v2 -= 1159923853;
}
// AEA7A77: unbalanced stack, ignored a potential tail call
// AEA79E9: could not find valid save-restore pair for rbp
// AEA79FC: variable 'v2' is possibly undefined

//----- (000000000AFAC9A5) ----------------------------------------------------
void sub_AFAC9A5()
{
  JUMPOUT(0xEA507CEi64);
}
// AFAC9A9: control flows out of bounds to EA507CE

//----- (000000000B01B549) ----------------------------------------------------
void __fastcall sub_B01B549()
{
  __int64 v0; // rax
  int v1; // esp

  *(_DWORD *)(v0 - 123) |= v1;
  __asm { iret }
}
// B01B54C: control flows out of bounds to B01B54D
// B01B549: variable 'v1' is possibly undefined
// B01B549: variable 'v0' is possibly undefined

//----- (000000000B0E1021) ----------------------------------------------------
void sub_B0E1021()
{
  ;
}

//----- (000000000B0E2E1E) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_B0E2E1E(__int64 a1, unsigned __int16 a2)
{
  int v2; // eax
  __int64 v3; // rbx
  signed int *v4; // rdi
  double v5; // st7
  char v6; // fl
  char v7; // cf
  bool v8; // zf
  bool v9; // sf
  char v10; // of
  bool v11; // pf
  signed int v12; // eax

  v12 = v2 ^ 0xAE6E54B3;
  v7 = 0;
  v10 = 0;
  v8 = v12 == 0;
  v11 = __SETP__(v12, 0);
  v9 = v12 < 0;
  BYTE1(v12) = v6;
  *v4 = v12;
  *(double *)(v3 - 29) = v5;
  __indword(a2);
  *(signed int *)((char *)v4 - 1408444118) -= (_DWORD)v4 + 4;
  __halt();
}
// B0E2E24: positive sp value 8 has been found
// B0E2E24: variable 'v2' is possibly undefined
// B0E2E2B: variable 'v4' is possibly undefined
// B0E2E31: variable 'v5' is possibly undefined
// B0E2E31: variable 'v3' is possibly undefined

//----- (000000000B0EBB0E) ----------------------------------------------------
__int16 __fastcall sub_B0EBB0E(__int64 a1, char a2)
{
  char v2; // al

  return a2 * v2;
}
// B0EBB0F: variable 'v2' is possibly undefined

//----- (000000000B26260E) ----------------------------------------------------
void sub_B26260E()
{
  ;
}

//----- (000000000B634A01) ----------------------------------------------------
void __noreturn sub_B634A01()
{
  __halt();
}
// B634A01: using guessed type void __fastcall __noreturn sub_B634A01();

//----- (000000000B6F95F5) ----------------------------------------------------
char __fastcall sub_B6F95F5()
{
  _DWORD *v0; // rax

  *v0 -= (_DWORD)&off_25EF6B66;
  return MEMORY[0xD2B34BC1C0025B23];
}
// B6F95F5: variable 'v0' is possibly undefined
// 25EF6B66: using guessed type void *__ptr32 off_25EF6B66;

//----- (000000000B91290C) ----------------------------------------------------
__int64 sub_B91290C()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000000BA22C65) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_BA22C65()
{
  __int64 v0; // rbp
  _DWORD *v1; // rdi
  _DWORD *v2; // rsi
  unsigned __int64 v3; // [rsp-8h] [rbp-8h]

  __writeeflags(v3);
  __indword(v0);
  *(_DWORD *)(v0 - 2121433095) = (_DWORD)v2;
  *v1 = *v2;
  __halt();
}
// BA22C6E: positive sp value 8 has been found
// BA22C6D: variable 'v3' is possibly undefined
// BA22C74: variable 'v0' is possibly undefined
// BA22C75: variable 'v2' is possibly undefined
// BA22C7D: variable 'v1' is possibly undefined
// BA22C65: using guessed type void __fastcall __noreturn sub_BA22C65();

//----- (000000000BA2ADA1) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
char __fastcall sub_BA2ADA1()
{
  __int64 v0; // rsi
  unsigned __int64 v2; // [rsp-8h] [rbp-8h]

  __writeeflags(v2);
  return *(_BYTE *)v0;
}
// BA2ADAD: positive sp value 8 has been found
// BA2ADAC: variable 'v2' is possibly undefined
// BA2ADAD: variable 'v0' is possibly undefined

//----- (000000000BB9DB4F) ----------------------------------------------------
void __fastcall __noreturn sub_BB9DB4F()
{
  char v0; // bl

  MEMORY[0xFFFFFFFF8BBA380C] = v0;
  __halt();
}
// BB9DB4F: variable 'v0' is possibly undefined
// BB9DB4F: using guessed type void __fastcall __noreturn sub_BB9DB4F();

//----- (000000000BBD3411) ----------------------------------------------------
void __fastcall sub_BBD3411(unsigned __int8 a1, volatile __int32 *a2)
{
  char v2; // al
  char v4; // al
  __int32 v5; // esp

  __asm { outsb }
  v4 = (*(_BYTE *)(_RSI + 1647784161) < a1) + v2 + 82;
  _InterlockedExchange(a2, v5);
  MEMORY[0xCB495FE492507F08] = v4;
  __asm { iret }
}
// BBD342E: control flows out of bounds to BBD342F
// BBD3412: variable '_RSI' is possibly undefined
// BBD3418: variable 'v2' is possibly undefined
// BBD3420: variable 'v5' is possibly undefined

//----- (000000000BD2705D) ----------------------------------------------------
__int64 __fastcall sub_BD2705D(__int64 a1)
{
  char v1; // cf
  __int64 result; // rax

  *(_BYTE *)(a1 - 25) -= v1 + BYTE1(result);
  return result;
}
// BD2705D: variable 'v1' is possibly undefined
// BD2705D: variable 'result' is possibly undefined

//----- (000000000BFBAE56) ----------------------------------------------------
void __fastcall sub_BFBAE56(__int64 a1, unsigned __int16 a2)
{
  _BYTE *v2; // rax

  HIBYTE(a2) &= *v2;
  __asm { icebp }
  __outbyte(a2, (unsigned __int8)v2);
  __asm { iret }
}
// BFBAE5E: control flows out of bounds to BFBAE5F
// BFBAE56: variable 'v2' is possibly undefined

//----- (000000000C17FDAF) ----------------------------------------------------
void __fastcall sub_C17FDAF(__int64 a1)
{
  *(_DWORD *)(a1 + 226115574) >>= 26;
  __asm { iret }
}
// C17FDBE: control flows out of bounds to C17FDBF

//----- (000000000C19918A) ----------------------------------------------------
void __fastcall __noreturn sub_C19918A()
{
  __asm { xlat }
  __halt();
}
// C19918A: using guessed type void __fastcall __noreturn sub_C19918A();

//----- (000000000C2AAA04) ----------------------------------------------------
__int64 sub_C2AAA04()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000000C2FAFCE) ----------------------------------------------------
void __fastcall sub_C2FAFCE()
{
  __asm { retf }
}
// C2FAFD1: unbalanced stack, ignored a potential tail call

//----- (000000000C942FFD) ----------------------------------------------------
void __fastcall sub_C942FFD()
{
  __asm { rcl     byte ptr [rdi+51h], 26h }
}

//----- (000000000C9D2403) ----------------------------------------------------
void __fastcall __noreturn sub_C9D2403(char _CL, __int64 _RDX)
{
  __int64 v2; // r10
  char v3; // r12

  __asm { rcl     [rsp+rdx*2+arg_6], cl }
  *(_BYTE *)(v2 + 82) ^= v3;
  __halt();
}
// C9D2407: variable 'v3' is possibly undefined
// C9D2407: variable 'v2' is possibly undefined

//----- (000000000CA1C841) ----------------------------------------------------
void __fastcall __noreturn sub_CA1C841(__int64 a1, __int32 a2)
{
  __int64 v2; // rax
  __int64 v3; // rsi

  _InterlockedExchange((volatile __int32 *)(v2 + 8 * v3 - 1240405592), a2);
  __halt();
}
// CA1C841: variable 'v2' is possibly undefined
// CA1C841: variable 'v3' is possibly undefined

//----- (000000000CA6A9F2) ----------------------------------------------------
void __fastcall sub_CA6A9F2(__int64 a1, __int64 a2)
{
  __asm { retn }
}
// CA6A9F4: unbalanced stack, ignored a potential tail call

//----- (000000000CADB9CD) ----------------------------------------------------
char __fastcall sub_CADB9CD(__int64 a1)
{
  unsigned int v1; // eax
  char result; // al

  LOBYTE(v1) = v1 - ((v1 < 0x86562EE6) + 38);
  *(_BYTE *)(a1 - 56) -= BYTE1(v1);
  return result;
}
// CADB9D8: variable 'v1' is possibly undefined

//----- (000000000CB3D863) ----------------------------------------------------
void __fastcall __noreturn sub_CB3D863(__int64 a1, unsigned __int16 a2)
{
  __int64 v2; // rdi
  int v3; // esp

  *(_DWORD *)(v2 + 55) -= v3;
  __indword(0xE9u);
  __inbyte(a2);
  __halt();
}
// CB3D872: variable 'v2' is possibly undefined
// CB3D872: variable 'v3' is possibly undefined

//----- (000000000CC79B4F) ----------------------------------------------------
__int64 __fastcall sub_CC79B4F()
{
  int v0; // eax

  return (unsigned int)((_DWORD)&unk_2B654254 + v0);
}
// CC79B4F: variable 'v0' is possibly undefined
// CC79B4F: using guessed type __int64 __fastcall sub_CC79B4F();

//----- (000000000CE2D9D3) ----------------------------------------------------
void sub_CE2D9D3()
{
  __asm { int     79h }
}

//----- (000000000CE48BCD) ----------------------------------------------------
void __fastcall __noreturn sub_CE48BCD()
{
  __asm { outsb }
  JUMPOUT(0x6A0BC30Ei64);
}
// CE48BCE: control flows out of bounds to 6A0BC30E
// CE48BCD: using guessed type void __fastcall __noreturn sub_CE48BCD();

//----- (000000000D0DEADC) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_D0DEADC(char a1)
{
  __int64 v1; // rbp
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_DWORD *)(v1 + 1404373611) = __ROL4__(*(_DWORD *)(v1 + 1404373611), a1);
  return MK_FP(retaddr[0], retaddr[0])();
}
// D0DEAE7: positive sp value 8 has been found
// D0DEADC: could not find valid save-restore pair for rbx
// D0DEAE0: variable 'v1' is possibly undefined

//----- (000000000D1EB9C2) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __noreturn sub_D1EB9C2()
{
  __indword(0xE8u);
  __halt();
}
// D1EB9C9: positive sp value 8 has been found
// D1EB9C2: using guessed type void __fastcall __noreturn sub_D1EB9C2();

//----- (000000000D2C3027) ----------------------------------------------------
void sub_D2C3027()
{
  __asm { iret }
}
// D2C3028: control flows out of bounds to D2C3029

//----- (000000000D2D0D9E) ----------------------------------------------------
void sub_D2D0D9E()
{
  __asm { iret }
}
// D2D0D9F: control flows out of bounds to D2D0DA0

//----- (000000000D67DFEA) ----------------------------------------------------
void sub_D67DFEA()
{
  __asm { iret }
}
// D67DFEF: control flows out of bounds to D67DFF0

//----- (000000000D703814) ----------------------------------------------------
void __fastcall sub_D703814(
        __int64 a1,
        unsigned __int16 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  unsigned int v66; // eax

  __outdword(a2, v66);
  __asm { repne retf 4E6Ah }
}
// D703815: control flows out of bounds to D703819
// D703814: variable 'v66' is possibly undefined
// D703814: too many input arguments, some ignored

//----- (000000000D7217A8) ----------------------------------------------------
void __fastcall __noreturn sub_D7217A8()
{
  int v0; // esp
  char v1; // cf
  __int64 v2; // rax
  char v3; // cc

  v3 = ((char)(BYTE1(v2) + v1 + *(_BYTE *)(v2 - 228154634)) < 0) ^ (__OFADD__(v1, *(_BYTE *)(v2 - 228154634)) | __OFADD__(BYTE1(v2), v1 + *(_BYTE *)(v2 - 228154634)));
  *(_BYTE *)(v2 - 228154634) += BYTE1(v2) + v1;
  if ( !v3 )
    __halt();
  *(_DWORD *)(v2 + 22) &= v0;
  __debugbreak();
  __halt();
}
// D7217A8: variable 'v2' is possibly undefined
// D7217A8: variable 'v1' is possibly undefined
// D721735: variable 'v0' is possibly undefined
// D7217A8: using guessed type void __fastcall __noreturn sub_D7217A8();

//----- (000000000D980ACE) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_D980ACE()
{
  char v0; // cf
  int v1; // eax
  _DWORD *v2; // rbx
  int v4; // [rsp-8h] [rbp-8h]

  *v2 &= v0 + v1 + 153022533;
  __asm { icebp }
  return (unsigned int)(v4 + 1375148957);
}
// D980AD7: positive sp value 8 has been found
// D980ACE: variable 'v0' is possibly undefined
// D980ACE: variable 'v1' is possibly undefined
// D980AD3: variable 'v2' is possibly undefined
// D980AD7: variable 'v4' is possibly undefined
// D980ACE: using guessed type __int64 __fastcall sub_D980ACE();

//----- (000000000DBA0FCF) ----------------------------------------------------
void __fastcall sub_DBA0FCF(__int64 a1, __int16 _DX)
{
  __asm
  {
    insb
    iretd
  }
}
// DBA0FD0: control flows out of bounds to DBA0FD2

//----- (000000000DBF86F7) ----------------------------------------------------
char __fastcall sub_DBF86F7(__int64 a1, unsigned __int16 a2)
{
  char v2; // cf
  char v3; // sf
  char v4; // of
  __int64 v5; // rax

  __outdword(a2, v5);
  if ( v3 != v4 )
  {
    LOBYTE(v5) = (*(__int64 (**)(void))(a1 + 88))();
  }
  else
  {
    *(_DWORD *)(v5 - 281740041) -= v2 - 1878396692;
    LOBYTE(v5) = MEMORY[0x7C67A1DF9FE41A65];
    __writefsbyte(v5 + 31, BYTE1(a1) & __readfsbyte(v5 + 31));
  }
  return v5;
}
// DBF86F7: variable 'v5' is possibly undefined
// DBF86F8: variable 'v3' is possibly undefined
// DBF86F8: variable 'v4' is possibly undefined
// DBF86FA: variable 'v2' is possibly undefined

//----- (000000000DCCDA6B) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_DCCDA6B(_DWORD *a1)
{
  int v1; // esi
  int v2; // eax

  v2 = v1 + 20;
  LOBYTE(v2) = -39;
  *a1 -= v2;
  __indword(0x53u);
  __asm { iret }
}
// DCCDA71: positive sp value 8 has been found
// DCCDA75: control flows out of bounds to DCCDA76
// DCCDA6B: variable 'v1' is possibly undefined

//----- (000000000DD2F74C) ----------------------------------------------------
void __fastcall sub_DD2F74C()
{
  __asm { retn }
}
// DD2F74D: unbalanced stack, ignored a potential tail call

//----- (000000000DE14DAB) ----------------------------------------------------
void __noreturn sub_DE14DAB()
{
  __halt();
}

//----- (000000000DFD1E87) ----------------------------------------------------
void sub_DFD1E87()
{
  __asm { iret }
}
// DFD1E17: control flows out of bounds to DFD1E18

//----- (000000000E064BA3) ----------------------------------------------------
__int64 __fastcall sub_E064BA3(char a1)
{
  char v1; // cf
  _BYTE *v2; // rbx
  _BYTE *v3; // rdi
  _BYTE *v4; // rsi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *v2 += a1 + v1;
  *v3 = *v4;
  return MK_FP(retaddr[0], retaddr[0])();
}
// E064BA3: variable 'v1' is possibly undefined
// E064BA3: variable 'v2' is possibly undefined
// E064BAA: variable 'v4' is possibly undefined
// E064BAA: variable 'v3' is possibly undefined

//----- (000000000E126B6F) ----------------------------------------------------
void sub_E126B6F()
{
  ;
}

//----- (000000000E13129E) ----------------------------------------------------
__int64 sub_E13129E()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000000E172123) ----------------------------------------------------
void __fastcall sub_E172123()
{
  __asm { retn }
}
// E172124: unbalanced stack, ignored a potential tail call

//----- (000000000E1D3A6D) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_E1D3A6D(_BYTE *a1, __int64 a2)
{
  unsigned int v2; // eax
  _BYTE *v3; // rbx
  unsigned __int64 v4; // rsi
  char v5; // cf
  __int16 v6; // t2
  __int64 v7; // rdx
  __int64 v8; // rdx
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  v6 = (__int16)v2 % (char)a1;
  LOBYTE(v2) = (__int16)v2 / (char)a1;
  BYTE1(v2) = v6;
  __outdword(a2, v2);
  v7 = *(_DWORD *)(a2 - 18) + v5 + (unsigned int)a2;
  __inbyte(v7);
  *a1 |= 0x13u;
  __inbyte(2u);
  *(_BYTE *)(v7 + 23) <<= (char)a1;
  v8 = 2916576311i64;
  __writeeflags(v4);
  LOBYTE(v8) = 55 - (v5 + *v3);
  MK_FP(retaddr[0], retaddr[0])(a1, v8);
}
// E1D3A82: positive sp value 10 has been found
// E1D3A6D: could not find valid save-restore pair for rbp
// E1D3A6D: variable 'v2' is possibly undefined
// E1D3A76: variable 'v5' is possibly undefined
// E1D3A90: variable 'v4' is possibly undefined
// E1D3A91: variable 'v3' is possibly undefined

//----- (000000000E3FEC9C) ----------------------------------------------------
void __fastcall sub_E3FEC9C(__int64 a1, _DWORD *a2)
{
  int v2; // eax
  _DWORD *v3; // rdi

  *(_DWORD *)((char *)a2 + 91) ^= (unsigned int)a2;
  *a2 <<= 26;
  *v3 = v2;
  __asm { iret }
}
// E3FECA9: control flows out of bounds to E3FECAA
// E3FECA2: variable 'v2' is possibly undefined
// E3FECA2: variable 'v3' is possibly undefined

//----- (000000000E402C99) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_E402C99()
{
  __asm
  {
    rcr     ds:byte_3712DDDE[rdi], 1
    retnq   5E33h
  }
}
// E402C9F: positive sp value 5272 has been found
// E402CA6: control flows out of bounds to E402CAA

//----- (000000000E42CD4E) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_E42CD4E(__int64 a1, unsigned __int16 a2, __int64 a3)
{
  int v3; // eax
  __int64 v4; // rbx
  __int64 v5; // rsi
  double v6; // st7

  *(_QWORD *)(a3 + 357340126) >>= 1;
  LOBYTE(a2) = a2 - *(_BYTE *)(v5 - 51);
  __asm { int     0D4h; used by BASIC while in interpreter }
  *(_WORD *)((char *)&unk_4B + 9 * v4) = (__int16)v6;
  __outdword(a2, v3 | 0xAB3B9CFC);
  __halt();
}
// E42CD64: positive sp value 8 has been found
// E42CD5D: variable 'v5' is possibly undefined
// E42CD64: variable 'v6' is possibly undefined
// E42CD64: variable 'v4' is possibly undefined
// E42CD4E: variable 'v3' is possibly undefined

//----- (000000000E4564B8) ----------------------------------------------------
void __fastcall __noreturn sub_E4564B8(__int64 a1, __int16 _DX)
{
  __asm
  {
    insd
    mov     rsi, tr7
  }
  __halt();
}

//----- (000000000E4BBC90) ----------------------------------------------------
void sub_E4BBC90()
{
  unsigned __int64 v0; // kr00_8

  v0 = __readeflags();
  __asm { retn }
}
// E4BBC9C: unbalanced stack, ignored a potential tail call

//----- (000000000E642D82) ----------------------------------------------------
__int64 sub_E642D82()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000000E7AE27F) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_E7AE27F()
{
  unsigned __int64 v0; // [rsp-8h] [rbp-8h]

  __writeeflags(v0);
  __asm { iret }
}
// E7AE280: positive sp value 8 has been found
// E7AE280: control flows out of bounds to E7AE281
// E7AE27F: variable 'v0' is possibly undefined

//----- (000000000E8A6102) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_E8A6102()
{
  __int64 v0; // rbx
  int v1; // esp
  __int64 v3; // [rsp-8h] [rbp-8h]

  *(_DWORD *)(v0 - 2) = v1;
  return v3;
}
// E8A6109: positive sp value 8 has been found
// E8A6102: variable 'v1' is possibly undefined
// E8A6102: variable 'v0' is possibly undefined
// E8A6108: variable 'v3' is possibly undefined
// E8A6102: using guessed type __int64 __fastcall sub_E8A6102();

//----- (000000000EA109F4) ----------------------------------------------------
void __fastcall sub_EA109F4()
{
  __int64 v0; // rax

  *(_BYTE *)(v0 - 495731217) -= v0;
}
// EA109F4: variable 'v0' is possibly undefined

//----- (000000000EA1F473) ----------------------------------------------------
void sub_EA1F473()
{
  __asm { iret }
}
// EA1F474: control flows out of bounds to EA1F475

//----- (000000000EA7A74E) ----------------------------------------------------
char __fastcall sub_EA7A74E()
{
  char v0; // cf
  char v1; // al
  __int64 v2; // rbp

  *(_BYTE *)(v2 - 1446354696) -= v0 + 14;
  return v1 - 92;
}
// EA7A74F: variable 'v2' is possibly undefined
// EA7A74F: variable 'v0' is possibly undefined
// EA7A757: variable 'v1' is possibly undefined

//----- (000000000EB3632D) ----------------------------------------------------
unsigned __int32 __fastcall sub_EB3632D(__int64 a1, unsigned __int16 a2)
{
  return __indword(a2);
}

//----- (000000000EBF4F9C) ----------------------------------------------------
void __fastcall sub_EBF4F9C(__int64 a1)
{
  do
    --a1;
  while ( a1 );
}

//----- (000000000EC8F68E) ----------------------------------------------------
__int64 __fastcall sub_EC8F68E()
{
  __int64 result; // rax

  __outdword(0xE8u, result);
  return result;
}
// EC8F696: variable 'result' is possibly undefined
// EC8F68E: using guessed type __int64 __fastcall sub_EC8F68E();

//----- (000000000ECB548C) ----------------------------------------------------
void __fastcall sub_ECB548C(__int64 a1, int a2)
{
  int v2; // eax
  _DWORD *v3; // rdi

  *v3 = v2;
  *(_BYTE *)(unsigned int)(a2 + 15) = a2;
  MEMORY[0x866D4CF4] <<= 11;
  __asm { iret }
}
// ECB549E: control flows out of bounds to ECB549F
// ECB548C: variable 'v2' is possibly undefined
// ECB548C: variable 'v3' is possibly undefined

//----- (000000000ECED386) ----------------------------------------------------
void __fastcall __noreturn sub_ECED386(__int64 a1, unsigned __int16 a2)
{
  _BYTE *v2; // rsi

  MEMORY[0x7B7BA6F8] = *v2;
  __indword(a2);
  __asm { fstp    st(2) }
  __halt();
}
// ECED39A: variable 'v2' is possibly undefined

//----- (000000000ECF0AB1) ----------------------------------------------------
void __fastcall sub_ECF0AB1()
{
  _DWORD *v0; // rdi

  *v0 *= 2;
  __asm { iret }
}
// ECF0AB7: control flows out of bounds to ECF0AB8
// ECF0AB3: variable 'v0' is possibly undefined

//----- (000000000ED18463) ----------------------------------------------------
void __noreturn sub_ED18463()
{
  __halt();
}
// ED18463: using guessed type void __fastcall __noreturn sub_ED18463();

//----- (000000000EFDB2B0) ----------------------------------------------------
void __fastcall __noreturn sub_EFDB2B0()
{
  char v0; // cf
  unsigned int v1; // eax
  __int64 v2; // rbx
  _DWORD *v3; // rdi

  *(void *__ptr32 *)((char *)&off_2A4E0235 + v2) = (void *__ptr32)((__PAIR64__(
                                                                      *(void *__ptr32 *)((char *)&off_2A4E0235 + v2),
                                                                      v1)
                                                                  - __PAIR64__(v1 - (v0 + *v3), (unsigned int)v0 + *v3)) >> 32);
  __halt();
}
// EFDB2B2: variable 'v1' is possibly undefined
// EFDB2B2: variable 'v2' is possibly undefined
// EFDB2B0: variable 'v0' is possibly undefined
// EFDB2B0: variable 'v3' is possibly undefined
// EFDB2B0: using guessed type void __fastcall __noreturn sub_EFDB2B0();
// 2A4E0235: using guessed type void *__ptr32 off_2A4E0235;

//----- (000000000F04889E) ----------------------------------------------------
void __noreturn sub_F04889E()
{
  __halt();
}
// F04889E: using guessed type void __fastcall __noreturn sub_F04889E();

//----- (000000000F0D121A) ----------------------------------------------------
void sub_F0D121A()
{
  __asm { retf }
}
// F0D121B: unbalanced stack, ignored a potential tail call

//----- (000000000F0E4840) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_F0E4840(__int64 a1, __int64 a2)
{
  char v2; // cf
  int v3; // eax
  char v4; // bh
  __int64 v5; // [rsp-8h] [rbp-8h]
  void *retaddr; // [rsp+0h] [rbp+0h]

  *(_BYTE *)(a2 - 75) = v4;
  MEMORY[0xCA7E63936B6FF81E] = v3;
  MK_FP((_WORD)retaddr, retaddr)(v5, (unsigned int)-v2);
}
// F0E4846: positive sp value 8 has been found
// F0E4846: variable 'v4' is possibly undefined
// F0E484B: variable 'v3' is possibly undefined
// F0E485E: variable 'v5' is possibly undefined
// F0E4849: variable 'v2' is possibly undefined

//----- (000000000F4C4F2D) ----------------------------------------------------
void __fastcall sub_F4C4F2D()
{
  _BYTE *v0; // rdi
  _BYTE *v1; // rsi

  *v0 = *v1;
  __asm { iret }
}
// F4C4F36: control flows out of bounds to F4C4F37
// F4C4F2D: variable 'v1' is possibly undefined
// F4C4F2D: variable 'v0' is possibly undefined

//----- (000000000F4D3575) ----------------------------------------------------
void __fastcall sub_F4D3575()
{
  char v0; // cf
  __int64 v1; // rsi
  char v2; // r10

  byte_2DAB547B[v1] += v2 + v0;
}
// F4D3575: variable 'v2' is possibly undefined
// F4D3575: variable 'v0' is possibly undefined
// F4D3575: variable 'v1' is possibly undefined

//----- (000000000F591F2A) ----------------------------------------------------
void sub_F591F2A()
{
  __asm { iret }
}
// F591F2E: control flows out of bounds to F591F2F

//----- (000000000F595C37) ----------------------------------------------------
void __fastcall sub_F595C37(int a1)
{
  char v1; // cf
  int v2; // eax
  int v3; // ebx
  __int64 v4; // rdi
  _BYTE *v5; // rax
  unsigned __int64 v6; // kr00_8
  char v7; // t0
  _BYTE *v8; // roff

  v5 = (_BYTE *)((__CFADD__(v1, v2) | __CFADD__(v1 + v2, 1838519880)) + (unsigned int)v1 + v2 + 1838519880 + 1337316942);
  v6 = __readeflags();
  v8 = v5;
  v7 = (char)v5;
  LOBYTE(v5) = *v5;
  *v8 = v7;
  *(_DWORD *)(v4 + 125) += (_DWORD)v5;
  byte_100A1F28[-81] += BYTE1(v5);
  *(_DWORD *)(v6 + 92) += v3;
  *(_DWORD *)&byte_AA01AF[(unsigned int)(a1 + v4) + 8] += a1 + v4 + 8;
  __asm { iret }
}
// F595C71: control flows out of bounds to F595C72
// F595C39: variable 'v1' is possibly undefined
// F595C39: variable 'v2' is possibly undefined
// F595C4B: variable 'v4' is possibly undefined
// F595C59: variable 'v3' is possibly undefined
// 100A1F28: using guessed type _BYTE byte_100A1F28[5];

//----- (000000000F5BCBE4) ----------------------------------------------------
__int64 __fastcall sub_F5BCBE4(__int64 a1)
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])(a1, 4125943207i64);
}

//----- (000000000F5BEC47) ----------------------------------------------------
void __fastcall __noreturn sub_F5BEC47(__int64 a1, unsigned __int16 a2)
{
  char v2; // cf
  char v3; // al

  __outbyte(a2, v3 - (v2 + 23));
  *(_BYTE *)(a1 - 1667150435) -= 15;
  __halt();
}
// F5BEC4E: variable 'v3' is possibly undefined
// F5BEC4E: variable 'v2' is possibly undefined

//----- (000000000F60B417) ----------------------------------------------------
void sub_F60B417()
{
  __asm { retf }
}
// F60B418: unbalanced stack, ignored a potential tail call

//----- (000000000F64D237) ----------------------------------------------------
void __noreturn sub_F64D237()
{
  __halt();
}
// F64D237: using guessed type void __fastcall __noreturn sub_F64D237();

//----- (000000000F6D89FC) ----------------------------------------------------
void sub_F6D89FC()
{
  __asm { iret }
}
// F6D89FE: control flows out of bounds to F6D89FF

//----- (000000000F7ACDDA) ----------------------------------------------------
void __fastcall __noreturn sub_F7ACDDA(__int64 a1)
{
  char v1; // sp
  char v2; // al
  char v3; // bl
  __int64 v4; // rbp
  __int64 v5; // rsi

  while ( 1 )
  {
    byte_101EDD44[v4] ^= v2;
    if ( a1 )
      break;
    v3 &= byte_38C3D96D[v5];
    v2 = v1;
  }
  __indword(0x18u);
  __halt();
}
// F7ACDDC: variable 'v2' is possibly undefined
// F7ACDDC: variable 'v4' is possibly undefined
// F7ACDCA: variable 'v5' is possibly undefined
// F7ACDCA: variable 'v3' is possibly undefined
// F7ACDD9: variable 'v1' is possibly undefined

//----- (000000000F95B9E9) ----------------------------------------------------
void sub_F95B9E9()
{
  __asm { iret }
}
// F95B9EA: control flows out of bounds to F95B9EB

//----- (000000000FA52A54) ----------------------------------------------------
__int64 __fastcall sub_FA52A54(__int64 a1, __int64 a2)
{
  char v2; // cf
  char v3; // ah
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  BYTE1(a2) -= v2 + v3;
  return MK_FP(retaddr[0], retaddr[0])(a1, a2);
}
// FA52A54: variable 'v2' is possibly undefined
// FA52A54: variable 'v3' is possibly undefined

//----- (000000000FBABC54) ----------------------------------------------------
void __noreturn sub_FBABC54()
{
  __halt();
}
// FBABC54: using guessed type void __fastcall __noreturn sub_FBABC54();

//----- (000000000FD6396F) ----------------------------------------------------
__int64 sub_FD6396F()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000000FD83F6A) ----------------------------------------------------
char __fastcall sub_FD83F6A()
{
  __int64 v0; // rsi

  return *(_BYTE *)v0;
}
// FD83F6A: variable 'v0' is possibly undefined

//----- (000000000FD9C489) ----------------------------------------------------
void __fastcall sub_FD9C489(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11)
{
  __asm { jmp     [rsp+rdx*4+8+arg_55] }
}
// FD9C494: unbalanced stack, ignored a potential tail call

//----- (000000000FE39FEB) ----------------------------------------------------
__int64 __fastcall sub_FE39FEB(__int64 a1, unsigned __int16 a2)
{
  _DWORD *v2; // rax
  int v3; // ebp
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  LOBYTE(v2) = __inbyte(a2);
  *v2 ^= v3;
  LOBYTE(a1) = a1 - HIBYTE(a2);
  return MK_FP(retaddr[0], retaddr[0])(a1);
}
// FE39FED: variable 'v3' is possibly undefined
// FE39FED: variable 'v2' is possibly undefined

//----- (000000000FE5B190) ----------------------------------------------------
__int64 __fastcall sub_FE5B190()
{
  __int64 result; // rax
  _DWORD *v1; // rdi

  *v1 = result;
  MEMORY[0x8CB5E221FEC1CC11] = result;
  return result;
}
// FE5B191: variable 'result' is possibly undefined
// FE5B191: variable 'v1' is possibly undefined
// FE5B190: using guessed type __int64 __fastcall sub_FE5B190();

//----- (000000001011C674) ----------------------------------------------------
__int64 __fastcall sub_1011C674(__int64 a1)
{
  unsigned int v1; // eax
  __int64 v2; // rbp
  unsigned int *v3; // rdi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_DWORD *)(a1 + 2 * v2) += (_DWORD)v3 + 4 + (*v3 < v1);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 1011C674: variable 'v3' is possibly undefined
// 1011C674: variable 'v1' is possibly undefined
// 1011C675: variable 'v2' is possibly undefined

//----- (000000001021341F) ----------------------------------------------------
void __fastcall sub_1021341F(
        __int64 a1,
        char a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  __int64 v66; // rdi

  *(_BYTE *)(2 * (v66 + 4) - 413065055) -= a2;
  __asm { retnq   68EDh }
}
// 10213436: control flows out of bounds to 1021343A
// 10213425: variable 'v66' is possibly undefined
// 1021341F: too many input arguments, some ignored

//----- (000000001028C411) ----------------------------------------------------
void __noreturn sub_1028C411()
{
  __halt();
}
// 1028C411: using guessed type void __fastcall __noreturn sub_1028C411();

//----- (0000000010304E26) ----------------------------------------------------
void __fastcall __noreturn sub_10304E26(char a1, int *_RDX)
{
  unsigned __int8 v2; // al

  __asm
  {
    outsd
    rcl     byte ptr [rdi], 1
  }
  *_RDX >>= a1;
  __asm { frstor  byte ptr [rdx] }
  *(_DWORD *)(_RDI - 70) = __ROR4__(*(_DWORD *)(_RDI - 70), a1);
  __outbyte(0xA7u, v2);
  __halt();
}
// 10304E30: variable '_RDI' is possibly undefined
// 10304E33: variable 'v2' is possibly undefined

//----- (00000000103DC5C7) ----------------------------------------------------
void __fastcall sub_103DC5C7(__int64 _RCX)
{
  __asm
  {
    fnsave  byte ptr [rcx+rcx*4-62h]
    repne retf
  }
}
// 103DC5CC: control flows out of bounds to 103DC5CE

//----- (000000001044BC6C) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_1044BC6C(char _CL)
{
  __int64 v1; // rax
  char v2; // dh
  int v4; // edi

  __asm { rcr     qword ptr [rbx], cl }
  *(_DWORD *)(_RBX - 53) -= ((v1 & 0x100) != 0) + v4;
  *(_BYTE *)(v1 - 744976810) ^= v2;
  __halt();
}
// 1044BC71: positive sp value 8 has been found
// 1044BC71: variable '_RBX' is possibly undefined
// 1044BC6F: variable 'v1' is possibly undefined
// 1044BC71: variable 'v4' is possibly undefined
// 1044BC74: variable 'v2' is possibly undefined

//----- (000000001050DBF1) ----------------------------------------------------
void __fastcall sub_1050DBF1(__int64 a1, __int64 a2)
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __asm { outsb }
  LOBYTE(a2) = a2 - BYTE1(a1);
  MK_FP(retaddr[0], retaddr[0])(a1, a2);
}

//----- (0000000010561688) ----------------------------------------------------
__int64 sub_10561688()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __outdword(0xC4u, MEMORY[0x10C9443FC944B349]);
  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (00000000105EEBF1) ----------------------------------------------------
void __fastcall sub_105EEBF1(__int64 a1, __int64 a2)
{
  __asm { jmp     qword ptr [rdx+rsi*2-4C3C683Fh] }
}
// 105EEBF4: unbalanced stack, ignored a potential tail call

//----- (000000001074B025) ----------------------------------------------------
__int64 __fastcall sub_1074B025(__int64 a1)
{
  int v1; // eax
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __asm { leaveq }
  BYTE1(a1) = 9;
  return MK_FP(retaddr[0], retaddr[0])(a1, (unsigned int)(v1 >> 31));
}
// 1074B029: variable 'v1' is possibly undefined

//----- (00000000109EC198) ----------------------------------------------------
__int64 __fastcall sub_109EC198(__int64 a1)
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])(a1, 1211164552i64);
}

//----- (0000000010B6F930) ----------------------------------------------------
__int64 __fastcall sub_10B6F930(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __outbyte(a2, v2);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 10B6F930: variable 'v2' is possibly undefined

//----- (0000000010BBAAF6) ----------------------------------------------------
__int16 __fastcall sub_10BBAAF6(__int64 a1, unsigned int a2)
{
  unsigned int v2; // eax
  unsigned int v3; // ebx
  char v4; // fl
  __int16 result; // ax

  LOBYTE(result) = __PAIR64__(a2, v2) / v3;
  HIBYTE(result) = v4;
  return result;
}
// 10BBAAF6: variable 'v2' is possibly undefined
// 10BBAAF6: variable 'v3' is possibly undefined

//----- (0000000010BD825D) ----------------------------------------------------
__int64 __fastcall sub_10BD825D()
{
  unsigned int v0; // eax
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __outdword(0x7Fu, v0);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 10BD825D: variable 'v0' is possibly undefined

//----- (0000000010C65F63) ----------------------------------------------------
void __fastcall sub_10C65F63()
{
  __int32 v0; // eax
  volatile __int32 *v1; // rdi

  _InterlockedExchange(v1, v0);
  __asm { iret }
}
// 10C65F6C: control flows out of bounds to 10C65F6D
// 10C65F65: variable 'v1' is possibly undefined
// 10C65F65: variable 'v0' is possibly undefined

//----- (0000000010D2D123) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_10D2D123(__int64 a1, unsigned __int16 a2)
{
  unsigned int v2; // eax

  __asm { fstp    st(4) }
  __outdword(a2, v2);
  __inbyte(1u);
  __asm { iret }
}
// 10D2D137: positive sp value 8 has been found
// 10D2D14B: control flows out of bounds to 10D2D14C
// 10D2D139: variable 'v2' is possibly undefined

//----- (0000000010EE0205) ----------------------------------------------------
void __fastcall sub_10EE0205(__int64 a1, __int64 a2)
{
  int v2; // ebp

  *(_DWORD *)(a2 - 33) -= v2;
  __asm { jmp     ds:(qword_2F9103AC - (qword_DF0F0+0A00h))[rcx] }
}
// 10EE0211: unbalanced stack, ignored a potential tail call
// 10EE020B: variable 'v2' is possibly undefined

//----- (0000000010EE7146) ----------------------------------------------------
__int64 __fastcall sub_10EE7146()
{
  int v0; // ebx
  __int64 v1; // r15
  _BYTE *v2; // rbp
  _BYTE *retaddr; // [rsp+0h] [rbp+0h]

  v2 = retaddr;
  __debugbreak();
  *(_DWORD *)(v2 - 117) -= v0;
  v2[91] = v0;
  return MK_FP(*(_WORD *)(v1 + 8), *(_QWORD *)v1)();
}
// 10EE7146: could not find valid save-restore pair for rbp
// 10EE7155: variable 'v0' is possibly undefined
// 10EE7163: variable 'v1' is possibly undefined
// 10EE7146: using guessed type __int64 __fastcall sub_10EE7146();

//----- (0000000010F316A6) ----------------------------------------------------
void __fastcall __noreturn sub_10F316A6(__int64 a1, unsigned __int16 a2)
{
  unsigned int v2; // eax

  LOBYTE(v2) = v2 - 127;
  __outdword(a2, v2);
  __halt();
}
// 10F316A8: variable 'v2' is possibly undefined

//----- (0000000010FE6FED) ----------------------------------------------------
__int64 __fastcall sub_10FE6FED(__int64 a1, unsigned int a2)
{
  return a2;
}

//----- (000000001103BA7E) ----------------------------------------------------
void __fastcall sub_1103BA7E()
{
  __asm { retn }
}
// 1103BA7F: unbalanced stack, ignored a potential tail call

//----- (00000000111C0931) ----------------------------------------------------
void __fastcall sub_111C0931()
{
  char v0; // cf
  unsigned __int64 v1; // rax
  char v2; // ch
  char v3; // bl

  if ( !__SETP__(v2 + v0 + v3, 0) )
  {
    __outqword(0xF9u, v1);
    _disable();
    __asm { iret }
    JUMPOUT(0x111C0940i64);
  }
  __asm { iret }
  JUMPOUT(0x111C08F8i64);
}
// 111C093F: control flows out of bounds to 111C0940
// 111C08F7: control flows out of bounds to 111C08F8
// 111C0932: variable 'v2' is possibly undefined
// 111C0932: variable 'v0' is possibly undefined
// 111C0932: variable 'v3' is possibly undefined
// 111C0939: variable 'v1' is possibly undefined

//----- (0000000011340C31) ----------------------------------------------------
void sub_11340C31()
{
  __indword(0x4Au);
  __asm { iret }
}
// 11340C39: control flows out of bounds to 11340C3A

//----- (000000001156C5AD) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_1156C5AD()
{
  int v0; // eax
  _BYTE *v1; // rdi
  unsigned int v2; // esi

  *v1 = v0;
  *((_DWORD *)&unk_30C33BA1 + 1) = *(_DWORD *)(v0 & v2);
  __halt();
}
// 1156C5BD: positive sp value 8 has been found
// 1156C5AD: variable 'v0' is possibly undefined
// 1156C5AD: variable 'v1' is possibly undefined
// 1156C5AE: variable 'v2' is possibly undefined
// 1156C5AD: using guessed type void __fastcall __noreturn sub_1156C5AD();

//----- (00000000116C6677) ----------------------------------------------------
void __fastcall sub_116C6677(__int64 a1, unsigned __int16 a2)
{
  char v2; // al

  MEMORY[0xFF0B3D4AEE06B5BB] = v2;
  _AL = __inbyte(a2);
  __asm
  {
    icebp
    xlat
    outsd
    retf
  }
}
// 116C6689: unbalanced stack, ignored a potential tail call
// 116C667A: variable 'v2' is possibly undefined

//----- (000000001186E701) ----------------------------------------------------
void __fastcall sub_1186E701(__int64 a1, __int64 a2, __int64 a3)
{
  __asm { retf }
}
// 1186E703: unbalanced stack, ignored a potential tail call

//----- (0000000011960741) ----------------------------------------------------
__int64 sub_11960741()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000011963F6A) ----------------------------------------------------
void __noreturn sub_11963F6A()
{
  __halt();
}
// 11963F6A: using guessed type void __fastcall __noreturn sub_11963F6A();

//----- (0000000011AC8A7E) ----------------------------------------------------
__int64 __fastcall sub_11AC8A7E()
{
  int v0; // eax
  _DWORD *v1; // rdi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *v1 = v0;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 11AC8AB8: variable 'v0' is possibly undefined
// 11AC8AB8: variable 'v1' is possibly undefined

//----- (0000000011C4477E) ----------------------------------------------------
__int64 __fastcall sub_11C4477E(__int64 a1, unsigned __int16 a2)
{
  int v2; // edi
  _DWORD *v3; // rsi
  __int16 v4; // ax
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  LOBYTE(v4) = __inbyte(a2);
  __asm { fstp9   st(1) }
  *v3 += v2;
  HIBYTE(v4) = 113;
  __outdword(0x4Du, v4);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 11C44787: variable 'v2' is possibly undefined
// 11C44787: variable 'v3' is possibly undefined

//----- (0000000011C4C1D2) ----------------------------------------------------
void __fastcall sub_11C4C1D2(__int64 a1, __int64 a2, volatile __int64 *a3)
{
  char v3; // al
  __int64 v4; // r13

  _InterlockedExchange64(a3, v4);
  MEMORY[0x39F856F77BFFDA17] = v3;
  _RSI = 1600051732i64;
  __asm
  {
    outsd
    iret
  }
}
// 11C4C232: control flows out of bounds to 11C4C233
// 11C4C1B9: variable 'v4' is possibly undefined
// 11C4C1BC: variable 'v3' is possibly undefined

//----- (0000000011E381EF) ----------------------------------------------------
void __fastcall sub_11E381EF()
{
  __asm { retn }
}
// 11E381F0: unbalanced stack, ignored a potential tail call

//----- (0000000011FFA662) ----------------------------------------------------
void __fastcall sub_11FFA662(__int64 a1, __int64 a2)
{
  _BYTE *v2; // rax
  char v3; // bl
  __int64 v4; // r14

  LOBYTE(a2) = byte_31AE81E2[v4] + a2;
  *v2 ^= v3;
  __asm { retn }
}
// 11FFA674: unbalanced stack, ignored a potential tail call
// 11FFA663: variable 'v4' is possibly undefined
// 11FFA66C: variable 'v3' is possibly undefined
// 11FFA66C: variable 'v2' is possibly undefined

//----- (00000000121B5A5C) ----------------------------------------------------
void __noreturn sub_121B5A5C()
{
  __readeflags();
  __readeflags();
  __halt();
}
// 121B5A5C: using guessed type void __fastcall __noreturn sub_121B5A5C();

//----- (000000001220D87F) ----------------------------------------------------
void __fastcall sub_1220D87F()
{
  char v0; // cf
  int v1; // ebx
  __int64 v2; // rbp
  unsigned __int64 v3; // kr00_8

  *(_DWORD *)(v2 - 1989923740) += v1 + v0;
  _disable();
  v3 = __readeflags();
  __asm { retf }
}
// 1220D88B: unbalanced stack, ignored a potential tail call
// 1220D87F: variable 'v1' is possibly undefined
// 1220D87F: variable 'v0' is possibly undefined
// 1220D87F: variable 'v2' is possibly undefined

//----- (00000000122F212E) ----------------------------------------------------
void __fastcall sub_122F212E(__int64 a1, __int16 _DX)
{
  __asm
  {
    insb
    iret
  }
}
// 122F2130: control flows out of bounds to 122F2131

//----- (0000000012301CF7) ----------------------------------------------------
void sub_12301CF7()
{
  __asm { iret }
}
// 12301CF8: control flows out of bounds to 12301CF9

//----- (00000000124619F9) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_124619F9(__int64 a1)
{
  char v2; // zf
  _DWORD *v3; // rsi
  __int64 v4; // rcx
  __int64 v6; // [rsp-8h] [rbp-8h]

  v4 = a1 - 1;
  if ( !v2 || !v4 )
  {
    *v3 ^= v6;
    __asm { retf }
  }
  return ((__int64 (*)(void))off_1A8B5E9B)();
}
// 124619FC: positive sp value 8 has been found
// 12461A09: unbalanced stack, ignored a potential tail call
// 124619FE: variable 'v2' is possibly undefined
// 12461A00: variable 'v6' is possibly undefined
// 12461A00: variable 'v3' is possibly undefined
// 1A8B5E9B: using guessed type void *__ptr32 off_1A8B5E9B;

//----- (000000001249251C) ----------------------------------------------------
void __fastcall sub_1249251C(_DWORD *_RCX)
{
  int *v2; // r10

  __readeflags();
  *v2 = ~*v2;
  _EDX = -1845639119 * *_RCX;
  __asm
  {
    rcr     byte ptr [rsi], cl
    insd
    retf
  }
}
// 12492523: variable 'v2' is possibly undefined

//----- (000000001287ABE6) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_1287ABE6(int a1, unsigned __int16 _DX)
{
  _DWORD *v2; // rax
  _DWORD *v3; // rdi
  _DWORD *v4; // rsi
  unsigned __int16 v7; // dx
  __int64 v8; // rcx
  unsigned __int32 v9; // eax
  unsigned __int64 v10; // [rsp-8h] [rbp-8h]

  *v3 = *v4;
  *v2 += (_DWORD)v2;
  _RSI = &unk_3E8E5DBD;
  __writeeflags(v10);
  LOBYTE(v2) = __inbyte(_DX);
  *(_DWORD *)((char *)v2 - 1902247638) += (_DWORD)v2;
  __asm
  {
    outsb
    insb
  }
  v7 = MEMORY[0xBF204101];
  v8 = (unsigned int)v2 | a1;
  __asm { rcr     byte ptr cs:0FFFFFFFF9290AC0Fh, 1Ah }
  *v2 += (_DWORD)v2;
  *(_DWORD *)v8 |= (unsigned int)v2;
  v9 = (_DWORD)v2 - *v2;
  *(_DWORD *)(v8 + 31) |= v9;
  __outdword(v7, v9);
  _InterlockedExchange((volatile __int32 *)v8, v9);
  __asm { iret }
}
// 1287ABF6: positive sp value 8 has been found
// 1287AC5F: control flows out of bounds to 1287AC60
// 1287ABE6: variable 'v4' is possibly undefined
// 1287ABE6: variable 'v3' is possibly undefined
// 1287ABE7: variable 'v2' is possibly undefined
// 1287ABF5: variable 'v10' is possibly undefined

//----- (00000000129C61C6) ----------------------------------------------------
int __fastcall sub_129C61C6(__int64 a1, unsigned __int16 a2)
{
  __int64 v2; // rax
  int v3; // esp

  LODWORD(v2) = __indword(a2);
  *(int *)((char *)&dword_3D88A3C2 + v2) ^= v3;
  return v2;
}
// 129C61C7: variable 'v3' is possibly undefined
// 129C61C7: variable 'v2' is possibly undefined
// 3D88A3C2: using guessed type int dword_3D88A3C2;

//----- (0000000012BE8A3D) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_12BE8A3D()
{
  char v0; // cf
  char v1; // zf
  __int64 result; // rax

  if ( v0 | v1 )
    JUMPOUT(0x12BE89E4i64);
  *(_BYTE *)(result + 92) += 109;
  return result;
}
// 12BE89D9: positive sp value 8 has been found
// 12BE89DF: control flows out of bounds to 12BE89E4
// 12BE8A3D: variable 'v0' is possibly undefined
// 12BE8A3D: variable 'v1' is possibly undefined
// 12BE8A3F: variable 'result' is possibly undefined
// 12BE8A3D: using guessed type __int64 __fastcall sub_12BE8A3D();

//----- (0000000012C0119C) ----------------------------------------------------
void sub_12C0119C()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000012C8E07A) ----------------------------------------------------
char __fastcall sub_12C8E07A(char a1)
{
  char v1; // cf

  return a1 - (v1 - 33);
}
// 12C8E085: variable 'v1' is possibly undefined

//----- (0000000012CF291C) ----------------------------------------------------
void __noreturn sub_12CF291C()
{
  __halt();
}
// 12CF291C: using guessed type void __fastcall __noreturn sub_12CF291C();

//----- (0000000012EC2A92) ----------------------------------------------------
#error "12EC2A92: function frame is wrong (funcsize=0)"

//----- (0000000012F40457) ----------------------------------------------------
void __fastcall sub_12F40457(int a1)
{
  _DWORD *v1; // rdi

  *v1 += a1;
  __asm { iret }
}
// 12F40465: control flows out of bounds to 12F40466
// 12F4045E: variable 'v1' is possibly undefined

//----- (000000001300B8E1) ----------------------------------------------------
void sub_1300B8E1()
{
  __asm { iret }
}
// 1300B8E2: control flows out of bounds to 1300B8E3

//----- (00000000130E751B) ----------------------------------------------------
__int64 __fastcall sub_130E751B(__int64 a1, __int64 a2)
{
  __int64 v2; // rbx
  __int64 v3; // rbp
  bool v4; // cf
  __int64 result; // rax
  __int64 v6; // rdx

  v4 = (unsigned __int64)(-1003490277i64 * *(int *)(a2 + 4 * v2 + 122)) >> 32 != 0;
  result = (unsigned int)a2;
  v6 = (unsigned int)(-1003490277 * *(_DWORD *)(a2 + 4 * v2 + 122));
  *(_BYTE *)(v6 + 2 * v3 - 77) += BYTE1(v2) + v4;
  __outdword(0xC0u, result);
  return result;
}
// 130E751B: variable 'v2' is possibly undefined
// 130E7524: variable 'v3' is possibly undefined

//----- (000000001311A4AE) ----------------------------------------------------
void __fastcall sub_1311A4AE()
{
  _DWORD *v0; // rsi

  *v0 &= (unsigned int)&unk_14BE14DD;
  __asm { iret }
}
// 1311A4B4: control flows out of bounds to 1311A4B5
// 1311A4AE: variable 'v0' is possibly undefined

//----- (000000001315203F) ----------------------------------------------------
__int64 sub_1315203F()
{
  void *retaddr[2]; // [rsp+8h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000013254A6E) ----------------------------------------------------
void sub_13254A6E()
{
  __asm { retf }
}
// 13254A6F: unbalanced stack, ignored a potential tail call

//----- (000000001328E0A5) ----------------------------------------------------
void __fastcall sub_1328E0A5(__int64 a1, unsigned __int16 a2)
{
  __int64 v2; // rbx
  __int64 v3; // rdi
  _BYTE *v4; // rsi
  int v5; // esp

  *(_BYTE *)v3 = *v4;
  LOBYTE(v2) = 49;
  __asm { icebp }
  __outdword(a2, 0x49A824E1u);
  *(_DWORD *)(v3 + 1) |= v5;
  __asm { jmp     qword ptr [rbx+1Dh] }
}
// 1328E0C7: unbalanced stack, ignored a potential tail call
// 1328E0AA: variable 'v4' is possibly undefined
// 1328E0AA: variable 'v3' is possibly undefined
// 1328E0C2: variable 'v5' is possibly undefined
// 1328E0C7: variable 'v2' is possibly undefined

//----- (00000000132D7FEC) ----------------------------------------------------
void __fastcall sub_132D7FEC()
{
  int v0; // eax

  MEMORY[0xEB6FEA6ABFD4CD9F] = v0;
  __asm { retf }
}
// 132D7FFD: unbalanced stack, ignored a potential tail call
// 132D7FED: variable 'v0' is possibly undefined

//----- (0000000013320E2D) ----------------------------------------------------
void __noreturn sub_13320E2D()
{
  __halt();
}
// 13320E2D: using guessed type void __fastcall __noreturn sub_13320E2D();

//----- (0000000013361CB4) ----------------------------------------------------
#error "13361CB4: stack frame is too big (funcsize=0)"

//----- (0000000013380A4C) ----------------------------------------------------
void __fastcall sub_13380A4C()
{
  __int64 v0; // rdi

  while ( *(__int16 *)(v0 - 48) <= -19299 )
    ;
  __asm { iret }
}
// 13380A63: control flows out of bounds to 13380A64
// 13380A52: variable 'v0' is possibly undefined

//----- (00000000134830ED) ----------------------------------------------------
char __fastcall sub_134830ED()
{
  unsigned __int8 v0; // al
  char v1; // bl

  __outbyte(0x40u, v0);
  return v1;
}
// 134830EE: variable 'v0' is possibly undefined
// 134830F0: variable 'v1' is possibly undefined

//----- (00000000138BA51E) ----------------------------------------------------
void __fastcall __noreturn sub_138BA51E(__int64 a1, int a2)
{
  __int64 v2; // rbx
  unsigned int v3; // edi
  __int64 v4; // rsi

  *(_DWORD *)(v2 - 121) += a2;
  *(int *)(v4 - 93) >>= 1;
  *(_BYTE *)(v3 - 111i64) -= BYTE1(v2);
  __halt();
}
// 138BA523: variable 'v2' is possibly undefined
// 138BA526: variable 'v4' is possibly undefined
// 138BA522: variable 'v3' is possibly undefined

//----- (00000000138F42F3) ----------------------------------------------------
__int64 __fastcall sub_138F42F3(unsigned int a1, _BYTE *_RDX)
{
  char v2; // cf
  unsigned int v3; // eax
  int v4; // ebp
  _DWORD *v5; // rdi
  double v6; // st7
  unsigned __int64 v7; // rax
  unsigned int v8; // et0
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *v5 -= v2 + v4;
  v8 = v3;
  v7 = a1;
  __asm { rcr     dword ptr ds:byte_18443305[rdx], 1 }
  LOBYTE(v7) = a1 + 115;
  *(_WORD *)v7 = (__int16)v6;
  *_RDX = __ROR1__(*_RDX, v8);
  LOBYTE(_RDX) = __ROR1__((_BYTE)_RDX, 6);
  return MK_FP(retaddr[0], retaddr[0])(v8, _RDX);
}
// 138F42F3: variable 'v5' is possibly undefined
// 138F42F3: variable 'v2' is possibly undefined
// 138F42F3: variable 'v4' is possibly undefined
// 138F42F5: variable 'v3' is possibly undefined
// 138F42FE: variable 'v6' is possibly undefined

//----- (000000001392864A) ----------------------------------------------------
#error "13928652: cannot convert to microcode (funcsize=6)"

//----- (00000000139D7E2E) ----------------------------------------------------
void __fastcall sub_139D7E2E(__int64 a1, __int16 _DX)
{
  __asm
  {
    insb
    iret
  }
}
// 139D7E2F: control flows out of bounds to 139D7E31

//----- (0000000013B52CD8) ----------------------------------------------------
void __noreturn sub_13B52CD8()
{
  __halt();
}
// 13B52CD8: using guessed type void __fastcall __noreturn sub_13B52CD8();

//----- (0000000013E49C86) ----------------------------------------------------
void __fastcall sub_13E49C86(char a1, __int64 a2)
{
  __asm { outsd }
  *(int *)(a2 + 105) >>= a1;
  __asm { iret }
}
// 13E49C91: control flows out of bounds to 13E49C92

//----- (0000000013EE721B) ----------------------------------------------------
void __noreturn sub_13EE721B()
{
  __halt();
}
// 13EE721B: using guessed type void __fastcall __noreturn sub_13EE721B();

//----- (000000001422A97A) ----------------------------------------------------
void sub_1422A97A()
{
  __asm { iret }
}
// 1422A986: control flows out of bounds to 1422A987

//----- (0000000014282D84) ----------------------------------------------------
int __fastcall sub_14282D84()
{
  int result; // eax

  return (__int16)result;
}
// 14282D84: variable 'result' is possibly undefined

//----- (00000000142AADEA) ----------------------------------------------------
void __fastcall sub_142AADEA(__int64 a1, __int64 a2)
{
  int v2; // esi

  *(_DWORD *)(a2 - 19) += v2;
}
// 142AADEA: variable 'v2' is possibly undefined

//----- (00000000144E5A10) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_144E5A10(__int64 a1, _BYTE *a2, __int64 a3)
{
  char v5; // cf
  __int16 v6; // bx
  _DWORD *v7; // rdi
  __int64 v8; // rsi
  char v9; // tt
  char v10; // tt
  __int64 result; // rax
  char v12; // cf
  bool v13; // tt
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  v9 = v5 + v6;
  v5 = *a2 < (unsigned __int8)(v5 + v6);
  *a2 -= v9;
  v10 = v5;
  v5 = __CFADD__(v5, MEMORY[0x7A10386A]) | __CFADD__(HIBYTE(v6), v5 + MEMORY[0x7A10386A]);
  MEMORY[0x7A10386A] += HIBYTE(v6) + v10;
  *(_WORD *)(9 * v8 - 90) = __SS__;
  result = -15571353 - ((unsigned int)v5 + 1913033610);
  v13 = (unsigned int)v5 + 1913033610 > 0xFF126667;
  v12 = __CFADD__(v13, a2[24]) | __CFADD__(103 - (v5 - 118), v13 + a2[24]);
  a2[24] += result + v13;
  if ( v12 )
  {
    *v7 -= v12 + (_DWORD)a2;
    __asm
    {
      repne mov al, 0E4h
      rep mov ebx, 764AB944h
    }
    JUMPOUT(0x144E59F7i64);
  }
  if ( *(_BYTE *)result > (unsigned __int8)v6 )
    return MK_FP(retaddr[0], retaddr[0])(a1, a2, a3, result);
  return result;
}
// 144E5A33: positive sp value 8 has been found
// 144E59F4: control flows out of bounds to 144E59F7
// 144E5A10: variable 'v5' is possibly undefined
// 144E5A10: variable 'v6' is possibly undefined
// 144E5A1D: variable 'v8' is possibly undefined
// 144E59DE: variable 'v7' is possibly undefined

//----- (000000001456AA47) ----------------------------------------------------
__int64 __fastcall sub_1456AA47(__int64 a1, __int64 a2)
{
  _BYTE *v2; // rbx

  BYTE1(a2) -= *v2;
  _enable();
  return MK_FP(*(_WORD *)(a2 - 598702833 + 4), *(unsigned int *)(a2 - 598702833))();
}
// 1456AA47: variable 'v2' is possibly undefined

//----- (0000000014587EF8) ----------------------------------------------------
void __fastcall sub_14587EF8(__int64 _RCX)
{
  int v1; // ebx
  __int64 v2; // rdi
  char v3; // sp

  __asm { frstor  byte ptr [rcx] }
  *(_DWORD *)v2 -= v1;
  __readeflags();
  LODWORD(_RCX) = _RCX & ~(1 << v3);
  (*(void (__fastcall **)(__int64))(v2 + 38))(_RCX);
  __asm { iret }
}
// 14587F22: control flows out of bounds to 14587F23
// 14587F05: ignored the value written to the shadow area of the succeeding call
// 14587EF8: ignored the value written to the shadow area of the succeeding call
// 14587EFC: variable 'v2' is possibly undefined
// 14587EFC: variable 'v1' is possibly undefined
// 14587F06: variable 'v3' is possibly undefined

//----- (000000001481D865) ----------------------------------------------------
void sub_1481D865()
{
  __asm { retfq   9615h }
}
// 1481D871: control flows out of bounds to 1481D875

//----- (00000000148D5C46) ----------------------------------------------------
#error "148D5C46: stack frame is too big (funcsize=0)"

//----- (00000000148E486C) ----------------------------------------------------
void __noreturn sub_148E486C()
{
  __indword(7u);
  __halt();
}
// 148E486C: using guessed type void __fastcall __noreturn sub_148E486C();

//----- (0000000014B4594C) ----------------------------------------------------
__int64 __fastcall sub_14B4594C(__int64 _RCX)
{
  __int64 v1; // rdi
  __int64 v2; // rsi
  __int64 v3; // r15
  __int64 result; // rax

  result = v3;
  __asm { rcr     dword ptr [rcx-0B6AD846h], 0EBh }
  *(_DWORD *)(v1 + 91) &= v3;
  *(_DWORD *)(v2 + 1356309512) ^= 0xE957139C;
  return result;
}
// 14B4594D: variable 'v3' is possibly undefined
// 14B45960: variable 'v1' is possibly undefined
// 14B45963: variable 'v2' is possibly undefined

//----- (0000000014C8B83B) ----------------------------------------------------
char __fastcall sub_14C8B83B()
{
  char v0; // cf
  char v1; // al

  return v0 + v1 + 16;
}
// 14C8B83B: variable 'v0' is possibly undefined
// 14C8B83B: variable 'v1' is possibly undefined

//----- (0000000014D550E2) ----------------------------------------------------
void __fastcall __noreturn sub_14D550E2(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  int *v4; // rax

  *(_QWORD *)(a2 + 2107078475) -= a4;
  __outbyte(0x33u, __SPAIR64__(a2, (unsigned int)v4) / *v4);
  __halt();
}
// 14D550EA: variable 'v4' is possibly undefined

//----- (0000000014DF7520) ----------------------------------------------------
void sub_14DF7520()
{
  __asm { retn }
}

//----- (0000000014EA2EEF) ----------------------------------------------------
void sub_14EA2EEF()
{
  __indword(0x2Eu);
  __asm { retnq }
}
// 14EA2EF8: control flows out of bounds to 14EA2EFB

//----- (0000000014F97FCF) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_14F97FCF(__int64 a1)
{
  int v1; // eax
  char v3; // cl

  v1 = MEMORY[0x62710621](a1);
  _RDX = (unsigned int)(v1 >> 31);
  __asm { insd }
  __outbyte(0xD3u, v1);
  __asm { enterq  0FFFFFFFFFFFFE62Fh, 2Ch }
  *(_BYTE *)_RDX = __ROR1__(*(_BYTE *)_RDX, v3);
  JUMPOUT(0x57134791i64);
}
// 14F97FE2: positive sp value 1972 has been found
// 14F97FE4: control flows out of bounds to 57134791
// 14F97FE2: variable 'v3' is possibly undefined

//----- (0000000015016C8A) ----------------------------------------------------
void __fastcall sub_15016C8A()
{
  int v0; // ebp
  __int64 v1; // rsi

  *(_DWORD *)(v1 + 99) ^= v0;
  __asm { retf }
}
// 15016C95: unbalanced stack, ignored a potential tail call
// 15016C8B: variable 'v0' is possibly undefined
// 15016C8B: variable 'v1' is possibly undefined

//----- (00000000150D578B) ----------------------------------------------------
void __fastcall sub_150D578B()
{
  __asm { retf }
}
// 150D578C: unbalanced stack, ignored a potential tail call

//----- (000000001521E8A9) ----------------------------------------------------
__int64 __fastcall sub_1521E8A9()
{
  int v0; // eax
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  if ( v0 > (int)&dword_3CE5B0A4 )
    JUMPOUT(0x1521E85Ai64);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 1521E858: control flows out of bounds to 1521E85A
// 1521E8AE: variable 'v0' is possibly undefined
// 3CE5B0A4: using guessed type int;

//----- (000000001538EDFB) ----------------------------------------------------
void __fastcall __noreturn sub_1538EDFB(__int64 a1, char a2)
{
  _BYTE *v2; // rbx

  *v2 = a2;
  __halt();
}
// 1538EE00: variable 'v2' is possibly undefined

//----- (0000000015399EC6) ----------------------------------------------------
void __noreturn sub_15399EC6()
{
  __asm { int     17h }
  JUMPOUT(0xFFFFFFFFF4C413A7ui64);
}
// 15399EC9: control flows out of bounds to FFFFFFFFF4C413A7
// 15399EC6: using guessed type void __fastcall __noreturn sub_15399EC6();

//----- (0000000015461427) ----------------------------------------------------
void sub_15461427()
{
  __asm { iret }
}
// 15461429: control flows out of bounds to 1546142A

//----- (0000000015730011) ----------------------------------------------------
void sub_15730011()
{
  __asm { iret }
}
// 15730019: control flows out of bounds to 1573001A

//----- (00000000157C3BE8) ----------------------------------------------------
void __fastcall __noreturn sub_157C3BE8()
{
  char v0; // pf

  if ( !v0 )
    __halt();
  __halt();
}
// 157C3BE9: variable 'v0' is possibly undefined
// 157C3BE8: using guessed type void __fastcall __noreturn sub_157C3BE8();

//----- (0000000015834798) ----------------------------------------------------
void sub_15834798()
{
  __asm { retfq }
}
// 1583479B: control flows out of bounds to 1583479D

//----- (000000001591EAB5) ----------------------------------------------------
__int64 sub_1591EAB5()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000001593BDF2) ----------------------------------------------------
void __noreturn sub_1593BDF2()
{
  __halt();
}
// 1593BDF2: using guessed type void __fastcall __noreturn sub_1593BDF2();

//----- (00000000159577C1) ----------------------------------------------------
void __fastcall __noreturn sub_159577C1(__int64 a1, int a2)
{
  __int64 v2; // r10
  __int64 v3; // r15
  int v4; // esp
  int v5; // eax

  LOBYTE(a2) = -52;
  v5 = v4;
  __readeflags();
  MEMORY[0xC8806C3F53BCCE5E] = v5;
  __outbyte(0x42u, v5);
  *(_QWORD *)(v2 - 54) = v3;
  *(_DWORD *)((char *)&unk_69 + (unsigned int)(v5 - ((_DWORD)&off_357080EC + 1))) |= a2;
  __halt();
}
// 159577C3: variable 'v4' is possibly undefined
// 159577DF: variable 'v3' is possibly undefined
// 159577DF: variable 'v2' is possibly undefined
// 357080EC: using guessed type void *__ptr32 off_357080EC;

//----- (00000000159B81EF) ----------------------------------------------------
__int64 __fastcall sub_159B81EF()
{
  char v0; // al
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  MEMORY[0x3DE321E515F09178] = v0;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 159B81EF: variable 'v0' is possibly undefined

//----- (00000000159DD19D) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_159DD19D()
{
  char v0; // cf
  unsigned int v1; // eax
  _BYTE *v2; // rbx
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  _enable();
  LOBYTE(v2) = (_BYTE)v2 - (v0 + *v2);
  *(_DWORD *)(v1 - 1026201702i64) -= (_DWORD)v2;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 159DD1A8: positive sp value 8 has been found
// 159DD19D: could not find valid save-restore pair for rdi
// 159DD19F: variable 'v2' is possibly undefined
// 159DD19F: variable 'v0' is possibly undefined
// 159DD19D: variable 'v1' is possibly undefined

//----- (0000000015AADF04) ----------------------------------------------------
void __fastcall sub_15AADF04(__int64 a1, __int16 _DX)
{
  int v2; // eax
  _DWORD *v3; // rdi

  *v3 = v2;
  __asm
  {
    insb
    iret
  }
}
// 15AADF06: control flows out of bounds to 15AADF07
// 15AADF04: variable 'v2' is possibly undefined
// 15AADF04: variable 'v3' is possibly undefined

//----- (0000000015AAFAC5) ----------------------------------------------------
void __fastcall __noreturn sub_15AAFAC5()
{
  double v0; // st6
  double v1; // st7

  MEMORY[0xFFFFFFFFB0B4E9CB] = (__int16)v0;
  MEMORY[0x85EAE162] = (__int64)v1;
  JUMPOUT(0x5050C1CEi64);
}
// 15AAFAE0: control flows out of bounds to 5050C1CE
// 15AAFAC5: variable 'v0' is possibly undefined
// 15AAFAD5: variable 'v1' is possibly undefined
// 15AAFAC5: using guessed type void __fastcall __noreturn sub_15AAFAC5();

//----- (0000000015C99456) ----------------------------------------------------
void __noreturn sub_15C99456()
{
  __halt();
}
// 15C99456: using guessed type void __fastcall __noreturn sub_15C99456();

//----- (0000000015E02138) ----------------------------------------------------
void __noreturn sub_15E02138()
{
  __halt();
}
// 15E02138: using guessed type void __fastcall __noreturn sub_15E02138();

//----- (0000000015F674CF) ----------------------------------------------------
char __fastcall sub_15F674CF()
{
  char v0; // al
  __int64 v1; // rbp
  int v2; // esi
  char result; // al

  result = v0 - 96;
  *(_DWORD *)(v1 - 8) &= v2;
  return result;
}
// 15F674D0: variable 'v0' is possibly undefined
// 15F674D2: variable 'v2' is possibly undefined
// 15F674D2: variable 'v1' is possibly undefined

//----- (0000000015F89823) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_15F89823()
{
  _DWORD *v0; // rdi
  _DWORD *v1; // rsi

  *v0 = *v1;
  __halt();
}
// 15F89828: positive sp value 8 has been found
// 15F89829: variable 'v1' is possibly undefined
// 15F89829: variable 'v0' is possibly undefined
// 15F89823: using guessed type void __fastcall __noreturn sub_15F89823();

//----- (000000001603940E) ----------------------------------------------------
void __fastcall sub_1603940E()
{
  char v0; // bl
  __int64 v1; // rdi

  *(_BYTE *)(v1 + 113) = v0;
}
// 16039414: variable 'v0' is possibly undefined
// 16039414: variable 'v1' is possibly undefined

//----- (00000000160C31F4) ----------------------------------------------------
__int64 sub_160C31F4()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000016236558) ----------------------------------------------------
void __fastcall __noreturn sub_16236558()
{
  int v0; // eax
  _DWORD *v1; // rdi

  *v1 = v0;
  __halt();
}
// 16236558: variable 'v0' is possibly undefined
// 16236558: variable 'v1' is possibly undefined
// 16236558: using guessed type void __fastcall __noreturn sub_16236558();

//----- (000000001628E32F) ----------------------------------------------------
__int64 __fastcall sub_1628E32F(__int64 a1, __int64 _RDX)
{
  int v2; // eax
  void *retaddr[2]; // [rsp+8h] [rbp+0h]

  __asm { insd }
  return MK_FP(retaddr[0], retaddr[0])((unsigned int)(v2 + 1711328968), _RDX);
}
// 1628E335: variable 'v2' is possibly undefined

//----- (000000001635BB30) ----------------------------------------------------
void __fastcall sub_1635BB30(__int64 a1, char a2)
{
  __int64 v2; // rdi

  _enable();
  *(_BYTE *)(v2 - 1973353704) ^= a2;
}
// 1635BB34: variable 'v2' is possibly undefined

//----- (00000000163BC723) ----------------------------------------------------
__int64 sub_163BC723()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000001648EACC) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_1648EACC()
{
  ;
}
// 1648EACD: positive sp value 8 has been found

//----- (00000000164D8AB2) ----------------------------------------------------
void __fastcall sub_164D8AB2()
{
  char v0; // bh
  _BYTE *v1; // rdi

  __asm { outsb }
  *v1 &= v0;
}
// 164D8ABB: variable 'v0' is possibly undefined
// 164D8ABB: variable 'v1' is possibly undefined

//----- (0000000016669910) ----------------------------------------------------
void sub_16669910()
{
  __asm { retf }
}
// 16669911: unbalanced stack, ignored a potential tail call

//----- (00000000166C6CE2) ----------------------------------------------------
__int64 __fastcall sub_166C6CE2()
{
  int v0; // ebp
  __int64 v1; // rsi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_DWORD *)((char *)&unk_4C + 5 * v1) = v0;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 166C6CE2: variable 'v0' is possibly undefined
// 166C6CE2: variable 'v1' is possibly undefined

//----- (00000000166E165D) ----------------------------------------------------
__int64 __fastcall sub_166E165D(__int64 a1, __int64 a2)
{
  int v2; // eax
  unsigned int v3; // ebx
  __int64 v4; // rbp
  _DWORD *v5; // rdi

  *v5 = v2;
  *(_BYTE *)(v4 + 4i64 * (*(_DWORD *)(a2 + 48) | v3) + 1228460975) = (unsigned __int16)(*(_WORD *)(a2 + 48) | v3) >> 8;
  return MEMORY[0x6A1D39A8]();
}
// 166E1660: variable 'v2' is possibly undefined
// 166E1660: variable 'v5' is possibly undefined
// 166E1661: variable 'v3' is possibly undefined
// 166E1664: variable 'v4' is possibly undefined
// 6A1D39A8: using guessed type __int64 (*)(void);

//----- (0000000016700829) ----------------------------------------------------
void sub_16700829()
{
  ;
}

//----- (000000001670C16F) ----------------------------------------------------
#error "1670C16F: stack frame is too big (funcsize=0)"

//----- (00000000167997D2) ----------------------------------------------------
#error "167997D2: stack frame is too big (funcsize=0)"

//----- (0000000016829F13) ----------------------------------------------------
void __fastcall __noreturn sub_16829F13(__int64 a1, unsigned __int16 a2)
{
  __inbyte(a2);
  __halt();
}

//----- (00000000168F5D01) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_168F5D01(__int64 a1)
{
  char v1; // al
  _BYTE *v2; // rbx
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *v2 = v1;
  __asm { outsd }
  return MK_FP(retaddr[0], retaddr[0])(*(_DWORD *)(a1 + 1579470680) & (unsigned int)a1);
}
// 168F5D1A: positive sp value 8 has been found
// 168F5D0C: variable 'v1' is possibly undefined
// 168F5D0C: variable 'v2' is possibly undefined

//----- (00000000169006F0) ----------------------------------------------------
// local variable allocation has failed, the output may be wrong!
__int64 __fastcall sub_169006F0(__int64 a1, _BYTE *a2, unsigned int a3, double _XMM3_8)
{
  __int64 v4; // rax
  __int64 v5; // rbx
  __int32 v6; // ebp
  __int64 v8; // r11
  unsigned int v9; // er15
  __int16 v10; // fps
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_BYTE *)(a1 + 74) += a1;
  *(_DWORD *)(v4 + 10) = __ROL4__(*(_DWORD *)(v4 + 10), 248);
  *(_WORD *)(a2 - 47) = v10;
  _InterlockedExchange((int *)((char *)&dword_38C7091C + v5), v6);
  __asm { outs    dx, byte ptr [rsi] }
  *a2 = __ROR1__(*a2, 13);
  __asm { vorpd   xmm3, xmm3, xmmword ptr [rdi+2] }
  return MK_FP(retaddr[0], retaddr[0])(a1, a2, *(_DWORD *)(v9 + 4 * v8) & a3);
}
// 169006F0: inconsistent variable size for 'xmm3_8.8'
// 38C7091C: using guessed type int dword_38C7091C;

//----- (0000000016CBD6CB) ----------------------------------------------------
__int64 __fastcall sub_16CBD6CB(int a1, __int64 a2)
{
  __int64 v2; // rdi
  _DWORD *v3; // rdi

  v3 = (_DWORD *)(v2 + 4);
  *(_BYTE *)(5i64 * (_QWORD)v3 - 355505378) = (char)a2 >= byte_150847D[a2];
  *v3 = a1;
  return (unsigned int)(a1 - 1516952802);
}
// 16CBD6D4: variable 'v2' is possibly undefined

//----- (0000000016E363E5) ----------------------------------------------------
void __fastcall sub_16E363E5()
{
  __int64 v0; // rax
  double v1; // st7

  *(double *)(v0 + 37) = v1;
  __asm { retf }
}
// 16E363E9: unbalanced stack, ignored a potential tail call
// 16E363E6: variable 'v1' is possibly undefined
// 16E363E6: variable 'v0' is possibly undefined

//----- (0000000016E537F4) ----------------------------------------------------
void __noreturn sub_16E537F4()
{
  __halt();
}
// 16E537F4: using guessed type void __fastcall __noreturn sub_16E537F4();

//----- (0000000016EE31C9) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_16EE31C9(__int64 a1, unsigned __int16 a2)
{
  char v2; // cf
  int v3; // eax
  int v4; // ebx
  __int64 v5; // rdi
  __int64 v6; // rsi

  HIBYTE(a2) -= (__CFADD__(v2, v4) | __CFADD__((_DWORD)v6, v2 + v4))
              + *(_BYTE *)(v6 + 2i64 * ((unsigned int)v6 + v2 + v4) + 89);
  __outbyte(a2, v3);
  *(_DWORD *)(v5 + 4) = v3;
  __asm { iret }
}
// 16EE31DA: positive sp value 8 has been found
// 16EE31DA: control flows out of bounds to 16EE31DB
// 16EE31C9: variable 'v2' is possibly undefined
// 16EE31C9: variable 'v4' is possibly undefined
// 16EE31C9: variable 'v6' is possibly undefined
// 16EE31CF: variable 'v3' is possibly undefined
// 16EE31D0: variable 'v5' is possibly undefined

//----- (00000000170E0000) ----------------------------------------------------
void sub_170E0000()
{
  __asm { retf }
}
// 170E0003: unbalanced stack, ignored a potential tail call

//----- (000000001712FF21) ----------------------------------------------------
void __fastcall sub_1712FF21()
{
  __asm
  {
    outsb
    iret
  }
}
// 1712FF23: control flows out of bounds to 1712FF24

//----- (0000000017155A13) ----------------------------------------------------
void __noreturn sub_17155A13()
{
  __halt();
}
// 17155A13: using guessed type void __fastcall __noreturn sub_17155A13();

//----- (00000000171D6017) ----------------------------------------------------
void __fastcall __noreturn sub_171D6017()
{
  __int64 v0; // rax
  __int16 v1; // fps

  *(_WORD *)(v0 - 2033120394) = v1;
  __halt();
}
// 171D6017: variable 'v0' is possibly undefined
// 171D6017: using guessed type void __fastcall __noreturn sub_171D6017();

//----- (0000000017367559) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_17367559(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al
  _BYTE *v3; // rdi
  char v5; // sp
  __int64 v6; // [rsp-10h] [rbp-10h]

  __outbyte(a2, v2);
  _RSI = v6;
  *v3 = v5;
  __asm { outsd }
}
// 1736756C: positive sp value 10 has been found
// 17367559: could not find valid save-restore pair for rbp
// 17367559: could not find valid save-restore pair for rsi
// 17367559: variable 'v2' is possibly undefined
// 17367565: variable 'v6' is possibly undefined
// 17367576: variable 'v5' is possibly undefined
// 17367576: variable 'v3' is possibly undefined

//----- (000000001745C52B) ----------------------------------------------------
void __fastcall sub_1745C52B(_BYTE *a1, unsigned __int16 a2)
{
  bool v2; // cf

  v2 = __CFADD__((_BYTE)a1, *a1);
  *a1 += (_BYTE)a1;
  __inbyte(a2);
  *(a1 - 106) += (_BYTE)a1 + v2;
  __asm { retnq }
}
// 1745C541: control flows out of bounds to 1745C543

//----- (000000001747A082) ----------------------------------------------------
void sub_1747A082()
{
  __inbyte(0xADu);
  __inbyte(0x89u);
}

//----- (00000000174B3B39) ----------------------------------------------------
__int64 __fastcall sub_174B3B39(__int64 _RCX, __int64 a2)
{
  __int64 v4; // rbp
  int v5; // esi
  int v6; // esi

  v6 = *(_DWORD *)(a2 + 23) & v5;
  __asm { fnsave  byte ptr [rcx-1Bh] }
  if ( v6 <= 0 )
    JUMPOUT(0x174B3AEEi64);
  __asm { xlat }
  return (*(__int64 (__fastcall **)(__int64, _QWORD))(v4 - 27263731))(_RCX, (unsigned int)v6);
}
// 174B3B3F: control flows out of bounds to 174B3AEE
// 174B3B39: variable 'v5' is possibly undefined
// 174B3B45: variable 'v4' is possibly undefined

//----- (000000001761DE67) ----------------------------------------------------
__int64 __fastcall sub_1761DE67()
{
  unsigned int v0; // eax
  void *retaddr; // [rsp+0h] [rbp+0h]

  return MK_FP((_WORD)retaddr, retaddr)(v0, &unk_2F69A181);
}
// 1761DE6A: variable 'v0' is possibly undefined
// 1761DE67: using guessed type __int64 __fastcall sub_1761DE67();

//----- (0000000017626503) ----------------------------------------------------
void __fastcall sub_17626503()
{
  signed int v0; // eax
  __int64 v1; // rdx

  __outdword(1u, v0);
  __asm { icebp }
  v1 = (unsigned int)(v0 >> 31);
  byte_34A497EF[v1] |= BYTE1(v1);
  __indword(v1);
  __asm { iret }
}
// 17626517: control flows out of bounds to 17626518
// 17626503: variable 'v0' is possibly undefined

//----- (00000000177A98DA) ----------------------------------------------------
void __fastcall sub_177A98DA(__int64 a1, __int16 _DX)
{
  char v2; // al

  MEMORY[0xD37D19D97D377B5F] = v2;
  __asm
  {
    insd
    retf
  }
}
// 177A98E8: unbalanced stack, ignored a potential tail call
// 177A98DA: variable 'v2' is possibly undefined

//----- (00000000177F4C8B) ----------------------------------------------------
void __fastcall sub_177F4C8B(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  __int64 v67; // rsi
  char v68; // ch
  __int64 v69; // rcx

  _disable();
  sub_1B8FD3E8();
  BYTE1(v69) = *(_BYTE *)(v67 + 6) & v68;
  *(_BYTE *)(v69 - 66) = 66;
  __outqword(0xC9u, (unsigned int)v69);
  __asm { retf    46F9h }
}
// 177F4CBB: unbalanced stack, ignored a potential tail call
// 177F4C98: ignored the value written to the shadow area of the succeeding call
// 177F4CA9: variable 'v67' is possibly undefined
// 177F4CA9: variable 'v68' is possibly undefined
// 177F4CAC: variable 'v69' is possibly undefined
// 177F4C8B: too many input arguments, some ignored
// 1B8FD3E8: using guessed type __int64 sub_1B8FD3E8(void);

//----- (000000001783EB68) ----------------------------------------------------
__int64 sub_1783EB68()
{
  void *retaddr[2]; // [rsp+8h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000017A49ED7) ----------------------------------------------------
__int64 sub_17A49ED7()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  MEMORY[0x83A7F439]();
  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000017B64834) ----------------------------------------------------
void __fastcall sub_17B64834()
{
  int v0; // eax

  MEMORY[0xA4A9AC74E08FCABC] = v0;
  __asm { iret }
}
// 17B6483D: control flows out of bounds to 17B6483E
// 17B64834: variable 'v0' is possibly undefined

//----- (0000000017BA3149) ----------------------------------------------------
void __fastcall sub_17BA3149(__int64 a1, char a2)
{
  MEMORY[0xFFFFFFFFAD882B09] |= a2;
  __asm { retnq   0BFACh }
}
// 17BA3160: control flows out of bounds to 17BA3164

//----- (0000000017DE4C64) ----------------------------------------------------
void sub_17DE4C64()
{
  __asm { retnq }
}
// 17DE4C67: control flows out of bounds to 17DE4C69

//----- (0000000017E32E71) ----------------------------------------------------
void __fastcall __noreturn sub_17E32E71()
{
  char v0; // al

  MEMORY[0xD947F8F18B2DF32C] = v0;
  __indword(0x95u);
  __readeflags();
  __halt();
}
// 17E32E71: variable 'v0' is possibly undefined
// 17E32E71: using guessed type void __fastcall __noreturn sub_17E32E71();

//----- (0000000017F656F3) ----------------------------------------------------
// local variable allocation has failed, the output may be wrong!
__m128 __fastcall sub_17F656F3(double a1, double a2)
{
  return _mm_unpacklo_ps(*(__m128 *)&a1, *(__m128 *)&a2);
}
// 17F656F3: inconsistent variable size for 'xmm0_8.8'
// 17F656F3: inconsistent variable size for 'xmm1_8.8'

//----- (000000001818632D) ----------------------------------------------------
void sub_1818632D()
{
  __asm { iret }
}
// 1818632F: control flows out of bounds to 18186330

//----- (000000001822629D) ----------------------------------------------------
void __noreturn sub_1822629D()
{
  __halt();
}
// 1822629D: using guessed type void __fastcall __noreturn sub_1822629D();

//----- (000000001828211D) ----------------------------------------------------
__int64 __fastcall sub_1828211D(__int64 a1, __int64 a2, _QWORD *a3)
{
  __int64 v3; // r11
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *a3 = v3;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 1828211D: variable 'v3' is possibly undefined

//----- (00000000182A2306) ----------------------------------------------------
unsigned __int8 __fastcall sub_182A2306(__int64 a1, unsigned __int16 a2)
{
  return __inbyte(a2);
}

//----- (00000000182C2682) ----------------------------------------------------
void __noreturn sub_182C2682()
{
  while ( 1 )
    ;
}
// 182C2682: using guessed type void __fastcall __noreturn sub_182C2682();

//----- (00000000185B1309) ----------------------------------------------------
__int64 sub_185B1309()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000018626A05) ----------------------------------------------------
void __fastcall sub_18626A05(__int64 a1, __int16 _DX)
{
  int v2; // ebx
  unsigned __int64 *v3; // rdi
  int v5; // er15
  bool v6; // sf
  unsigned __int64 v7; // kr00_8

  do
  {
    v6 = (v5 & *(_DWORD *)(a1 - 1385230218)) < 0;
    *(_DWORD *)(a1 - 1385230218) &= v5;
    v7 = __readeflags();
    *v3 = v7;
    __asm { outsd }
  }
  while ( !v6 );
  *((_DWORD *)v3 - 15) -= v2;
  __asm
  {
    insb
    iret
  }
}
// 18626A1E: control flows out of bounds to 18626A1F
// 18626A05: variable 'v5' is possibly undefined
// 18626A0D: variable 'v3' is possibly undefined
// 18626A12: variable 'v2' is possibly undefined

//----- (0000000018732E5E) ----------------------------------------------------
void __fastcall __noreturn sub_18732E5E()
{
  int v0; // eax
  char v1; // ch
  __int64 v2; // rbx
  _DWORD *v3; // rdi

  *v3 = v0;
  *(_BYTE *)(2 * v2 - 25) += v1 + ((unsigned __int8)v0 < 7u);
  __halt();
}
// 18732E5E: variable 'v0' is possibly undefined
// 18732E5E: variable 'v3' is possibly undefined
// 18732E63: variable 'v1' is possibly undefined
// 18732E63: variable 'v2' is possibly undefined
// 18732E5E: using guessed type void __fastcall __noreturn sub_18732E5E();

//----- (0000000018788932) ----------------------------------------------------
void sub_18788932()
{
  __asm { retnq   0C303h }
}
// 18788933: control flows out of bounds to 18788937

//----- (0000000018959BA4) ----------------------------------------------------
void sub_18959BA4()
{
  ;
}

//----- (0000000018B191E0) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_18B191E0()
{
  __asm { retf }
}
// 18B191E1: positive sp value 8 has been found

//----- (0000000018BF24C1) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
char __fastcall sub_18BF24C1()
{
  unsigned __int32 v1; // eax

  __asm { fnstenv byte ptr [rbx] }
  v1 = __indword(0x8Eu);
  return v1 - 91;
}
// 18BF24CD: positive sp value 8 has been found

//----- (0000000018D2455E) ----------------------------------------------------
void __fastcall sub_18D2455E(__int64 a1, _WORD *a2)
{
  _BYTE *v2; // rax

  LOBYTE(v2) = *v2 + (_BYTE)v2;
  *v2 += (unsigned __int16)(*a2 & (unsigned __int16)a2) >> 8;
  __asm { iret }
}
// 18D2456D: control flows out of bounds to 18D2456E
// 18D2455E: variable 'v2' is possibly undefined

//----- (0000000018D4DFE6) ----------------------------------------------------
#error "18D4DFEC: cannot convert to microcode (funcsize=6)"

//----- (0000000018D7A5C8) ----------------------------------------------------
void __fastcall sub_18D7A5C8()
{
  __int64 v0; // rsi
  double v1; // st7
  __int64 v2; // rsi
  _WORD v3[31]; // [rsp+1h] [rbp-47h]

  v2 = *(unsigned int *)(v0 - 1672579661);
  _enable();
  __indword(0x6Au);
  v3[2 * v2] = (__int16)v1;
  __asm { retf }
}
// 18D7A5C8: variable 'v0' is possibly undefined
// 18D7A5D8: variable 'v1' is possibly undefined
// 18D7A5C8: using guessed type _WORD var_47[31];

//----- (0000000018DF6F04) ----------------------------------------------------
__int16 __fastcall sub_18DF6F04()
{
  char v0; // al
  __int64 v1; // rbx
  __int16 result; // ax

  LOBYTE(result) = v0 ^ 0xE;
  *(_WORD *)(v1 - 1092854956) = __ES__;
  HIBYTE(result) = 76;
  return result;
}
// 18DF6F04: variable 'v0' is possibly undefined
// 18DF6F06: variable 'v1' is possibly undefined

//----- (0000000018F2541D) ----------------------------------------------------
void __fastcall sub_18F2541D(
        __int64 a1,
        unsigned __int16 a2,
        __int64 a3,
        _DWORD *a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42)
{
  unsigned int v42; // eax
  __int64 v43; // rbx
  int v44; // ebp
  _DWORD *v45; // rdi
  int v46; // eax
  unsigned __int64 v47; // rcx

  __outdword(a2, v42);
  *(_DWORD *)((char *)v45 + 1764131742) |= v44;
  *(_BYTE *)a1 += a1;
  v46 = *a4 & v42;
  *(_DWORD *)(v43 + 30) |= v46;
  *v45 >>= 2;
  *(_DWORD *)&byte_32E81AD[(_QWORD)v45] |= v44;
  *(_DWORD *)(a1 + 24) |= v46;
  v47 = (unsigned int)(*(_DWORD *)a1 + a1);
  __outdword(a2, v46);
  __outbyte(a2, v46);
  *(_BYTE *)v47 += v47;
}
// 18F2541D: variable 'v42' is possibly undefined
// 18F25420: variable 'v44' is possibly undefined
// 18F25420: variable 'v45' is possibly undefined
// 18F25430: variable 'v43' is possibly undefined

//----- (0000000018FCFA8C) ----------------------------------------------------
void __fastcall __noreturn sub_18FCFA8C()
{
  char v0; // al
  __int64 v1; // rdi

  *(_BYTE *)(v1 + 1) = v0;
  __asm { int     8Eh; used by BASIC while in interpreter }
  __halt();
}
// 18FCFA90: variable 'v0' is possibly undefined
// 18FCFA8C: variable 'v1' is possibly undefined
// 18FCFA8C: using guessed type void __fastcall __noreturn sub_18FCFA8C();

//----- (000000001909AE43) ----------------------------------------------------
void __fastcall sub_1909AE43()
{
  __int64 v0; // rdi

  *(_DWORD *)(v0 + 70) = __ROR4__(*(_DWORD *)(v0 + 70), 1);
  __asm { iretd }
}
// 1909AE5C: control flows out of bounds to 1909AE5E
// 1909AE57: variable 'v0' is possibly undefined

//----- (00000000191A165E) ----------------------------------------------------
__int64 __fastcall sub_191A165E(__int64 a1, __int64 a2)
{
  void *retaddr[2]; // [rsp+8h] [rbp+0h]

  LOBYTE(a2) = __ROL1__(a2, 1);
  return MK_FP(retaddr[0], retaddr[0])(a1, a2);
}

//----- (0000000019207A41) ----------------------------------------------------
void __noreturn sub_19207A41()
{
  __getcallerseflags();
  __halt();
}
// 19207A41: using guessed type void __fastcall __noreturn sub_19207A41();

//----- (000000001920F64F) ----------------------------------------------------
void __fastcall __noreturn sub_1920F64F(int a1)
{
  __int64 v1; // rbp

  *(_DWORD *)(v1 + 92) += a1;
  __halt();
}
// 1920F64F: variable 'v1' is possibly undefined

//----- (0000000019231C10) ----------------------------------------------------
void __fastcall sub_19231C10(__int64 a1, _BYTE *a2)
{
  char v2; // ah

  *a2 ^= v2;
  __asm { retf }
}
// 19231C1F: unbalanced stack, ignored a potential tail call
// 19231C12: variable 'v2' is possibly undefined

//----- (000000001949FEBC) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_1949FEBC(__int64 a1, __int16 _DX)
{
  unsigned __int8 v2; // al
  unsigned __int8 *v3; // rsi
  unsigned __int8 v4; // al
  unsigned __int64 v7; // [rsp-8h] [rbp-8h]

  __outbyte(0x22u, v2);
  v4 = *v3;
  __writeeflags(v7);
  __asm
  {
    insb
    ffreep  st(2)
  }
  __outbyte(_DX, v4);
  __halt();
}
// 1949FEC2: positive sp value 8 has been found
// 1949FEBC: variable 'v2' is possibly undefined
// 1949FEBE: variable 'v3' is possibly undefined
// 1949FEC1: variable 'v7' is possibly undefined

//----- (00000000194C125F) ----------------------------------------------------
void __fastcall sub_194C125F(__int64 a1, __int64 a2)
{
  __asm { jmp     fword ptr [rdx+6AADA23Ch] }
}
// 194C1265: unbalanced stack, ignored a potential tail call

//----- (000000001954BE8C) ----------------------------------------------------
__int64 __fastcall sub_1954BE8C()
{
  __int64 (*v0)(void); // rbp
  _DWORD *v1; // rdi
  _DWORD *v2; // rsi

  *v1 = *v2;
  return v0();
}
// 1954BE8C: variable 'v2' is possibly undefined
// 1954BE8C: variable 'v1' is possibly undefined
// 1954BE91: variable 'v0' is possibly undefined
// 1954BE8C: using guessed type __int64 __fastcall sub_1954BE8C();

//----- (0000000019550257) ----------------------------------------------------
void __fastcall __noreturn sub_19550257(_BYTE *a1, __int64 a2)
{
  __int64 v2; // rbx
  __int64 v3; // rdi

  *a1 = 0;
  do
    *(_BYTE *)(v2 + 1172614688) += BYTE1(a2);
  while ( *(char *)(a2 - 100) >= 0 );
  *(_BYTE *)(v3 + 81) += 66;
  __halt();
}
// 19550261: variable 'v2' is possibly undefined
// 1955026D: variable 'v3' is possibly undefined

//----- (000000001977846E) ----------------------------------------------------
void __noreturn sub_1977846E()
{
  __halt();
}
// 1977846E: using guessed type void __fastcall __noreturn sub_1977846E();

//----- (00000000197D3785) ----------------------------------------------------
__int64 sub_197D3785()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (00000000197F1A6E) ----------------------------------------------------
void sub_197F1A6E()
{
  __asm { iret }
}
// 197F1A78: control flows out of bounds to 197F1A79

//----- (0000000019837508) ----------------------------------------------------
void sub_19837508()
{
  __asm { iret }
}
// 1983750E: control flows out of bounds to 1983750F

//----- (00000000198726DC) ----------------------------------------------------
void __noreturn sub_198726DC()
{
  __halt();
}
// 198726DC: using guessed type void __fastcall __noreturn sub_198726DC();

//----- (0000000019B4FCB1) ----------------------------------------------------
void __fastcall sub_19B4FCB1(__int64 a1, __int64 a2)
{
  char v2; // ah

  LOBYTE(a2) = a2 - (*(_BYTE *)(a1 + 49) | BYTE1(a1));
  *(_BYTE *)(a2 - 44) = v2;
  __asm { retf }
}
// 19B4FCB9: variable 'v2' is possibly undefined

//----- (0000000019B5626D) ----------------------------------------------------
void __fastcall __noreturn sub_19B5626D(__int64 a1, unsigned __int16 a2)
{
  unsigned __int16 v2; // ax

  __outbyte(a2, v2 / *(unsigned __int8 *)(a1 + 24));
  __halt();
}
// 19B5626D: variable 'v2' is possibly undefined

//----- (0000000019B66498) ----------------------------------------------------
void __fastcall __noreturn sub_19B66498(__int64 a1, unsigned __int16 a2)
{
  char v2; // cf
  int v3; // ebp
  __int64 v4; // rdi

  __inbyte(a2);
  *(_DWORD *)(a1 - 123) += v3 + v2;
  *(_WORD *)(v4 + 95) = a2;
  __halt();
}
// 19B6649B: variable 'v3' is possibly undefined
// 19B6649B: variable 'v2' is possibly undefined
// 19B664A4: variable 'v4' is possibly undefined

//----- (0000000019C6BD4E) ----------------------------------------------------
void sub_19C6BD4E()
{
  __asm { retf }
}
// 19C6BD4F: unbalanced stack, ignored a potential tail call

//----- (0000000019C78EF1) ----------------------------------------------------
void sub_19C78EF1()
{
  __asm { iret }
}
// 19C78EF4: control flows out of bounds to 19C78EF5

//----- (0000000019CB0BAA) ----------------------------------------------------
void __fastcall sub_19CB0BAA(__int64 a1)
{
  unsigned __int32 v1; // eax
  unsigned __int32 v2; // edi
  char v3; // sf
  char v4; // of
  _BYTE *v6; // rdi
  _BYTE *v7; // rsi
  _BYTE *v8; // rdi
  _BYTE *v10; // rdi
  char v11; // si

  *v6 = *v7;
  _RSI = v7 + 1;
  v8 = v6 + 1;
  if ( v3 == v4 )
  {
    *v8 = *_RSI;
    v11 = (_BYTE)_RSI + 1;
    v10 = v8 + 1;
    if ( (unsigned int)v10 <= *(_DWORD *)(v10 - 43) )
    {
      __asm { int     0B3h; used by BASIC while in interpreter }
      v1 = __indword(0x67u);
      v2 = v1 | (unsigned int)v10;
      if ( v2 )
      {
        if ( __SETP__(v2, 0) )
        {
          MEMORY[0xB25F285CBDD28DE6] = v11;
          __asm { retf }
        }
        _disable();
        JUMPOUT(0x124F2E50i64);
      }
      JUMPOUT(0x124F2DB0i64);
    }
    JUMPOUT(0x124F2DFCi64);
  }
  __asm { outsd }
  *(_DWORD *)v8 = *(_DWORD *)_RSI;
  *(_BYTE *)(a1 - 79) ^= a1;
  JUMPOUT(0x19CB0B75i64);
}
// 124F2E4E: control flows out of bounds to 124F2E50
// 19CB0B72: control flows out of bounds to 19CB0B75
// 124F2DE3: control flows out of bounds to 124F2DFC
// 124F2DEC: control flows out of bounds to 124F2DB0
// 19CB0BAB: variable 'v7' is possibly undefined
// 19CB0BAB: variable 'v6' is possibly undefined
// 19CB0BAC: variable 'v3' is possibly undefined
// 19CB0BAC: variable 'v4' is possibly undefined

//----- (0000000019EB76CA) ----------------------------------------------------
__int64 __fastcall sub_19EB76CA(__int64 a1, __int64 a2)
{
  unsigned int v2; // esi

  *(_BYTE *)(a2 + 2 * a1 + 1677094882) = __ROR1__(*(_BYTE *)(a2 + 2 * a1 + 1677094882), a1);
  return v2;
}
// 19EB76D3: variable 'v2' is possibly undefined

//----- (0000000019FA1EE1) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_19FA1EE1()
{
  __asm { iret }
}
// 19FA1EE2: positive sp value 8 has been found
// 19FA1EE2: control flows out of bounds to 19FA1EE3

//----- (0000000019FD4BA1) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
char __fastcall sub_19FD4BA1()
{
  char v0; // cf
  __int64 v1; // rax

  LOBYTE(v1) = v0 + v1 + 17;
  *(int *)(v1 - 1828628060) >>= 1;
  return MEMORY[0x1C51DE42D9A2C485];
}
// 19FD4BB6: positive sp value 4E46 has been found
// 19FD4BA1: variable 'v0' is possibly undefined
// 19FD4BA1: variable 'v1' is possibly undefined

//----- (0000000019FFF2B1) ----------------------------------------------------
__int64 __fastcall sub_19FFF2B1(__int64 a1, char a2)
{
  __int64 result; // rax

  *(_BYTE *)(result + 44) ^= a2;
  return result;
}
// 19FFF2B4: variable 'result' is possibly undefined

//----- (000000001A0479DE) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_1A0479DE(int a1, unsigned __int16 a2)
{
  unsigned int v2; // eax
  _DWORD *v3; // [rsp-8h] [rbp-8h]

  *v3 ^= a1;
  __outdword(a2, v2);
  __halt();
}
// 1A0479E5: positive sp value 8 has been found
// 1A0479E6: variable 'v3' is possibly undefined
// 1A0479EB: variable 'v2' is possibly undefined

//----- (000000001A084AF8) ----------------------------------------------------
void __fastcall sub_1A084AF8(__int64 a1)
{
  _DWORD *v1; // rdi
  _DWORD *v2; // rsi
  long double v3; // st7

  *v1 = *v2;
  __FBSTP__((_TBYTE *)(a1 + 2126575835), v3);
  __asm { iret }
}
// 1A084A8F: control flows out of bounds to 1A084A90
// 1A084AF8: variable 'v2' is possibly undefined
// 1A084AF8: variable 'v1' is possibly undefined
// 1A084AF9: variable 'v3' is possibly undefined

//----- (000000001A190048) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_1A190048(__int64 a1, char a2)
{
  unsigned int v2; // er14
  bool v3; // cf
  __int64 v4; // rbx
  int v5; // esp
  int v6; // ett

  *(int *)((char *)&dword_50 + v2 + 2) = __ROR4__(*(int *)((char *)&dword_50 + v2 + 2), 8);
  MEMORY[0xFFFFFFFFA63D82BE] = a2;
  v3 = (unsigned __int64)(38937094i64 * MEMORY[0xFFFFFFFFE1BE12FE]) >> 32 != 0;
  v4 = (unsigned int)(38937094 * MEMORY[0xFFFFFFFFE1BE12FE]);
  _enable();
  v6 = (__CFADD__(v3, v2) | __CFADD__((_DWORD)&word_2C180C96, v3 + v2)) + v5;
  *(_DWORD *)(v4 - 1333163008) -= v6;
  __asm { retfq }
}
// 1A19004A: positive sp value 8 has been found
// 1A19007C: control flows out of bounds to 1A19007F
// 1A190055: variable 'v2' is possibly undefined
// 1A190076: variable 'v5' is possibly undefined
// 50: using guessed type int dword_50;
// 2C180C96: using guessed type __int16 word_2C180C96;

//----- (000000001A2288C1) ----------------------------------------------------
void __fastcall sub_1A2288C1()
{
  __int64 v0; // rbp
  __int32 v1; // esi

  __asm { icebp }
  _InterlockedExchange((int *)((char *)&dword_3AA7BEA9 + v0), v1);
  __asm { iret }
}
// 1A2288D4: control flows out of bounds to 1A2288D5
// 1A2288CA: variable 'v0' is possibly undefined
// 1A2288CA: variable 'v1' is possibly undefined
// 3AA7BEA9: using guessed type int dword_3AA7BEA9;

//----- (000000001A3CD71E) ----------------------------------------------------
void sub_1A3CD71E()
{
  _disable();
  __asm { iret }
}
// 1A3CD729: control flows out of bounds to 1A3CD72A

//----- (000000001A45E40F) ----------------------------------------------------
void __noreturn sub_1A45E40F()
{
  __halt();
}
// 1A45E40F: using guessed type void __fastcall __noreturn sub_1A45E40F();

//----- (000000001A47A64F) ----------------------------------------------------
__int64 __fastcall sub_1A47A64F(__int64 a1, int a2)
{
  int v2; // eax

  __asm { icebp }
  return v2 - ((unsigned int)((unsigned __int8)v2 < 0x78u) + a2);
}
// 1A47A661: variable 'v2' is possibly undefined

//----- (000000001A4D2825) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_1A4D2825(__int64 a1, __int64 a2)
{
  __int64 v2; // rax
  _DWORD *v3; // rsi

  *(_BYTE *)(a2 + 42) = __ROR1__(*(_BYTE *)(a2 + 42), 1);
  __outbyte(0xB7u, v2);
  *v3 += a2 + ((unsigned __int8)v2 < 0xE1u);
  LODWORD(v2) = __indword(a2);
  byte_B2AE888[v2] = BYTE1(a2);
  __asm { iretd }
}
// 1A4D27C2: positive sp value 8 has been found
// 1A4D27C2: control flows out of bounds to 1A4D27C4
// 1A4D2829: variable 'v2' is possibly undefined
// 1A4D27B8: variable 'v3' is possibly undefined

//----- (000000001A4F5DAB) ----------------------------------------------------
__int64 __fastcall sub_1A4F5DAB(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al
  __int64 v3; // rbp
  __int64 v4; // rdi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __asm { outsb }
  *(_DWORD *)(v3 + 4 * v4 - 507043358) = __ROL4__(*(_DWORD *)(v3 + 4 * v4 - 507043358), 32);
  __outbyte(a2, v2);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 1A4F5DAC: variable 'v3' is possibly undefined
// 1A4F5DAC: variable 'v4' is possibly undefined
// 1A4F5DB4: variable 'v2' is possibly undefined

//----- (000000001A5668D0) ----------------------------------------------------
void sub_1A5668D0()
{
  __asm { retf }
}
// 1A5668D6: unbalanced stack, ignored a potential tail call

//----- (000000001A615976) ----------------------------------------------------
__int64 sub_1A615976()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000001A64D28E) ----------------------------------------------------
__int64 __fastcall sub_1A64D28E()
{
  __int64 result; // rax

  MEMORY[0xA8D84BC8BB1EC60] = result;
  return result;
}
// 1A64D28F: variable 'result' is possibly undefined
// 1A64D28E: using guessed type __int64 __fastcall sub_1A64D28E();

//----- (000000001A736F8C) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_1A736F8C(__int64 a1)
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  _DX = 20927;
  __asm { insd }
  return MK_FP(retaddr[0], retaddr[0])(a1);
}
// 1A736F50: positive sp value 10 has been found

//----- (000000001A74E191) ----------------------------------------------------
__int64 __fastcall sub_1A74E191()
{
  char v0; // cf
  __int64 v1; // rbx
  bool v2; // sf
  __int64 v4; // [rsp+0h] [rbp-10h]

  v2 = *(_DWORD *)(3 * v1) - (v0 + (int)v1) < 0;
  *(_DWORD *)(3 * v1) -= v0 + (_DWORD)v1;
  if ( !v2 )
    __halt();
  return v4;
}
// 1A74E195: variable 'v1' is possibly undefined
// 1A74E195: variable 'v0' is possibly undefined
// 1A74E19A: variable 'v4' is possibly undefined
// 1A74E191: using guessed type __int64 __fastcall sub_1A74E191();

//----- (000000001A830324) ----------------------------------------------------
__int64 __fastcall sub_1A830324(__int64 a1, unsigned __int16 a2)
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __inbyte(a2);
  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000001A87E4A1) ----------------------------------------------------
__int64 __fastcall sub_1A87E4A1(__int64 a1)
{
  int v1; // eax
  __int64 (__fastcall *v2)(__int64); // rsi

  BYTE1(a1) = -27;
  MEMORY[0xC361564DB7F7776C] = v1;
  return v2(a1);
}
// 1A87E4A5: variable 'v1' is possibly undefined
// 1A87E4AE: variable 'v2' is possibly undefined

//----- (000000001A95E1FE) ----------------------------------------------------
void __fastcall sub_1A95E1FE()
{
  double v0; // st7

  MEMORY[0xFFFFFFFFB088866B] = v0;
  __asm { iretd }
}
// 1A95E20B: control flows out of bounds to 1A95E20D
// 1A95E204: variable 'v0' is possibly undefined

//----- (000000001A96347F) ----------------------------------------------------
__int64 __fastcall sub_1A96347F()
{
  char v0; // cf
  char v1; // ah
  char v2; // bl
  __int64 result; // rax

  BYTE1(result) = v1 - (v0 + v2);
  return result;
}
// 1A96347F: variable 'v1' is possibly undefined
// 1A96347F: variable 'v0' is possibly undefined
// 1A96347F: variable 'v2' is possibly undefined
// 1A96347F: using guessed type __int64 __fastcall sub_1A96347F();

//----- (000000001A9C1A5F) ----------------------------------------------------
void __fastcall sub_1A9C1A5F(int a1)
{
  __int64 v3; // rdi

  __asm
  {
    xlat
    outsd
  }
  BYTE1(a1) = 49;
  *(_DWORD *)(v3 + _RBX - 124) ^= a1;
  *((_BYTE *)&loc_31F1B639 + 1365675100) ^= a1;
  __asm { iret }
}
// 1A9C1A7F: control flows out of bounds to 1A9C1A80
// 1A9C1A74: variable 'v3' is possibly undefined
// 1A9C1A74: variable '_RBX' is possibly undefined

//----- (000000001AA08E54) ----------------------------------------------------
void __fastcall __noreturn sub_1AA08E54()
{
  __int64 v0; // rsi

  _RSI = v0 + 8;
  __asm { outsd }
  __halt();
}
// 1AA08E55: variable 'v0' is possibly undefined
// 1AA08E54: using guessed type void __fastcall __noreturn sub_1AA08E54();

//----- (000000001AAF1846) ----------------------------------------------------
void sub_1AAF1846()
{
  __debugbreak();
  __asm { iret }
}
// 1AAF184B: control flows out of bounds to 1AAF184C

//----- (000000001AB412A5) ----------------------------------------------------
void __fastcall sub_1AB412A5(
        int a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  char v65; // cf
  _DWORD *v66; // rbx

  *v66 -= v65 + a1;
  __asm { retfq   0B14h }
}
// 1AB412AA: control flows out of bounds to 1AB412AF
// 1AB412A6: variable 'v66' is possibly undefined
// 1AB412A6: variable 'v65' is possibly undefined
// 1AB412A5: too many input arguments, some ignored

//----- (000000001AE1661A) ----------------------------------------------------
__int64 __fastcall sub_1AE1661A()
{
  __int64 v0; // rbx
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_BYTE *)(v0 + 3) += 3;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 1AE1661D: variable 'v0' is possibly undefined

//----- (000000001AF0378A) ----------------------------------------------------
void sub_1AF0378A()
{
  _disable();
}

//----- (000000001AF6F720) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_1AF6F720(char a1)
{
  __int64 v1; // rax

  __asm { fnsave  byte ptr [rbx-7Dh] }
  *(_BYTE *)(v1 - 544397260) <<= a1;
  MEMORY[0xFFFFFFFFBBC97A7C] -= a1;
  __asm { iret }
}
// 1AF6F721: positive sp value 8 has been found
// 1AF6F741: control flows out of bounds to 1AF6F742
// 1AF6F724: variable 'v1' is possibly undefined

//----- (000000001B008B75) ----------------------------------------------------
#error "1B008B78: call analysis failed (funcsize=3)"

//----- (000000001B0B9486) ----------------------------------------------------
void __noreturn sub_1B0B9486()
{
  JUMPOUT(0x76227E31i64);
}
// 1B0B9487: control flows out of bounds to 76227E31
// 1B0B9486: using guessed type void __fastcall __noreturn sub_1B0B9486();

//----- (000000001B168626) ----------------------------------------------------
void __fastcall sub_1B168626()
{
  char v0; // cf
  char v1; // dh
  __int64 v2; // rbp
  __int64 v3; // rdi

  *(_DWORD *)(v3 - 619614490) += v2 + v0;
  *(_BYTE *)(v2 + 12) = v1;
  __asm { iret }
}
// 1B16862F: control flows out of bounds to 1B168630
// 1B168626: variable 'v2' is possibly undefined
// 1B168626: variable 'v0' is possibly undefined
// 1B168626: variable 'v3' is possibly undefined
// 1B16862C: variable 'v1' is possibly undefined

//----- (000000001B279905) ----------------------------------------------------
int __fastcall sub_1B279905()
{
  __int64 v0; // rax
  __int64 v1; // rdi

  LODWORD(v0) = (__int16)v0;
  *(&byte_3C6D590E + 2288723686i64) = -*(&byte_3C6D590E + 2288723686i64);
  *(_DWORD *)(v1 + 5 + 2 * v0 + 41) = __ROR4__(*(_DWORD *)(v1 + 5 + 2 * v0 + 41), 1);
  return v0;
}
// 1B27990B: variable 'v0' is possibly undefined
// 1B279917: variable 'v1' is possibly undefined
// 3C6D590E: using guessed type char byte_3C6D590E;

//----- (000000001B2A244A) ----------------------------------------------------
void __fastcall sub_1B2A244A(__int64 a1, _BYTE *a2)
{
  char v2; // cf
  unsigned int v3; // eax
  __int64 v4; // rcx
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  v4 = v3;
  BYTE1(v4) = *a2 + v2 + BYTE1(v3);
  MK_FP(retaddr[0], retaddr[0])(v4);
}
// 1B2A244C: variable 'v3' is possibly undefined
// 1B2A244D: variable 'v2' is possibly undefined

//----- (000000001B43A17B) ----------------------------------------------------
void __fastcall __noreturn sub_1B43A17B(_DWORD *a1)
{
  __int64 v1; // rax

  *(_DWORD *)&byte_235FA245[v1] = __ROR4__(*(_DWORD *)&byte_235FA245[v1], 184);
  *a1 |= v1;
  __halt();
}
// 1B43A17D: variable 'v1' is possibly undefined

//----- (000000001B4BE676) ----------------------------------------------------
_DWORD *__fastcall sub_1B4BE676()
{
  char v0; // cf
  char v1; // zf
  char v2; // sf
  char v3; // of
  _DWORD *result; // rax
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  if ( v2 ^ v3 | v1 )
    return (_DWORD *)MK_FP(retaddr[0], retaddr[0])();
  if ( v0 | v1 )
  {
    *result += 1658218673;
    _disable();
    if ( (int)result + 1130259594 < 0 )
      JUMPOUT(0x1B4BE666i64);
    JUMPOUT(0x1B4BE5FFi64);
  }
  return result;
}
// 1B4BE664: control flows out of bounds to 1B4BE666
// 1B4BE664: control flows out of bounds to 1B4BE5FF
// 1B4BE676: variable 'v2' is possibly undefined
// 1B4BE676: variable 'v3' is possibly undefined
// 1B4BE676: variable 'v1' is possibly undefined
// 1B4BE61A: variable 'v0' is possibly undefined
// 1B4BE651: variable 'result' is possibly undefined

//----- (000000001B51520A) ----------------------------------------------------
void sub_1B51520A()
{
  __asm { iret }
}
// 1B51520E: control flows out of bounds to 1B51520F

//----- (000000001B5976C4) ----------------------------------------------------
void __noreturn sub_1B5976C4()
{
  __halt();
}
// 1B5976C4: using guessed type void __fastcall __noreturn sub_1B5976C4();

//----- (000000001B79CD71) ----------------------------------------------------
void sub_1B79CD71()
{
  __asm { iret }
}
// 1B79CD76: control flows out of bounds to 1B79CD77

//----- (000000001B7B8F2F) ----------------------------------------------------
// write access to const memory has been detected, the output may be wrong!
void __fastcall sub_1B7B8F2F()
{
  __int64 v0; // rdi
  unsigned int v1; // esp
  unsigned int v2; // eax
  char v3; // cf

  v2 = v1;
  v3 = *(_BYTE *)(v0 - 1696025981) & 1;
  *(char *)(v0 - 1696025981) >>= 1;
  unk_1D3F380A = __ROR1__(unk_1D3F380A, (v2 < (unsigned int)v3 - 2003938948) + v2 - v3);
  __asm { retf }
}
// 1B7B8F4C: write access to const memory at 1D3F380A has been detected
// 1B7B8F4E: unbalanced stack, ignored a potential tail call
// 1B7B8F32: variable 'v1' is possibly undefined
// 1B7B8F35: variable 'v0' is possibly undefined

//----- (000000001B8A12F1) ----------------------------------------------------
void __fastcall sub_1B8A12F1(__int64 a1)
{
  *(_DWORD *)(a1 - 32) = __ROR4__(*(_DWORD *)(a1 - 32), a1);
  __asm { iret }
}
// 1B8A12FE: control flows out of bounds to 1B8A12FF

//----- (000000001B8B7F10) ----------------------------------------------------
void __noreturn sub_1B8B7F10()
{
  __halt();
}
// 1B8B7F10: using guessed type void __fastcall __noreturn sub_1B8B7F10();

//----- (000000001B8D9873) ----------------------------------------------------
__int64 sub_1B8D9873()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000001B8F591E) ----------------------------------------------------
void __fastcall sub_1B8F591E()
{
  int v0; // ebp
  _DWORD *v1; // rdi

  *v1 -= v0;
}
// 1B8F5924: variable 'v1' is possibly undefined
// 1B8F5924: variable 'v0' is possibly undefined

//----- (000000001B916E53) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_1B916E53(__int64 a1)
{
  __int64 v1; // rbp
  char v2; // cf
  unsigned __int64 v4; // [rsp-8h] [rbp-8h]
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __writeeflags(v4);
  LOBYTE(a1) = a1 - (v2 + *(_BYTE *)(v1 - 1813125507));
  return MK_FP(retaddr[0], retaddr[0])(a1);
}
// 1B916E54: positive sp value 8 has been found
// 1B916E53: variable 'v4' is possibly undefined
// 1B916E54: variable 'v2' is possibly undefined
// 1B916E54: variable 'v1' is possibly undefined

//----- (000000001B950158) ----------------------------------------------------
void sub_1B950158()
{
  __asm { iret }
}
// 1B95015B: control flows out of bounds to 1B95015C

//----- (000000001B96ADBB) ----------------------------------------------------
__int64 sub_1B96ADBB()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000001B9C95E9) ----------------------------------------------------
__int64 __fastcall sub_1B9C95E9(__int64 a1)
{
  unsigned int v1; // eax
  _BYTE *v2; // rdi
  _BYTE *v3; // rsi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *v2 = *v3;
  return MK_FP(retaddr[0], retaddr[0])(a1, 1313488549i64, v1);
}
// 1B9C95F0: variable 'v3' is possibly undefined
// 1B9C95F0: variable 'v2' is possibly undefined
// 1B9C95FB: variable 'v1' is possibly undefined

//----- (000000001BAC6342) ----------------------------------------------------
void __noreturn sub_1BAC6342()
{
  __halt();
}
// 1BAC6342: using guessed type void __fastcall __noreturn sub_1BAC6342();

//----- (000000001BB11836) ----------------------------------------------------
__int64 __fastcall sub_1BB11836(__int64 a1, __int64 a2)
{
  int v2; // ebx
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_DWORD *)(a2 + 90) ^= v2;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 1BB11836: variable 'v2' is possibly undefined

//----- (000000001BB55B36) ----------------------------------------------------
void __fastcall __noreturn sub_1BB55B36(__int64 a1, __int64 _RDX, __int64 a3)
{
  __int64 v5; // rbp
  _DWORD *v6; // rdi

  __asm { xlat }
  *v6 = _EAX;
  *(_QWORD *)(v5 + 83) += a3;
  *(_DWORD *)(_RDX + a1 - 854116772) ^= _RDX;
  _ECX = *(_DWORD *)(_RBX - 1266719368) & a1;
  __asm { lock adc dh, ch }
  *(_BYTE *)(_RBX - 1850899595) += _RDX + _CF;
  __halt();
}
// 1BB55B37: variable '_EAX' is possibly undefined
// 1BB55B37: variable 'v6' is possibly undefined
// 1BB55B3D: variable 'v5' is possibly undefined
// 1BB55B48: variable '_RBX' is possibly undefined

//----- (000000001BCAEE05) ----------------------------------------------------
void __noreturn sub_1BCAEE05()
{
  _enable();
  __halt();
}
// 1BCAEE05: using guessed type void __fastcall __noreturn sub_1BCAEE05();

//----- (000000001BD6AF64) ----------------------------------------------------
void __fastcall sub_1BD6AF64(__int64 a1, __int64 a2)
{
  char v2; // cf
  __int64 v3; // rbx
  __int64 v4; // rsi

  *(_DWORD *)(v3 + 2 * a1 - 1710958927) -= v2 - 91;
  *(_QWORD *)(v4 - 956198875) ^= a2;
  __asm { retf }
}
// 1BD6AF87: unbalanced stack, ignored a potential tail call
// 1BD6AF6F: variable 'v3' is possibly undefined
// 1BD6AF6F: variable 'v2' is possibly undefined
// 1BD6AF7E: variable 'v4' is possibly undefined

//----- (000000001BDCD915) ----------------------------------------------------
void sub_1BDCD915()
{
  __asm { retfq   0F06Fh }
}
// 1BDCD91B: control flows out of bounds to 1BDCD91F

//----- (000000001BF1A265) ----------------------------------------------------
void __noreturn sub_1BF1A265()
{
  __halt();
}
// 1BF1A265: using guessed type void __fastcall __noreturn sub_1BF1A265();

//----- (000000001BF5D44C) ----------------------------------------------------
void __fastcall __noreturn sub_1BF5D44C(__int64 a1, __int64 a2)
{
  char v2; // cf
  __int64 v3; // rdi

  LOBYTE(a2) = a2 - (v2 + byte_6C54F37[a1]);
  *(_BYTE *)(a2 + 4 * v3) |= a2;
  __asm { int     20h; DOS - PROGRAM TERMINATION }
}
// 1BF5D45D: control flows out of bounds to 1BF5D45F
// 1BF5D44D: variable 'v2' is possibly undefined
// 1BF5D455: variable 'v3' is possibly undefined

//----- (000000001BFBEF64) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_1BFBEF64()
{
  __int64 v0; // rbx

  *(_DWORD *)(v0 - 99530048) >>= 1;
  __halt();
}
// 1BFBEF6B: positive sp value 8 has been found
// 1BFBEF64: variable 'v0' is possibly undefined
// 1BFBEF64: using guessed type void __fastcall __noreturn sub_1BFBEF64();

//----- (000000001C197538) ----------------------------------------------------
char __fastcall sub_1C197538()
{
  char v0; // cf
  char v1; // al
  char result; // al

  result = v0 + v1 - 79;
  __asm { outsd }
  return result;
}
// 1C197538: variable 'v0' is possibly undefined
// 1C197538: variable 'v1' is possibly undefined

//----- (000000001C26FFB5) ----------------------------------------------------
void __fastcall sub_1C26FFB5(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al
  unsigned __int8 *v3; // rdi

  __outbyte(a2, v2);
  *v3 = v2;
  __asm { iret }
}
// 1C26FFB7: control flows out of bounds to 1C26FFB8
// 1C26FFB5: variable 'v2' is possibly undefined
// 1C26FFB6: variable 'v3' is possibly undefined

//----- (000000001C2911BB) ----------------------------------------------------
void __fastcall sub_1C2911BB(__int64 a1, unsigned __int64 a2)
{
  int v2; // eax
  _DWORD *v4; // rsi

  MEMORY[0x75C95487BD2A8B62] = v2;
  MEMORY[0x86574273D53AAC92] = v2;
  _RCX = (unsigned int)(-1748955483 * *v4);
  __asm { fnsave  ss:byte_25A709BA[rbp+rcx*4] }
  MEMORY[0xBAB7A42169E90B1] = (unsigned int)(v2 + 1529557938);
  __writeeflags(a2);
  __asm { iret }
}
// 1C2911A2: control flows out of bounds to 1C2911A3
// 1C2911C5: variable 'v2' is possibly undefined
// 1C2911D8: variable 'v4' is possibly undefined

//----- (000000001C3FA7AD) ----------------------------------------------------
void __fastcall __noreturn sub_1C3FA7AD(unsigned int *a1)
{
  int v1; // ebx
  __int64 v2; // rbp
  __int64 v3; // rsi
  char v4; // cl

  v3 = *a1;
  ((void (*)(void))loc_10C7CCBE)();
  *(_BYTE *)(v3 + v2 + 139146109) = v1 << v4;
  __halt();
}
// 1C3FA7B9: variable 'v1' is possibly undefined
// 1C3FA7B9: variable 'v4' is possibly undefined
// 1C3FA7BD: variable 'v2' is possibly undefined

//----- (000000001C440548) ----------------------------------------------------
void __fastcall __noreturn sub_1C440548(__int64 a1)
{
  int v1; // eax

  MEMORY[0xE71277701E85423B] = v1;
  *(_DWORD *)(a1 - 285603297) ^= v1;
  __asm { fstp8   st(6) }
  __halt();
}
// 1C440548: variable 'v1' is possibly undefined

//----- (000000001C72E4D7) ----------------------------------------------------
__int64 __fastcall sub_1C72E4D7()
{
  _DWORD *v0; // rdi
  _DWORD *v1; // rsi

  *v0 = *v1;
  return ((__int64 (*)(void))loc_344E0A26)();
}
// 1C72E4DB: variable 'v1' is possibly undefined
// 1C72E4DB: variable 'v0' is possibly undefined
// 1C72E4D7: using guessed type __int64 __fastcall sub_1C72E4D7();

//----- (000000001C8346E2) ----------------------------------------------------
#error "109263A5: cannot convert to microcode (funcsize=5)"

//----- (000000001C8973D7) ----------------------------------------------------
// bad sp value at call has been detected, the output may be wrong!
__int64 __fastcall sub_1C8973D7(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  __int64 v66; // rbx
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])((unsigned int)(2063629796 * *(_DWORD *)(v66 + 4 * a2)));
}
// 1C8973DF: bad sp value at call
// 1C8973D7: variable 'v66' is possibly undefined
// 1C8973D7: too many input arguments, some ignored

//----- (000000001C8E1055) ----------------------------------------------------
__int64 __fastcall sub_1C8E1055()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __asm { xlat }
  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000001C93BAD2) ----------------------------------------------------
__int64 sub_1C93BAD2()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000001C94E0A1) ----------------------------------------------------
void __fastcall __noreturn sub_1C94E0A1()
{
  char v0; // al
  _BYTE *v1; // rdi

  *v1 = v0;
  __halt();
}
// 1C94E0A3: variable 'v0' is possibly undefined
// 1C94E0A3: variable 'v1' is possibly undefined
// 1C94E0A1: using guessed type void __fastcall __noreturn sub_1C94E0A1();

//----- (000000001C974262) ----------------------------------------------------
void __noreturn sub_1C974262()
{
  __halt();
}
// 1C974262: using guessed type void __fastcall __noreturn sub_1C974262();

//----- (000000001C984DE1) ----------------------------------------------------
void sub_1C984DE1()
{
  __indword(6u);
  __asm { iretd }
}
// 1C984DE9: control flows out of bounds to 1C984DEB

//----- (000000001C9D2180) ----------------------------------------------------
void __fastcall sub_1C9D2180()
{
  __asm { outs    dx, byte ptr fs:[rsi] }
}

//----- (000000001C9DDAE4) ----------------------------------------------------
void __fastcall __noreturn sub_1C9DDAE4(__int64 a1)
{
  *(_BYTE *)(a1 + 1396394758) = -*(_BYTE *)(a1 + 1396394758);
  __halt();
}

//----- (000000001C9E78C6) ----------------------------------------------------
void __fastcall sub_1C9E78C6(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  _BYTE *v66; // rdi
  _BYTE *v67; // rsi

  *v66 = *v67;
  __asm { retnq   4700h }
}
// 1C9E78D2: control flows out of bounds to 1C9E78D6
// 1C9E78CF: variable 'v67' is possibly undefined
// 1C9E78CF: variable 'v66' is possibly undefined
// 1C9E78C6: too many input arguments, some ignored

//----- (000000001CA43BC2) ----------------------------------------------------
void __fastcall sub_1CA43BC2(char a1, unsigned __int16 a2)
{
  unsigned int v2; // ebx
  _DWORD *v3; // rdi

  __asm { outsb }
  *v3 <<= a1;
  __outdword(a2, v2);
  JUMPOUT(0xFFFFFFFFFFFFFFA8ui64);
}
// 1CA43BE3: control flows out of bounds to FFFFFFFFFFFFFFA8
// 1CA43BCD: variable 'v3' is possibly undefined
// 1CA43BD3: variable 'v2' is possibly undefined

//----- (000000001CB2A027) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_1CB2A027(__int64 a1, __int16 _DX)
{
  char v2; // cf
  __int64 v3; // rbx
  int v4; // edi

  __asm
  {
    insd
    insd
  }
  *(_DWORD *)(v3 - 104) += v4 + v2;
  __asm { iret }
}
// 1CB2A032: positive sp value 10 has been found
// 1CB2A010: control flows out of bounds to 1CB2A011
// 1CB2A00D: variable 'v4' is possibly undefined
// 1CB2A00D: variable 'v2' is possibly undefined
// 1CB2A00D: variable 'v3' is possibly undefined

//----- (000000001CBF9DE3) ----------------------------------------------------
void __noreturn sub_1CBF9DE3()
{
  __halt();
}
// 1CBF9DE3: using guessed type void __fastcall __noreturn sub_1CBF9DE3();

//----- (000000001CD1E5E4) ----------------------------------------------------
void __fastcall sub_1CD1E5E4(__int64 a1)
{
  __int64 v1; // rsi

  __indword(0xD5u);
  _enable();
  *(_BYTE *)(v1 - 18) *= 2;
  __asm { retn }
}
// 1CD1E5F2: unbalanced stack, ignored a potential tail call
// 1CD1E5EF: variable 'v1' is possibly undefined

//----- (000000001CD2AC81) ----------------------------------------------------
void __fastcall sub_1CD2AC81()
{
  __asm { retn }
}
// 1CD2AC82: unbalanced stack, ignored a potential tail call

//----- (000000001CDDD444) ----------------------------------------------------
__int64 __fastcall sub_1CDDD444(__int64 a1, __int16 _DX)
{
  int v3; // eax

  __asm { insd }
  v3 = (int)&unk_2252A433;
  LOBYTE(v3) = (unsigned __int8)&unk_2252A433 | 0x29;
  return (unsigned int)byte_2F90E81D ^ v3;
}

//----- (000000001CF6D8B8) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 sub_1CF6D8B8()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}
// 1CF6D8B9: positive sp value 8 has been found

//----- (000000001D000914) ----------------------------------------------------
void __fastcall sub_1D000914(__int64 a1, unsigned __int16 a2)
{
  unsigned __int32 v2; // eax

  v2 = __indword(a2);
  __outdword(0x4Cu, (__int16)v2);
  __asm { iret }
}
// 1D000923: control flows out of bounds to 1D000924

//----- (000000001D1F318E) ----------------------------------------------------
void __fastcall sub_1D1F318E()
{
  __asm { retn }
}
// 1D1F318F: unbalanced stack, ignored a potential tail call

//----- (000000001D43BC5A) ----------------------------------------------------
__int64 __fastcall sub_1D43BC5A(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53)
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __inbyte(0x6Cu);
  return MK_FP(retaddr[0], retaddr[0])(
           a1,
           a2,
           a3,
           a4,
           a5,
           a6,
           a7,
           a8,
           a9,
           a10,
           a11,
           a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48);
}

//----- (000000001D44E0B5) ----------------------------------------------------
__int64 sub_1D44E0B5()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000001D644FA6) ----------------------------------------------------
char __fastcall sub_1D644FA6(__int64 a1, char a2)
{
  char v2; // cf
  int v3; // eax
  __int64 v4; // rbx
  __int64 v5; // rdi
  __int64 v6; // rsi

  *(_BYTE *)(v5 + 4 * v4 + 27) -= v2 + a2;
  *(_DWORD *)(v6 - 1035260053) |= v3;
  _EAX = v3 - 1131138656;
  _RDX = &off_3B55F5A7;
  __asm
  {
    rcr     byte ptr [rdx+64h], 48h
    rep mov al, 0A4h
  }
  __outdword(0xC1u, _EAX);
  return _EAX;
}
// 1D644FA6: variable 'v5' is possibly undefined
// 1D644FA6: variable 'v4' is possibly undefined
// 1D644FA6: variable 'v2' is possibly undefined
// 1D644FAB: variable 'v3' is possibly undefined
// 1D644FAB: variable 'v6' is possibly undefined
// 3B55F5A7: using guessed type __int16 *__ptr32 off_3B55F5A7;

//----- (000000001D6D7B95) ----------------------------------------------------
void sub_1D6D7B95()
{
  _enable();
  __asm { iret }
}
// 1D6D7B96: control flows out of bounds to 1D6D7B97

//----- (000000001D861C86) ----------------------------------------------------
void __noreturn sub_1D861C86()
{
  __halt();
}
// 1D861C86: using guessed type void __fastcall __noreturn sub_1D861C86();

//----- (000000001D8A5F77) ----------------------------------------------------
void __fastcall sub_1D8A5F77(char a1)
{
  _BYTE *v1; // rdi

  *v1 = a1;
  __asm { retf }
}
// 1D8A5F84: unbalanced stack, ignored a potential tail call
// 1D8A5F7D: variable 'v1' is possibly undefined

//----- (000000001DB933D1) ----------------------------------------------------
void sub_1DB933D1()
{
  ;
}

//----- (000000001DCBB88B) ----------------------------------------------------
void sub_1DCBB88B()
{
  ;
}

//----- (000000001DD611FC) ----------------------------------------------------
void __noreturn sub_1DD611FC()
{
  __halt();
}
// 1DD611FC: using guessed type void __fastcall __noreturn sub_1DD611FC();

//----- (000000001DF055B5) ----------------------------------------------------
void __noreturn sub_1DF055B5()
{
  __halt();
}
// 1DF055B5: using guessed type void __fastcall __noreturn sub_1DF055B5();

//----- (000000001DF6055F) ----------------------------------------------------
void sub_1DF6055F()
{
  _enable();
  __asm { iret }
}
// 1DF60560: control flows out of bounds to 1DF60561

//----- (000000001E004116) ----------------------------------------------------
void sub_1E004116()
{
  __asm { iret }
}
// 1E004117: control flows out of bounds to 1E004118

//----- (000000001E00914F) ----------------------------------------------------
__int64 sub_1E00914F()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000001E0171E3) ----------------------------------------------------
void __fastcall __noreturn sub_1E0171E3()
{
  char v0; // ch
  _DWORD *v1; // rsi

  *((_BYTE *)v1 - 38) = v0;
  *v1 >>= 7;
  __halt();
}
// 1E0171E3: variable 'v0' is possibly undefined
// 1E0171E3: variable 'v1' is possibly undefined
// 1E0171E3: using guessed type void __fastcall __noreturn sub_1E0171E3();

//----- (000000001E092DCC) ----------------------------------------------------
void __fastcall sub_1E092DCC()
{
  __int64 v0; // rsi
  __int16 v1; // fps

  *(_WORD *)((char *)&unk_8100B96 + v0) = v1;
}
// 1E092DCC: variable 'v0' is possibly undefined

//----- (000000001E1351C7) ----------------------------------------------------
void __fastcall sub_1E1351C7(int a1)
{
  MEMORY[0x51F9EC89] ^= a1;
  __asm { iret }
}
// 1E1351DA: control flows out of bounds to 1E1351DB

//----- (000000001E156AEE) ----------------------------------------------------
void __noreturn sub_1E156AEE()
{
  __halt();
}
// 1E156AEE: using guessed type void __fastcall __noreturn sub_1E156AEE();

//----- (000000001E25D110) ----------------------------------------------------
void __noreturn sub_1E25D110()
{
  __halt();
}
// 1E25D110: using guessed type void __fastcall __noreturn sub_1E25D110();

//----- (000000001E2D42E2) ----------------------------------------------------
void __fastcall sub_1E2D42E2(_BYTE *a1)
{
  int v1; // eax
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __asm { fldenv  byte ptr [rbx] }
  LOBYTE(v1) = -108;
  --*a1;
  __asm { fstp8   st(2) }
  MK_FP(retaddr[0], retaddr[0])((unsigned int)(v1 - 44686712));
}
// 3DA2BA91: variable 'v1' is possibly undefined

//----- (000000001E3AF000) ----------------------------------------------------
__int64 __fastcall sub_1E3AF000(__int64 a1, __int64 a2)
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __asm { icebp }
  return MK_FP(retaddr[0], retaddr[0])(a1, *(_DWORD *)(a2 + 29) & (unsigned int)a2);
}

//----- (000000001E460A80) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_1E460A80()
{
  _DWORD *v0; // rdi
  _DWORD *v1; // rsi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  _enable();
  *(int *)((char *)&dword_33CC6D99 + 2 * (_QWORD)(v0 + 1)) += (*v1 < *v0) + 10;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 1E460A8E: positive sp value 8 has been found
// 1E460A84: variable 'v1' is possibly undefined
// 1E460A84: variable 'v0' is possibly undefined
// 33CC6D99: using guessed type int dword_33CC6D99;

//----- (000000001E5E9192) ----------------------------------------------------
__int64 __fastcall sub_1E5E9192()
{
  char v0; // pf
  __int64 result; // rax

  if ( v0 )
    return nullsub_3447(1100622889i64);
  return result;
}
// 1E5E919D: variable 'v0' is possibly undefined
// 1E5E9190: using guessed type __int64 __fastcall nullsub_3447(_QWORD);
// 1E5E9192: using guessed type __int64 __fastcall sub_1E5E9192();

//----- (000000001E84EA5D) ----------------------------------------------------
void __fastcall __noreturn sub_1E84EA5D()
{
  __int64 v0; // rax
  __int64 v1; // rbp
  int v2; // edi

  *(_DWORD *)(v1 + 8 * v0 - 118) ^= v2;
  JUMPOUT(0xFFFFFFFFB70AE16Cui64);
}
// 1E84EA61: control flows out of bounds to FFFFFFFFB70AE16C
// 1E84EA5D: variable 'v2' is possibly undefined
// 1E84EA5D: variable 'v1' is possibly undefined
// 1E84EA5D: variable 'v0' is possibly undefined
// 1E84EA5D: using guessed type void __fastcall __noreturn sub_1E84EA5D();

//----- (000000001E90BF7B) ----------------------------------------------------
void __noreturn sub_1E90BF7B()
{
  __halt();
}
// 1E90BF7B: using guessed type void __fastcall __noreturn sub_1E90BF7B();

//----- (000000001EA4B459) ----------------------------------------------------
__int64 sub_1EA4B459()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000001EADA49B) ----------------------------------------------------
__int64 __fastcall sub_1EADA49B()
{
  int v0; // eax
  _DWORD *v1; // rdi
  unsigned int v2; // esi
  unsigned int v3; // er10
  __int64 result; // rax

  *v1 = v0;
  result = v2;
  v1[1] = *(_DWORD *)v3;
  return result;
}
// 1EADA49C: variable 'v0' is possibly undefined
// 1EADA49C: variable 'v1' is possibly undefined
// 1EADA4AB: variable 'v2' is possibly undefined
// 1EADA4AB: variable 'v3' is possibly undefined
// 1EADA49B: using guessed type __int64 __fastcall sub_1EADA49B();

//----- (000000001ED6DBDC) ----------------------------------------------------
void __fastcall sub_1ED6DBDC()
{
  __asm
  {
    int     75h; IRQ13 - AT/XT286/PS50+ - 80287 ERROR
    frstor  byte ptr [rdi+38h]
    retn
  }
}
// 1ED6DBE6: unbalanced stack, ignored a potential tail call

//----- (000000001ED77E01) ----------------------------------------------------
__int64 __fastcall sub_1ED77E01(__int64 a1, __int64 a2)
{
  __int64 v2; // rsi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  LOBYTE(a1) = *(_BYTE *)(v2 + 73) | a1;
  LODWORD(a2) = (4194412292u * (unsigned __int64)MEMORY[0xFA01A704]) >> 32;
  BYTE1(a1) -= MEMORY[0x914F063CDE76A253];
  return MK_FP(retaddr[0], retaddr[0])(a1, a2);
}
// 1ED77E01: variable 'v2' is possibly undefined

//----- (000000001ED8B713) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_1ED8B713()
{
  unsigned int v0; // esi
  __int64 v1; // r10
  __int64 v2; // rcx
  unsigned int v3; // [rsp-18h] [rbp-18h]

  v2 = *(unsigned int *)v0;
  __outdword(0x2Eu, v3);
  __asm { int     0Ch;  - IRQ4 - COM1 INTERRUPT }
  MK_FP(*(_WORD *)(v1 - 2086623879 + 8), *(_QWORD *)(v1 - 2086623879))(v2);
  __halt();
}
// 1ED8B71A: positive sp value 20 has been found
// 1ED8B718: variable 'v0' is possibly undefined
// 1ED8B71C: variable 'v3' is possibly undefined
// 1ED8B720: variable 'v1' is possibly undefined
// 1ED8B713: using guessed type void __fastcall __noreturn sub_1ED8B713();

//----- (000000001EE9788E) ----------------------------------------------------
void __fastcall sub_1EE9788E()
{
  __asm { jmp     fword ptr [rsi-19F7C214h] }
}
// 1EE9788F: unbalanced stack, ignored a potential tail call

//----- (000000001EF1AEEA) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_1EF1AEEA(__int64 a1, int a2)
{
  __int64 v2; // rbp
  int v4; // eax
  bool v5; // cc
  char v6; // cf
  char v7; // al
  __int64 v8; // rbx
  unsigned int v9; // ebp
  __int64 v10; // rdi
  unsigned __int64 v12; // [rsp-8h] [rbp-8h]

  if ( v6 )
  {
    v2 = a2 ^ v9;
    _AL = v7 + 85;
    __asm { lock and al, 0B4h }
    v4 = MK_FP(*(_WORD *)(v10 + 1557781325), *(_QWORD *)(v10 + 1557781317))();
    *(_DWORD *)v10 = v4;
    v5 = (char)(v4 | *(_BYTE *)(v8 - 534737658)) <= 0;
    *(_BYTE *)(v8 - 534737658) |= v4;
    __debugbreak();
    if ( v5 )
    {
      *(_DWORD *)(v2 + 45) |= v4;
      JUMPOUT(0x1EF1AEAAi64);
    }
    JUMPOUT(0x17FA8472i64);
  }
  __writeeflags(v12);
  __asm { outsb }
  __indword(0x4Fu);
  __asm { retfq   0D841h }
  JUMPOUT(0x1EF1AF7Ci64);
}
// 1EF1AF41: positive sp value 8 has been found
// 1EF1AEA8: control flows out of bounds to 1EF1AEAA
// 1EF1AF78: control flows out of bounds to 1EF1AF7C
// 1EF1AF1A: control flows out of bounds to 17FA8472
// 1EF1AEEA: variable 'v6' is possibly undefined
// 1EF1AE8B: variable 'v9' is possibly undefined
// 1EF1AE8E: variable 'v7' is possibly undefined
// 1EF1AE93: variable 'v10' is possibly undefined
// 1EF1AF40: variable 'v12' is possibly undefined
// 1EF1AE9A: variable 'v8' is possibly undefined
// 17FA7C20: using guessed type __int64 qword_17FA7C20[512];

//----- (000000001EF65498) ----------------------------------------------------
__int64 sub_1EF65498()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000001EFCDF58) ----------------------------------------------------
void __fastcall sub_1EFCDF58(__int64 a1, __int16 _DX)
{
  _BYTE *v2; // rax
  int v3; // ebx
  __int64 v4; // rbp
  int v5; // edi
  char v6; // fl
  bool v8; // cf

  __asm { insd }
  byte_1E5A8AF[v4] += v3;
  BYTE1(v2) = v6;
  v8 = __CFADD__(v5, v3);
  _RBX = (unsigned int)(v5 + v3);
  *v2 += (_BYTE)v2 + v8;
  __asm { rcr     dword ptr [rbx], 0CFh }
  __debugbreak();
  __asm { iret }
}
// 1EFCDF72: control flows out of bounds to 1EFCDF73
// 1EFCDF63: variable 'v3' is possibly undefined
// 1EFCDF63: variable 'v4' is possibly undefined
// 1EFCDF6A: variable 'v5' is possibly undefined
// 1EFCDF6C: variable 'v2' is possibly undefined

//----- (000000001F06CB75) ----------------------------------------------------
void sub_1F06CB75()
{
  __asm { retf }
}
// 1F06CB76: unbalanced stack, ignored a potential tail call

//----- (000000001F133091) ----------------------------------------------------
void sub_1F133091()
{
  __asm { iret }
}
// 1F13309A: control flows out of bounds to 1F13309B

//----- (000000001F297192) ----------------------------------------------------
void __fastcall __noreturn sub_1F297192(__int64 a1, __int16 _DX)
{
  __asm { insb }
  __halt();
}

//----- (000000001F2CA505) ----------------------------------------------------
void __fastcall sub_1F2CA505()
{
  __asm { retn }
}
// 1F2CA506: unbalanced stack, ignored a potential tail call

//----- (000000001F371C5E) ----------------------------------------------------
void __fastcall sub_1F371C5E()
{
  unsigned __int8 v0; // al

  __outbyte(0x8Au, v0);
  __indword(0xD3u);
  __asm { iret }
}
// 1F371C67: control flows out of bounds to 1F371C68
// 1F371C63: variable 'v0' is possibly undefined

//----- (000000001F386A49) ----------------------------------------------------
void __fastcall sub_1F386A49()
{
  __asm { retn }
}
// 1F386A4A: unbalanced stack, ignored a potential tail call

//----- (000000001F3E14F2) ----------------------------------------------------
void sub_1F3E14F2()
{
  __asm { iret }
}
// 1F3E14F3: control flows out of bounds to 1F3E14F4

//----- (000000001F44407B) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_1F44407B()
{
  _enable();
  __asm { retfw   0DB1Fh }
}
// 1F44407E: positive sp value 8 has been found
// 1F444082: control flows out of bounds to 1F444086

//----- (000000001F459C66) ----------------------------------------------------
void __fastcall sub_1F459C66()
{
  __int64 v0; // rax
  double v1; // st7

  *(_DWORD *)(v0 - 1481951638) = (int)v1;
  __asm { iret }
}
// 1F459C6C: control flows out of bounds to 1F459C6D
// 1F459C66: variable 'v1' is possibly undefined
// 1F459C66: variable 'v0' is possibly undefined

//----- (000000001F515532) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_1F515532(__int64 a1, _DWORD *a2)
{
  *a2 = (_DWORD)a2;
  __asm { iret }
}
// 1F51554D: positive sp value 10 has been found
// 1F515556: control flows out of bounds to 1F515557

//----- (000000001F59879A) ----------------------------------------------------
void sub_1F59879A()
{
  _enable();
  __asm { iret }
}
// 1F59879F: control flows out of bounds to 1F5987A0

//----- (000000001F8B32DB) ----------------------------------------------------
void sub_1F8B32DB()
{
  __asm { jmp     rsp }
}
// 1F8B32DD: unbalanced stack, ignored a potential tail call

//----- (000000001FB12887) ----------------------------------------------------
void sub_1FB12887()
{
  __asm
  {
    icebp
    iret
  }
}
// 1FB1289C: control flows out of bounds to 1FB1289D

//----- (000000001FBBB1A7) ----------------------------------------------------
__int64 __fastcall sub_1FBBB1A7(
        int a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62)
{
  char v62; // cf
  __int64 v63; // rbp
  __int64 v64; // rsi
  __int64 v65; // rcx
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  v65 = a1 - ((unsigned int)v62 + *(_DWORD *)(a2 - 49));
  *(_DWORD *)(v65 - 694321065) -= v64;
  *(_BYTE *)(v63 + 1803307074) = ~*(_BYTE *)(v63 + 1803307074);
  return MK_FP(retaddr[0], retaddr[0])(
           v65,
           v64,
           a3,
           a4,
           a5,
           a6,
           a7,
           a8,
           a9,
           a10,
           a11,
           a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62);
}
// 1FBBB1A7: variable 'v62' is possibly undefined
// 1FBBB1B3: variable 'v64' is possibly undefined
// 1FBBB1B9: variable 'v63' is possibly undefined

//----- (000000001FBC3815) ----------------------------------------------------
void sub_1FBC3815()
{
  ;
}

//----- (000000001FC0B683) ----------------------------------------------------
void __fastcall sub_1FC0B683()
{
  char v0; // al
  _BYTE *v1; // rsi

  *v1 = v0;
  __asm { retf }
}
// 1FC0B686: unbalanced stack, ignored a potential tail call
// 1FC0B684: variable 'v0' is possibly undefined
// 1FC0B684: variable 'v1' is possibly undefined

//----- (000000001FE0CC56) ----------------------------------------------------
__int64 sub_1FE0CC56()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __indword(0x57u);
  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000001FEBF64D) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_1FEBF64D()
{
  __asm { iret }
}
// 1FEBF64E: positive sp value 8 has been found
// 1FEBF64E: control flows out of bounds to 1FEBF64F

//----- (000000001FF557D3) ----------------------------------------------------
__int64 __fastcall sub_1FF557D3(int a1)
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])((unsigned int)(a1 >> a1));
}

//----- (0000000020133132) ----------------------------------------------------
__int64 __fastcall sub_20133132(int a1)
{
  int v2; // ebx
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  _RBX = (unsigned int)(a1 + v2);
  __asm { xlat }
  return MK_FP(retaddr[0], retaddr[0])();
}
// 20133132: variable 'v2' is possibly undefined

//----- (0000000020261031) ----------------------------------------------------
void __fastcall sub_20261031()
{
  __int64 v1; // rdi

  *(_BYTE *)(v1 - 74) >>= 1;
  __asm { jmp     qword ptr [rax+39h] }
}
// 20261043: unbalanced stack, ignored a potential tail call
// 20261038: variable 'v1' is possibly undefined

//----- (00000000203D592A) ----------------------------------------------------
char __fastcall sub_203D592A()
{
  char v0; // al
  __int64 v1; // rbx
  __int64 v2; // rbp
  char result; // al

  __asm { rcr     byte ptr [rdi-7F1541FAh], 0D9h }
  result = v0 & 0x5D;
  *(_DWORD *)(v2 + 4 * v1 - 1463202040) ^= _RDI;
  return result;
}
// 203D5931: variable 'v0' is possibly undefined
// 203D5933: variable '_RDI' is possibly undefined
// 203D5933: variable 'v2' is possibly undefined
// 203D5933: variable 'v1' is possibly undefined

//----- (000000002051245A) ----------------------------------------------------
void sub_2051245A()
{
  __asm { iret }
}
// 20512466: control flows out of bounds to 20512467

//----- (00000000205B229E) ----------------------------------------------------
__int64 sub_205B229E()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000002066F8D3) ----------------------------------------------------
__int64 __fastcall sub_2066F8D3()
{
  __int64 v0; // rsi
  int v1; // ecx
  unsigned int v2; // esp

  ((void (*)(void))loc_2EAD25F1)();
  *(_DWORD *)(v0 + 1778742671) -= v1;
  return v2;
}
// 2066F8DB: variable 'v0' is possibly undefined
// 2066F8DB: variable 'v1' is possibly undefined
// 2066F8E3: variable 'v2' is possibly undefined
// 2066F8D3: using guessed type __int64 __fastcall sub_2066F8D3();

//----- (0000000020738593) ----------------------------------------------------
__int64 __fastcall sub_20738593()
{
  unsigned int v0; // ebp

  return v0;
}
// 20738597: variable 'v0' is possibly undefined
// 20738593: using guessed type __int64 __fastcall sub_20738593();

//----- (000000002078296E) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
unsigned __int64 __fastcall sub_2078296E(__int64 a1, unsigned __int16 a2)
{
  unsigned __int32 v3; // eax
  unsigned __int64 result; // rax

  __asm { frstor  byte ptr [rdi+1] }
  v3 = __indword(a2);
  result = *(_QWORD *)&v3 | 0xFFFFFFFFD0CBFB14ui64;
  _enable();
  return result;
}
// 20782979: positive sp value 8 has been found

//----- (00000000208B3B25) ----------------------------------------------------
void __fastcall __noreturn sub_208B3B25()
{
  unsigned int v0; // eax

  __outdword(0x6Au, v0);
  __halt();
}
// 208B3B25: variable 'v0' is possibly undefined
// 208B3B25: using guessed type void __fastcall __noreturn sub_208B3B25();

//----- (0000000020A42790) ----------------------------------------------------
void __fastcall __noreturn sub_20A42790(_DWORD *a1)
{
  *a1 = -*a1;
  __halt();
}

//----- (0000000020CA97CE) ----------------------------------------------------
void __fastcall __noreturn sub_20CA97CE()
{
  char v0; // al

  MEMORY[0x180EB0EFC506188C] = v0;
  __halt();
}
// 20CA97CF: variable 'v0' is possibly undefined
// 20CA97CE: using guessed type void __fastcall __noreturn sub_20CA97CE();

//----- (0000000020E7AEAD) ----------------------------------------------------
void __fastcall __noreturn sub_20E7AEAD()
{
  __asm { outsd }
  __halt();
}
// 20E7AEAD: using guessed type void __fastcall __noreturn sub_20E7AEAD();

//----- (0000000020F2BAAC) ----------------------------------------------------
void sub_20F2BAAC()
{
  __asm { iret }
}
// 20F2BAAE: control flows out of bounds to 20F2BAAF

//----- (0000000020F48AAD) ----------------------------------------------------
__int64 __fastcall sub_20F48AAD()
{
  unsigned int v0; // esi

  return v0;
}
// 20F48AAD: variable 'v0' is possibly undefined
// 20F48AAD: using guessed type __int64 __fastcall sub_20F48AAD();

//----- (0000000021062F82) ----------------------------------------------------
void __noreturn sub_21062F82()
{
  __asm { rep hlt }
}
// 21062F8E: control flows out of bounds to 21062F91
// 21062F82: using guessed type void __fastcall __noreturn sub_21062F82();

//----- (0000000021080FE4) ----------------------------------------------------
void __fastcall sub_21080FE4(
        __int64 a1,
        char a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23)
{
  unsigned int v23; // eax

  *(_BYTE *)v23 = a2;
  ((void (*)(void))loc_19DD1B8E)();
  __asm { retf    93h }
}
// 21080FFA: unbalanced stack, ignored a potential tail call
// 21080FEA: variable 'v23' is possibly undefined

//----- (0000000021082716) ----------------------------------------------------
void __fastcall sub_21082716(__int64 a1, unsigned __int16 a2)
{
  _DWORD *v2; // rdi
  unsigned __int32 v4; // eax
  unsigned __int32 v5; // eax
  unsigned __int32 *v6; // rdi

  v4 = __indword(a2);
  v5 = (v4 ^ 0xE9D7F8AE) & 0xBE301DD5;
  __asm { outsb }
  *v2 = *_RSI;
  v6 = v2 + 1;
  *v6 = v5;
  __outbyte(0xEEu, v5);
  *((_BYTE *)v6 + 4) = v5;
  __asm { retf }
}
// 21082730: unbalanced stack, ignored a potential tail call
// 21082726: variable '_RSI' is possibly undefined
// 21082726: variable 'v2' is possibly undefined

//----- (000000002116364C) ----------------------------------------------------
__int64 __fastcall sub_2116364C(__int64 a1, __int64 _RDX)
{
  char v2; // cf
  __int64 v3; // rbx
  char v4; // t0

  __asm { insb }
  __readeflags();
  BYTE1(_RDX) += *(_BYTE *)(_RDX - 91) + v2;
  v4 = BYTE1(v3);
  BYTE1(v3) = BYTE1(a1);
  BYTE1(a1) = v4;
  *(_DWORD *)(v3 + 18) = __ROR4__(*(_DWORD *)(v3 + 18), 1);
  return MEMORY[0x6D6F59F7](a1, _RDX);
}
// 211636A2: variable 'v2' is possibly undefined
// 211636A5: variable 'v3' is possibly undefined
// 6D6F59F7: using guessed type __int64 (__fastcall *)(_QWORD, _QWORD);

//----- (00000000211CAFEE) ----------------------------------------------------
__int16 __fastcall sub_211CAFEE()
{
  char v0; // ch
  __int64 v1; // rbp
  __int16 result; // ax
  char v3; // [rsp+8h] [rbp-4Eh]

  *(_BYTE *)(v1 - 1284706798) = v0;
  LOBYTE(result) = MEMORY[0x71D227509272F11];
  HIBYTE(result) = v3;
  return result;
}
// 211CAFF9: variable 'v0' is possibly undefined
// 211CAFF9: variable 'v1' is possibly undefined
// 211CB008: variable 'v3' is possibly undefined

//----- (0000000021214272) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_21214272(__int64 a1, unsigned __int16 a2)
{
  __int64 result; // rax
  char v3; // bl
  __int64 v4; // rbp
  double v5; // st5
  double v6; // st7
  double v7; // st5
  __int64 v8; // [rsp-10h] [rbp-10h]

  __outbyte(a2, result);
  v7 = (double)*(__int16 *)(v8 + 1924374117) / v5;
  if ( __SETP__(v3 + a2, 0) )
    v7 = v6;
  *(_WORD *)(v4 + 28) = (__int16)v7;
  while ( (char)(v3 + a2) < 0 == __OFADD__(v3, (_BYTE)a2) )
    ;
  return result;
}
// 21214282: positive sp value 10 has been found
// 21214272: variable 'result' is possibly undefined
// 21214276: variable 'v8' is possibly undefined
// 21214276: variable 'v5' is possibly undefined
// 21214273: variable 'v3' is possibly undefined
// 2121427C: variable 'v6' is possibly undefined
// 2121427E: variable 'v4' is possibly undefined

//----- (000000002123A32D) ----------------------------------------------------
void sub_2123A32D()
{
  __asm { retf }
}
// 2123A32E: unbalanced stack, ignored a potential tail call

//----- (0000000021310A09) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_21310A09(__int64 a1, unsigned __int16 a2)
{
  __inbyte(a2);
  __asm { iret }
}
// 21310A2B: positive sp value 8 has been found
// 21310A2B: control flows out of bounds to 21310A2C

//----- (00000000214A32DB) ----------------------------------------------------
void __fastcall __noreturn sub_214A32DB()
{
  int v0; // ebx
  __int64 v1; // rbp
  _BYTE *v2; // rdi

  *(_DWORD *)(v1 + 14) = v0;
  *v2 = v0;
  __halt();
}
// 214A32DB: variable 'v0' is possibly undefined
// 214A32DB: variable 'v1' is possibly undefined
// 214A32E3: variable 'v2' is possibly undefined
// 214A32DB: using guessed type void __fastcall __noreturn sub_214A32DB();

//----- (00000000214F0DA2) ----------------------------------------------------
__int64 __fastcall sub_214F0DA2(__int16 a1)
{
  __int64 v1; // rbp
  _BYTE *v2; // rdi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(int *)((char *)&dword_B6520CF + (_QWORD)v2) = *(unsigned int *)((char *)&dword_B6520CF + (_QWORD)v2) >> 15;
  *v2 -= HIBYTE(a1);
  *(_BYTE *)(v1 - 870538054) &= a1;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 214F0DA4: variable 'v2' is possibly undefined
// 214F0DB9: variable 'v1' is possibly undefined
// B6520CF: using guessed type int dword_B6520CF;

//----- (000000002174B745) ----------------------------------------------------
void __fastcall sub_2174B745(char a1)
{
  __int64 v1; // rbp

  *(_BYTE *)(v1 + 751306732) += a1;
  __asm { iret }
}
// 2174B74D: control flows out of bounds to 2174B74E
// 2174B745: variable 'v1' is possibly undefined

//----- (00000000217BDFCA) ----------------------------------------------------
__int64 __fastcall sub_217BDFCA(__int64 a1, unsigned int a2)
{
  char v2; // cf
  int v3; // eax
  int v4; // ebx
  _BYTE *v5; // rsi

  MEMORY[0x9466A0D6095114AA] = v3;
  LOBYTE(v3) = *v5;
  return (unsigned int)(a2 < (unsigned int)v2 + v4) + v3 + 1746274663;
}
// 217BDFCB: variable 'v3' is possibly undefined
// 217BDFD4: variable 'v5' is possibly undefined
// 217BDFD7: variable 'v2' is possibly undefined
// 217BDFD7: variable 'v4' is possibly undefined

//----- (000000002180B9D8) ----------------------------------------------------
void __fastcall __noreturn sub_2180B9D8(__int64 a1, __int64 a2)
{
  unsigned int v2; // esp
  char v3; // al

  v3 = v2;
  *(_BYTE *)*(unsigned int *)((char *)&dword_3A7D0D56 + a2) = v3;
  __outdword(a2, v2);
  __halt();
}
// 2180B9E5: variable 'v2' is possibly undefined
// 3A7D0D56: using guessed type int dword_3A7D0D56;

//----- (0000000021824783) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
_DWORD *__fastcall sub_21824783()
{
  _DWORD *result; // rax
  int v1; // ebx

  *result |= v1;
  return result;
}
// 21824787: positive sp value 2CA has been found
// 2182478F: variable 'v1' is possibly undefined
// 2182478F: variable 'result' is possibly undefined

//----- (0000000021A69176) ----------------------------------------------------
void sub_21A69176()
{
  __asm { retf }
}
// 21A6917C: unbalanced stack, ignored a potential tail call

//----- (0000000021C53075) ----------------------------------------------------
void __noreturn sub_21C53075()
{
  __halt();
}
// 21C53075: using guessed type void __fastcall __noreturn sub_21C53075();

//----- (0000000021C901AA) ----------------------------------------------------
void __fastcall __noreturn sub_21C901AA()
{
  char v0; // ah
  _BYTE *v1; // rbx

  *v1 ^= v0;
  __halt();
}
// 21C901AA: variable 'v0' is possibly undefined
// 21C901AA: variable 'v1' is possibly undefined
// 21C901AA: using guessed type void __fastcall __noreturn sub_21C901AA();

//----- (0000000021C95BD3) ----------------------------------------------------
char __fastcall sub_21C95BD3(__int64 a1, int a2)
{
  __int64 v2; // rax
  int v3; // ebx
  __int64 v4; // rbp
  int v6; // ebx
  char result; // al

  v6 = *(_DWORD *)(v2 - 2061562397) | v3;
  __asm { outs    dx, byte ptr fs:[rsi] }
  LOBYTE(v4) = MEMORY[0xFFFFFFFFBFE5524B] & v4;
  *(_DWORD *)(v4 + 343860804) |= v6;
  __outbyte(0x8Au, v2 - 26);
  MEMORY[0xFFFFFFFFBFE55259] |= v4;
  *(_DWORD *)(a1 - 801276613) |= a2;
  result = MEMORY[0x45799772203737DB];
  _InterlockedExchange((volatile __int32 *)(_RSI + 2127300000), _RSI);
  return result;
}
// 21C95BD9: variable 'v2' is possibly undefined
// 21C95BD9: variable 'v3' is possibly undefined
// 21C95BE4: variable 'v4' is possibly undefined
// 21C95C0B: variable '_RSI' is possibly undefined

//----- (0000000021EA806D) ----------------------------------------------------
__int64 sub_21EA806D()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000021EB84E7) ----------------------------------------------------
void __fastcall sub_21EB84E7(__int64 a1, __int64 a2)
{
  __asm { jmp     fword ptr ds:0FFFFFFFFFA0EC8BFh[rdx] }
}
// 21EB84E8: unbalanced stack, ignored a potential tail call

//----- (0000000021FF801E) ----------------------------------------------------
void __fastcall sub_21FF801E(char a1)
{
  __int64 v1; // rax

  *(_DWORD *)(v1 + 918159711) >>= a1;
  __asm { retnq }
}
// 21FF802E: control flows out of bounds to 21FF8031
// 21FF801F: variable 'v1' is possibly undefined

//----- (0000000022023E67) ----------------------------------------------------
void sub_22023E67()
{
  __asm { iret }
}
// 22023E70: control flows out of bounds to 22023E71

//----- (000000002203E44A) ----------------------------------------------------
__int64 sub_2203E44A()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (00000000220C3029) ----------------------------------------------------
__int64 __fastcall sub_220C3029(__int64 a1)
{
  __int64 v1; // rbx
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])(a1, v1);
}
// 220C302B: variable 'v1' is possibly undefined

//----- (00000000223116BC) ----------------------------------------------------
void __fastcall __noreturn sub_223116BC()
{
  _BYTE *v0; // rdi
  _BYTE *v1; // rsi

  *v0 = *v1;
  __halt();
}
// 223116BE: variable 'v1' is possibly undefined
// 223116BE: variable 'v0' is possibly undefined
// 223116BC: using guessed type void __fastcall __noreturn sub_223116BC();

//----- (0000000022357A32) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_22357A32(__int64 a1, __int16 _DX)
{
  unsigned __int64 v3; // [rsp-10h] [rbp-18h]

  __writeeflags(v3);
  __asm
  {
    insb
    iret
  }
}
// 22357A42: positive sp value 10 has been found
// 22357A44: control flows out of bounds to 22357A45
// 22357A3C: variable 'v3' is possibly undefined

//----- (0000000022377D97) ----------------------------------------------------
void __fastcall __noreturn sub_22377D97(__int64 a1, __int16 _DX)
{
  unsigned __int8 v2; // al

  __outbyte(0xEFu, v2);
  __asm
  {
    fincstp
    insd
  }
  __halt();
}
// 22377D9C: variable 'v2' is possibly undefined

//----- (00000000225634C0) ----------------------------------------------------
void sub_225634C0()
{
  __asm { iret }
}
// 225634C5: control flows out of bounds to 225634C6

//----- (0000000022607853) ----------------------------------------------------
void __noreturn sub_22607853()
{
  __halt();
}
// 22607853: using guessed type void __fastcall __noreturn sub_22607853();

//----- (0000000022976D49) ----------------------------------------------------
void __noreturn sub_22976D49()
{
  __halt();
}
// 22976D49: using guessed type void __fastcall __noreturn sub_22976D49();

//----- (0000000022B72E53) ----------------------------------------------------
void __fastcall sub_22B72E53()
{
  int v0; // eax
  _BYTE *v1; // rbx
  __int64 v2; // rax

  v2 = (unsigned int)(v0 - 8373770);
  *(_DWORD *)(v2 + 46) += (_DWORD)v1;
  __outdword(0x64u, v2);
  ++*v1;
  __asm { iret }
}
// 22B72E70: control flows out of bounds to 22B72E71
// 22B72E53: variable 'v0' is possibly undefined
// 22B72E58: variable 'v1' is possibly undefined

//----- (0000000022CAB4FE) ----------------------------------------------------
void sub_22CAB4FE()
{
  __asm { iret }
}
// 22CAB507: control flows out of bounds to 22CAB508

//----- (0000000022CB5218) ----------------------------------------------------
void __fastcall sub_22CB5218(_DWORD *a1)
{
  int v1; // ebx
  __int64 v2; // rbp
  __int64 v3; // rsi
  bool v4; // cf
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  while ( 1 )
  {
    _InterlockedSub((volatile signed __int32 *)(v3 - 126), v3);
    __indword(0xB2u);
    v4 = *a1 < (unsigned int)a1;
    *a1 -= (_DWORD)a1;
    if ( !v4 )
      break;
    BYTE1(v1) -= v1;
    *(_DWORD *)(v2 + 52) &= v1;
  }
  MK_FP(retaddr[0], retaddr[0])();
}
// 22CB5218: variable 'v3' is possibly undefined
// 22CB520D: variable 'v1' is possibly undefined
// 22CB5215: variable 'v2' is possibly undefined

//----- (0000000022D71731) ----------------------------------------------------
void sub_22D71731()
{
  __asm { iret }
}
// 22D71733: control flows out of bounds to 22D71734

//----- (0000000023030ED4) ----------------------------------------------------
void __noreturn sub_23030ED4()
{
  __inbyte(0x98u);
  __halt();
}
// 23030ED4: using guessed type void __fastcall __noreturn sub_23030ED4();

//----- (000000002321C682) ----------------------------------------------------
void __fastcall sub_2321C682(int a1, __int16 a2)
{
  _DWORD *v2; // rdi

  MEMORY[0x53EF209F] += a2;
  byte_7A09E2F[a1] ^= HIBYTE(a2);
  _disable();
  _disable();
  *v2 = a1;
  __asm { retf }
}
// 2321C6A7: unbalanced stack, ignored a potential tail call
// 2321C6A4: variable 'v2' is possibly undefined

//----- (000000002324FFA8) ----------------------------------------------------
void __fastcall sub_2324FFA8(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al

  __outbyte(a2, v2);
  __asm { retf }
}
// 2324FFAA: unbalanced stack, ignored a potential tail call
// 2324FFA9: variable 'v2' is possibly undefined

//----- (0000000023371DDF) ----------------------------------------------------
void sub_23371DDF()
{
  __asm { iret }
}
// 23371DE4: control flows out of bounds to 23371DE5

//----- (000000002356B956) ----------------------------------------------------
void __fastcall sub_2356B956(__int64 a1, __int64 a2, __int64 _R8)
{
  int v3; // ebp

  MEMORY[0xFFFFFFFFC1CD0F3C] |= v3;
  __asm
  {
    rcl     qword ptr [r8], 9Ch
    iret
  }
}
// 2356B976: control flows out of bounds to 2356B977
// 2356B956: variable 'v3' is possibly undefined

//----- (000000002358A034) ----------------------------------------------------
__int64 __fastcall sub_2358A034(__int64 a1, int _EDX)
{
  __int64 result; // rax

  _disable();
  *(_DWORD *)((char *)&unk_6F + *(unsigned int *)(result - 2123043542)) |= _EDX;
  __asm { insb }
  return result;
}
// 2358A035: variable 'result' is possibly undefined

//----- (0000000023686067) ----------------------------------------------------
char __fastcall sub_23686067()
{
  _DWORD *v0; // rsi

  return *v0 + 39;
}
// 2368606A: variable 'v0' is possibly undefined

//----- (00000000236EFFEF) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_236EFFEF()
{
  char v0; // cf
  char v1; // al
  int v2; // ebp
  _DWORD *v3; // rdi

  *(_DWORD *)((char *)v3 - 1777344006) *= 2;
  __outbyte(0xCDEBu, v1 - (v0 - 107));
  *v3 = v2;
  __halt();
}
// 236F0008: positive sp value 8 has been found
// 236EFFFB: variable 'v3' is possibly undefined
// 236EFFEF: variable 'v1' is possibly undefined
// 236EFFEF: variable 'v0' is possibly undefined
// 236F0005: variable 'v2' is possibly undefined
// 236EFFEF: using guessed type void __fastcall __noreturn sub_236EFFEF();

//----- (0000000023761473) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_23761473(unsigned int *a1)
{
  char v1; // fl
  char v2; // cf
  unsigned __int64 v4; // [rsp-8h] [rbp-8h]

  __writeeflags(v4);
  BYTE1(a1) += v1 + v2;
  return MK_FP(*((_WORD *)a1 + 2), *a1)();
}
// 23761475: positive sp value 8 has been found
// 23761474: variable 'v4' is possibly undefined
// 2376147B: variable 'v2' is possibly undefined

//----- (000000002380240A) ----------------------------------------------------
void __fastcall sub_2380240A(__int64 a1, _BYTE *a2)
{
  _BYTE *v2; // rdi

  *a2 |= BYTE1(a2);
  *v2 -= (_BYTE)a2;
}
// 23802421: variable 'v2' is possibly undefined

//----- (00000000238CD186) ----------------------------------------------------
void __fastcall sub_238CD186(__int64 a1)
{
  char v1; // cf
  __int64 v2; // rbx

  *(_QWORD *)(2 * v2 - 1372729214) -= v1 + a1;
  __asm { iret }
}
// 238CD18E: control flows out of bounds to 238CD18F
// 238CD186: variable 'v2' is possibly undefined
// 238CD186: variable 'v1' is possibly undefined

//----- (0000000023BF26F3) ----------------------------------------------------
void __fastcall sub_23BF26F3(_DWORD *a1)
{
  *a1 &= 0x6185F82Du;
  JUMPOUT(0xFFFFFFFFFFFFFFB8ui64);
}
// 23BF270B: control flows out of bounds to FFFFFFFFFFFFFFB8

//----- (0000000023C398C9) ----------------------------------------------------
void __fastcall __noreturn sub_23C398C9(
        __int64 _RCX,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9,
        int a10,
        int a11,
        int a12,
        int a13,
        __int64 a14)
{
  int v14; // eax
  __int64 v15; // rsi
  unsigned int v17; // eax

  v17 = *(int *)((char *)&dword_300940E9 + _RCX) * v14;
  *(_BYTE *)(v15 - 49) ^= BYTE1(v17);
  *(_DWORD *)((char *)&a14 + v17 + 4) |= 0xAEC30330;
  __asm { rcr     byte ptr [r14], cl }
  __halt();
}
// 23C398C9: variable 'v14' is possibly undefined
// 23C398D1: variable 'v15' is possibly undefined
// 300940E9: using guessed type int dword_300940E9;

//----- (0000000023D0A6FA) ----------------------------------------------------
void __fastcall sub_23D0A6FA()
{
  __int64 v0; // rsi

  *(_BYTE *)(v0 + 5) = -*(_BYTE *)(v0 + 5);
  __asm { iret }
}
// 23D0A6FF: control flows out of bounds to 23D0A700
// 23D0A6FC: variable 'v0' is possibly undefined

//----- (0000000023F60BE2) ----------------------------------------------------
void sub_23F60BE2()
{
  ;
}

//----- (0000000023FB687B) ----------------------------------------------------
void __fastcall sub_23FB687B()
{
  char v0; // al

  MEMORY[0xEA1355F49A11B60C] = v0;
  __asm { iret }
}
// 23FB6884: control flows out of bounds to 23FB6885
// 23FB687B: variable 'v0' is possibly undefined

//----- (0000000023FC7198) ----------------------------------------------------
#error "23FC7198: function frame is wrong (funcsize=0)"

//----- (00000000240003B3) ----------------------------------------------------
void __noreturn sub_240003B3()
{
  __halt();
}
// 240003B3: using guessed type void __fastcall __noreturn sub_240003B3();

//----- (0000000024016E01) ----------------------------------------------------
void __noreturn sub_24016E01()
{
  __halt();
}
// 24016E01: using guessed type void __fastcall __noreturn sub_24016E01();

//----- (0000000024082C2E) ----------------------------------------------------
void sub_24082C2E()
{
  __readeflags();
  __asm { iret }
}
// 24082C3C: control flows out of bounds to 24082C3D

//----- (00000000240CA5C9) ----------------------------------------------------
void __noreturn sub_240CA5C9()
{
  __halt();
}
// 240CA5C9: using guessed type void __fastcall __noreturn sub_240CA5C9();

//----- (00000000240CC319) ----------------------------------------------------
void __fastcall __noreturn sub_240CC319()
{
  __asm { outs    dx, byte ptr [esi] }
  __halt();
}
// 240CC319: using guessed type void __fastcall __noreturn sub_240CC319();

//----- (00000000240DF633) ----------------------------------------------------
void __fastcall sub_240DF633()
{
  _DWORD *v0; // rdi
  _DWORD *v1; // rsi

  *v0 = *v1;
  __asm { retf }
}
// 240DF640: unbalanced stack, ignored a potential tail call
// 240DF634: variable 'v1' is possibly undefined
// 240DF634: variable 'v0' is possibly undefined

//----- (00000000240FF5EA) ----------------------------------------------------
void sub_240FF5EA()
{
  ;
}

//----- (00000000241555C5) ----------------------------------------------------
void __fastcall sub_241555C5(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  __asm { retfq   2F04h }
}
// 241555C6: control flows out of bounds to 241555CA
// 241555C5: too many input arguments, some ignored

//----- (0000000024257148) ----------------------------------------------------
void __fastcall sub_24257148(__int64 a1)
{
  BYTE1(a1) = 99;
  __asm
  {
    outsb
    retn
  }
}
// 24257151: unbalanced stack, ignored a potential tail call

//----- (00000000242B5949) ----------------------------------------------------
void __noreturn sub_242B5949()
{
  __halt();
}
// 242B5949: using guessed type void __fastcall __noreturn sub_242B5949();

//----- (00000000242BF379) ----------------------------------------------------
__int64 __fastcall sub_242BF379(unsigned int *a1)
{
  return MK_FP(*((_WORD *)a1 + 2), *a1)();
}

//----- (00000000242E8913) ----------------------------------------------------
void sub_242E8913()
{
  __asm { iret }
}
// 242E8914: control flows out of bounds to 242E8915

//----- (00000000245D8D98) ----------------------------------------------------
#error "245D8DC0: cannot convert to microcode (funcsize=20)"

//----- (00000000245FE930) ----------------------------------------------------
__int64 sub_245FE930()
{
  unsigned int v0; // esp

  return v0;
}
// 245FE930: variable 'v0' is possibly undefined
// 245FE930: using guessed type __int64 __fastcall sub_245FE930();

//----- (000000002461D83A) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_2461D83A(int a1)
{
  bool v1; // zf
  bool v2; // pf
  int v3; // esp
  __int64 v4; // rbp
  int v5; // edi
  __int64 v7; // r10
  __int64 v8; // r11
  int v9; // ecx

  v9 = a1 - v3;
  BYTE1(v9) = v9;
  v1 = *(_DWORD *)(v4 + 12) == v5;
  v2 = __SETP__(*(_DWORD *)(v4 + 12), v5);
  __asm { outsd }
  if ( !v2 )
  {
    if ( v1 )
    {
      *(_DWORD *)(_RSI + 229559631) &= v9;
      if ( !__OFSUB__(v7, *(_QWORD *)(v8 + 1190963085)) )
        JUMPOUT(0xFA2EA87i64);
      JUMPOUT(0xFA2EA24i64);
    }
    JUMPOUT(0xFA2EAA0i64);
  }
  JUMPOUT(0xFA2EAEAi64);
}
// FA2EAA1: positive sp value 10 has been found
// FA2EA83: control flows out of bounds to FA2EA87
// FA2EA9F: control flows out of bounds to FA2EAA0
// FA2EA6C: control flows out of bounds to FA2EAEA
// FA2EA7E: control flows out of bounds to FA2EA24
// 2461D83A: variable 'v3' is possibly undefined
// FA2EAA1: variable 'v4' is possibly undefined
// FA2EAA1: variable 'v5' is possibly undefined
// FA2EA70: variable '_RSI' is possibly undefined
// FA2EA76: variable 'v7' is possibly undefined
// FA2EA76: variable 'v8' is possibly undefined

//----- (000000002461FC5E) ----------------------------------------------------
void __fastcall sub_2461FC5E(__int64 a1)
{
  __int64 v1; // rbx

  *(_BYTE *)(v1 + 469577585) = __ROL1__(*(_BYTE *)(v1 + 469577585), 1);
  __asm { retn }
}
// 2461FC68: unbalanced stack, ignored a potential tail call
// 2461FC5F: variable 'v1' is possibly undefined

//----- (00000000246BA26D) ----------------------------------------------------
void sub_246BA26D()
{
  __asm { iretq }
}
// 246BA272: control flows out of bounds to 246BA274

//----- (0000000024749FC8) ----------------------------------------------------
__int64 __fastcall sub_24749FC8()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __asm { lock xchg eax, edi }
  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000024904E6A) ----------------------------------------------------
__int64 __fastcall sub_24904E6A()
{
  __int64 v0; // rax

  return (*(__int64 (**)(void))(v0 - 1618658219))();
}
// 24904E75: variable 'v0' is possibly undefined
// 24904E6A: using guessed type __int64 __fastcall sub_24904E6A();

//----- (000000002499B1FC) ----------------------------------------------------
void sub_2499B1FC()
{
  __asm { retfq }
}
// 2499B1FE: control flows out of bounds to 2499B200

//----- (0000000024AE181A) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_24AE181A(__int64 a1, unsigned __int16 a2)
{
  __inbyte(a2);
  __asm { iret }
}
// 24AE182A: positive sp value 10 has been found
// 24AE182A: control flows out of bounds to 24AE182B

//----- (0000000024B0CF31) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_24B0CF31()
{
  _DWORD *v0; // rdi
  _DWORD *v1; // rsi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *v0 = *v1;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 24B0CF32: positive sp value 8 has been found
// 24B0CF31: could not find valid save-restore pair for rbp
// 24B0CF37: variable 'v1' is possibly undefined
// 24B0CF37: variable 'v0' is possibly undefined

//----- (0000000024B5558C) ----------------------------------------------------
__int64 sub_24B5558C()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000024D8D7B6) ----------------------------------------------------
void __noreturn sub_24D8D7B6()
{
  __halt();
}
// 24D8D7B6: using guessed type void __fastcall __noreturn sub_24D8D7B6();

//----- (0000000024E32205) ----------------------------------------------------
void __noreturn sub_24E32205()
{
  __halt();
}
// 24E32205: using guessed type void __fastcall __noreturn sub_24E32205();

//----- (0000000024F16962) ----------------------------------------------------
void __fastcall sub_24F16962(__int64 a1)
{
  __asm { retf }
}
// 24F16965: unbalanced stack, ignored a potential tail call

//----- (00000000253A50C8) ----------------------------------------------------
void sub_253A50C8()
{
  __asm { retf }
}
// 253A50C9: unbalanced stack, ignored a potential tail call

//----- (0000000025463CAE) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_25463CAE(__int64 a1)
{
  __int64 v1; // rbx
  _DWORD *v2; // rdi
  __int64 v3; // rsi
  unsigned __int16 v4; // dx
  bool v5; // cf
  unsigned int v6; // eax
  int v7; // [rsp-18h] [rbp-20h]
  char v8; // [rsp-10h] [rbp-18h]
  char v9; // [rsp-Fh] [rbp-17h]
  unsigned int v10; // [rsp-8h] [rbp-10h]
  __int64 v11; // [rsp+0h] [rbp-8h]

  *(_DWORD *)(a1 + 2 * v1) += v7 + (*(_DWORD *)v3 < *v2);
  LOBYTE(v4) = v8;
  v5 = __CFSHL__(*(_DWORD *)(v1 - 101), 1);
  *(_DWORD *)(v1 - 101) = __ROL4__(*(_DWORD *)(v1 - 101), 1);
  v6 = v10;
  *(_BYTE *)(a1 + 776333247) += a1 + v5;
  HIBYTE(v4) = *(_BYTE *)(v11 - 1466809711) | v9;
  LOBYTE(v6) = *(_BYTE *)(v3 + 4);
  __outdword(v4, v6);
  __asm { iret }
}
// 25463CC5: positive sp value 18 has been found
// 25463CD4: control flows out of bounds to 25463CD5
// 25463CB1: variable 'v7' is possibly undefined
// 25463CAF: variable 'v3' is possibly undefined
// 25463CAF: variable 'v2' is possibly undefined
// 25463CB1: variable 'v1' is possibly undefined
// 25463CB4: variable 'v8' is possibly undefined
// 25463CB9: variable 'v10' is possibly undefined
// 25463CC5: variable 'v11' is possibly undefined
// 25463CC5: variable 'v9' is possibly undefined

//----- (000000002557594C) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_2557594C(__int64 a1, unsigned __int16 a2)
{
  unsigned int v2; // [rsp-8h] [rbp-8h]

  __outdword(a2, v2);
  __asm { iret }
}
// 2557594D: positive sp value 8 has been found
// 2557594E: control flows out of bounds to 2557594F
// 2557594D: variable 'v2' is possibly undefined

//----- (000000002564CD42) ----------------------------------------------------
void __noreturn sub_2564CD42()
{
  __halt();
}
// 2564CD42: using guessed type void __fastcall __noreturn sub_2564CD42();

//----- (00000000257488F4) ----------------------------------------------------
void __fastcall __noreturn sub_257488F4(__int64 a1)
{
  int v1; // eax
  _BYTE *v3; // rdi
  _BYTE *v4; // rsi

  _EAX = v1 ^ 0x63E397E9;
  *(_DWORD *)(a1 + 92) |= _EAX;
  __asm { xlat }
  *v3 = *v4;
  __halt();
}
// 257488F4: variable 'v1' is possibly undefined
// 2574890A: variable 'v4' is possibly undefined
// 2574890A: variable 'v3' is possibly undefined

//----- (00000000259A9209) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_259A9209(__int64 a1, unsigned int a2)
{
  unsigned int v2; // eax
  unsigned int v3; // et0

  while ( 1 )
  {
    v3 = v2;
    v2 = a2;
    a2 = v3;
    *((_BYTE *)&qword_2CB13658[462] + v3) &= v3;
  }
}
// 259A920A: positive sp value 8 has been found
// 259A9211: variable 'v2' is possibly undefined
// 2CB13658: using guessed type __int64 qword_2CB13658[512];

//----- (00000000259FA6D1) ----------------------------------------------------
__int64 sub_259FA6D1()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000025AA8881) ----------------------------------------------------
__int64 sub_25AA8881()
{
  __int64 result; // rax

  BYTE1(result) = -117;
  return result;
}
// 25AA8881: using guessed type __int64 __fastcall sub_25AA8881();

//----- (0000000025B9121F) ----------------------------------------------------
void __noreturn sub_25B9121F()
{
  __halt();
}
// 25B9121F: using guessed type void __fastcall __noreturn sub_25B9121F();

//----- (0000000025BBA7A5) ----------------------------------------------------
void __fastcall sub_25BBA7A5()
{
  __asm { retn }
}
// 25BBA7A8: unbalanced stack, ignored a potential tail call

//----- (0000000025C10458) ----------------------------------------------------
__int64 __fastcall sub_25C10458()
{
  __int64 v0; // rax
  __int64 v1; // rbx

  *(_BYTE *)(v0 + 591481340) |= v1;
  return (*(__int64 (**)(void))(v1 - 698148526))();
}
// 25C10458: variable 'v1' is possibly undefined
// 25C10458: variable 'v0' is possibly undefined
// 25C10458: using guessed type __int64 __fastcall sub_25C10458();

//----- (0000000025C14B0E) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_25C14B0E(char a1)
{
  __int32 v1; // esp
  __int64 v2; // rbp
  volatile __int32 *v3; // rsi

  _InterlockedExchange(v3, v1);
  *(_BYTE *)(v2 - 1361473311) <<= a1;
  __asm { iret }
}
// 25C14B1F: positive sp value 8 has been found
// 25C14B23: control flows out of bounds to 25C14B24
// 25C14B0E: variable 'v3' is possibly undefined
// 25C14B0E: variable 'v1' is possibly undefined
// 25C14B15: variable 'v2' is possibly undefined

//----- (0000000025D78731) ----------------------------------------------------
__int64 sub_25D78731()
{
  __int64 result; // rax

  BYTE1(result) = -63;
  return result;
}
// 25D78731: using guessed type __int64 __fastcall sub_25D78731();

//----- (0000000025D86866) ----------------------------------------------------
__int64 sub_25D86866()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000025F2EAFC) ----------------------------------------------------
// bad sp value at call has been detected, the output may be wrong!
__int64 __fastcall sub_25F2EAFC(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  char v67; // zf
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  if ( !v67 )
    __halt();
  return MK_FP(retaddr[0], retaddr[0])();
}
// 25F2EAFE: bad sp value at call
// 25F2EAFC: variable 'v67' is possibly undefined
// 25F2EAFC: too many input arguments, some ignored

//----- (0000000025FCC314) ----------------------------------------------------
__int64 __fastcall sub_25FCC314()
{
  unsigned int v0; // ebp

  return v0;
}
// 25FCC314: variable 'v0' is possibly undefined
// 25FCC314: using guessed type __int64 __fastcall sub_25FCC314();

//----- (0000000025FCD69B) ----------------------------------------------------
void __noreturn sub_25FCD69B()
{
  __halt();
}
// 25FCD69B: using guessed type void __fastcall __noreturn sub_25FCD69B();

//----- (00000000260C1494) ----------------------------------------------------
__int64 __fastcall sub_260C1494()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __asm { fnstenv byte ptr [rbp-628E8900h]; (emulator call) }
  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000002624733D) ----------------------------------------------------
void sub_2624733D()
{
  __asm { iret }
}
// 26247344: control flows out of bounds to 26247345

//----- (000000002629432A) ----------------------------------------------------
void __fastcall sub_2629432A()
{
  __int64 v0; // rax

  __outbyte(0x92u, *(_BYTE *)(v0 + 1596631697) * v0);
  __asm { iret }
}
// 26294335: control flows out of bounds to 26294336
// 2629432D: variable 'v0' is possibly undefined

//----- (0000000026299EBA) ----------------------------------------------------
void sub_26299EBA()
{
  __asm { iret }
}
// 26299EBB: control flows out of bounds to 26299EBC

//----- (00000000263579BB) ----------------------------------------------------
void sub_263579BB()
{
  ;
}

//----- (00000000263826F7) ----------------------------------------------------
void __fastcall sub_263826F7()
{
  __asm { retf }
}
// 263826FC: unbalanced stack, ignored a potential tail call

//----- (00000000267C9598) ----------------------------------------------------
void __fastcall sub_267C9598(__int64 a1, int a2)
{
  __int64 v2; // rcx
  char v3; // cf
  char v4; // al
  __int64 v6; // rdi
  __int64 v7; // rsi

  if ( (char)(v3 + v4 - 21) < 0 )
    __asm { retn    0F401h }
  v2 = a1 - 1;
  LOBYTE(a2) = *(_BYTE *)(v6 - 858241691);
  if ( a2 == *(_DWORD *)(v7 - 938590623) || !v2 )
  {
    __inbyte(0x92u);
    __indword(0x62u);
    JUMPOUT(0x267C955Di64);
  }
  JUMPOUT(0x267C9569i64);
}
// 267C955B: control flows out of bounds to 267C955D
// 267C95A3: unbalanced stack, ignored a potential tail call
// 267C9555: control flows out of bounds to 267C9569
// 267C959E: variable 'v3' is possibly undefined
// 267C959E: variable 'v4' is possibly undefined
// 267C9598: variable 'v6' is possibly undefined
// 267C954E: variable 'v7' is possibly undefined

//----- (00000000268430BB) ----------------------------------------------------
void __fastcall sub_268430BB()
{
  __asm { rcr     byte ptr [rdi], 31h }
  _disable();
  __asm { iret }
}
// 268430C8: control flows out of bounds to 268430C9

//----- (000000002684A3FE) ----------------------------------------------------
void sub_2684A3FE()
{
  __asm { retf }
}
// 2684A401: unbalanced stack, ignored a potential tail call

//----- (0000000026967DB0) ----------------------------------------------------
void sub_26967DB0()
{
  __asm { iret }
}
// 26967DB5: control flows out of bounds to 26967DB6

//----- (0000000026B4DFA7) ----------------------------------------------------
void __fastcall sub_26B4DFA7()
{
  __int64 v0; // rsi

  (*(void (**)(void))(v0 + 91))();
  sub_311F7169();
  __asm { retfq }
}
// 26B4DFB1: control flows out of bounds to 26B4DFB3
// 26B4DFA9: variable 'v0' is possibly undefined
// 311F7169: using guessed type __int64 sub_311F7169(void);

//----- (0000000026C4BDC7) ----------------------------------------------------
void sub_26C4BDC7()
{
  __asm { iret }
}
// 26C4BDC8: control flows out of bounds to 26C4BDC9

//----- (0000000026C706F2) ----------------------------------------------------
void __fastcall sub_26C706F2()
{
  unsigned int v0; // eax
  __int16 v2; // bp
  __int16 v3; // ax
  unsigned int v4; // et0

  v4 = v0;
  HIBYTE(v3) = HIBYTE(v2);
  LOBYTE(v3) = *(_BYTE *)(v4 - 60i64) + v2;
  MEMORY[0x5092E57D020CA721] = v3;
  __asm
  {
    lock or bh, ah
    retnq   9FBBh
  }
}
// 26C7070A: control flows out of bounds to 26C7070E
// 26C706F3: variable 'v0' is possibly undefined
// 26C706F3: variable 'v2' is possibly undefined

//----- (0000000026CC6128) ----------------------------------------------------
#error "26CC612C: cannot convert to microcode (funcsize=4)"

//----- (0000000026D65A35) ----------------------------------------------------
void __fastcall sub_26D65A35()
{
  _DWORD *v0; // rdi
  _DWORD *v1; // rsi

  __inbyte(0x3Du);
  *v0 = *v1;
  JUMPOUT(0x26D65A2Di64);
}
// 26D65A4B: control flows out of bounds to 26D65A2D
// 26D65A3D: variable 'v1' is possibly undefined
// 26D65A3D: variable 'v0' is possibly undefined

//----- (0000000026D8524E) ----------------------------------------------------
void __noreturn sub_26D8524E()
{
  JUMPOUT(0x5DC19EF2i64);
}
// 26D85256: control flows out of bounds to 5DC19EF2
// 26D8524E: using guessed type void __fastcall __noreturn sub_26D8524E();

//----- (0000000026DD30ED) ----------------------------------------------------
__int64 sub_26DD30ED()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000026E20827) ----------------------------------------------------
void sub_26E20827()
{
  __asm { iret }
}
// 26E2082B: control flows out of bounds to 26E2082C

//----- (0000000026E37766) ----------------------------------------------------
void __fastcall __noreturn sub_26E37766()
{
  int v0; // eax

  MEMORY[0xB828F4788BF903F1] = v0;
  __asm { rcl     byte ptr [rbx+1B516F3Ah], 1 }
  __halt();
}
// 26E37767: variable 'v0' is possibly undefined
// 26E37766: using guessed type void __fastcall __noreturn sub_26E37766();

//----- (0000000026E63F53) ----------------------------------------------------
void sub_26E63F53()
{
  __indword(0x74u);
  __asm { iret }
}
// 26E63F56: control flows out of bounds to 26E63F57

//----- (0000000026E6A261) ----------------------------------------------------
void sub_26E6A261()
{
  __asm { iret }
}
// 26E6A204: control flows out of bounds to 26E6A205

//----- (0000000026FF8A7E) ----------------------------------------------------
char __fastcall sub_26FF8A7E()
{
  char v0; // cf
  __int16 v1; // ax

  LOBYTE(v1) = v1 - (v0 - 26);
  if ( v1 < 0 )
    __asm { iret }
  return v1;
}
// 26FF8AEE: control flows out of bounds to 26FF8AEF
// 26FF8A7F: variable 'v1' is possibly undefined
// 26FF8A7F: variable 'v0' is possibly undefined

//----- (000000002706216B) ----------------------------------------------------
void sub_2706216B()
{
  ;
}

//----- (00000000270D5F13) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_270D5F13()
{
  __int64 v0; // rbx

  *(_DWORD *)(v0 + 1392641399) ^= 0x1Cu;
  return 3409433283i64;
}
// 270D5F26: positive sp value 4C14 has been found
// 270D5F14: variable 'v0' is possibly undefined
// 270D5F13: using guessed type __int64 __fastcall sub_270D5F13();

//----- (00000000271D96D4) ----------------------------------------------------
void sub_271D96D4()
{
  __asm { retf }
}
// 271D96D5: unbalanced stack, ignored a potential tail call

//----- (000000002735EDE4) ----------------------------------------------------
void __fastcall sub_2735EDE4(__int64 a1)
{
  char v1; // zf
  __int64 v2; // rsi
  __int64 v3; // rcx

  v3 = a1 - 1;
  if ( !v1 || !v3 )
    __halt();
  MEMORY[0xFFFFFFFFD9384794]();
  MEMORY[0xFFFFFFFFF1221712]();
  *(_DWORD *)(v2 + 1061908135) ^= 0x609B707Du;
  JUMPOUT(0x2735EDE0i64);
}
// 2735EDDE: control flows out of bounds to 2735EDE0
// 2735EDE4: variable 'v1' is possibly undefined
// 2735EDD4: variable 'v2' is possibly undefined

//----- (0000000027368827) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 sub_27368827()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}
// 27368833: positive sp value 8 has been found

//----- (0000000027386F68) ----------------------------------------------------
__int64 sub_27386F68()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000002742EA8C) ----------------------------------------------------
void __fastcall sub_2742EA8C(char a1, unsigned __int16 a2)
{
  __int64 v2; // rax
  __int64 v3; // rbx
  _BYTE *v4; // rdi
  _BYTE *v5; // rsi

  LOBYTE(v3) = a1 | v3;
  *v4 = *v5;
  *(_BYTE *)(v2 + 2 * v3 - 106) |= BYTE1(v2);
  __indword(a2);
  JUMPOUT(0x2ED77ACDi64);
}
// 2ED77ACC: control flows out of bounds to 2ED77ACD
// 2742EA8C: variable 'v3' is possibly undefined
// 2ED77AC5: variable 'v5' is possibly undefined
// 2ED77AC5: variable 'v4' is possibly undefined
// 2ED77AC6: variable 'v2' is possibly undefined

//----- (0000000027788D5C) ----------------------------------------------------
void sub_27788D5C()
{
  __asm { iret }
}
// 27788D6F: control flows out of bounds to 27788D70

//----- (00000000278254F7) ----------------------------------------------------
void __fastcall __noreturn sub_278254F7(__int64 a1, __int16 _DX)
{
  unsigned int v2; // eax

  while ( 1 )
  {
    __asm { insd }
    MEMORY[0xAA903BC6B60F935F] = v2;
    __outdword(0xC2u, v2);
  }
}
// 278254F8: variable 'v2' is possibly undefined

//----- (00000000278B16C9) ----------------------------------------------------
void sub_278B16C9()
{
  ;
}

//----- (00000000278E258E) ----------------------------------------------------
void __noreturn sub_278E258E()
{
  __halt();
}
// 278E258E: using guessed type void __fastcall __noreturn sub_278E258E();

//----- (0000000027975C45) ----------------------------------------------------
void __fastcall sub_27975C45()
{
  char v0; // of
  __int64 v1; // rax
  int v2; // ebp
  _BYTE *v3; // rdi
  __int64 v4; // rsi
  double v5; // st7
  _BYTE *v6; // rsi
  int v7; // esp
  __int64 v8; // rt2

  *(double *)(v1 - 98) = v5;
  v6 = (_BYTE *)(v4 + 1);
  if ( v0 )
  {
    *v3 = *v6;
    __asm { iret }
    JUMPOUT(0x27975C4Di64);
  }
  v8 = -82i64 * v7;
  *(_DWORD *)v6 -= (HIDWORD(v8) != 0) + v2;
  __asm { iret }
  JUMPOUT(0x27975CD0i64);
}
// 27975C4C: control flows out of bounds to 27975C4D
// 27975CCF: control flows out of bounds to 27975CD0
// 27975C45: variable 'v5' is possibly undefined
// 27975C45: variable 'v1' is possibly undefined
// 27975C48: variable 'v4' is possibly undefined
// 27975C49: variable 'v0' is possibly undefined
// 27975C4B: variable 'v3' is possibly undefined
// 27975CC4: variable 'v7' is possibly undefined
// 27975CC7: variable 'v2' is possibly undefined

//----- (00000000279C3482) ----------------------------------------------------
void __fastcall __noreturn sub_279C3482()
{
  char v0; // cf
  int v1; // eax
  char v2; // dh
  _BYTE *v3; // rdi
  int v4; // eax
  _BYTE *v5; // rdi

  v4 = v1 - (v0 + (_DWORD)&unk_D7B83BC);
  *v3 = v4;
  v5 = v3 + 1;
  *(v5 - 999495407) += v2;
  *v5 = v4;
  __halt();
}
// 279C3482: variable 'v1' is possibly undefined
// 279C3482: variable 'v0' is possibly undefined
// 279C3487: variable 'v3' is possibly undefined
// 279C3488: variable 'v2' is possibly undefined
// 279C3482: using guessed type void __fastcall __noreturn sub_279C3482();

//----- (0000000027A4F040) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __noreturn sub_27A4F040()
{
  __halt();
}
// 27A4F041: positive sp value 8 has been found
// 27A4F040: using guessed type void __fastcall __noreturn sub_27A4F040();

//----- (0000000027C9A12C) ----------------------------------------------------
void __fastcall sub_27C9A12C(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al

  __outbyte(a2, v2);
  __asm { iret }
}
// 27C9A12D: control flows out of bounds to 27C9A12E
// 27C9A12C: variable 'v2' is possibly undefined

//----- (0000000027D19E99) ----------------------------------------------------
__int64 sub_27D19E99()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000028138687) ----------------------------------------------------
__int64 sub_28138687()
{
  unsigned int v0; // esp

  return v0;
}
// 28138687: variable 'v0' is possibly undefined
// 28138687: using guessed type __int64 __fastcall sub_28138687();

//----- (00000000283EFD8B) ----------------------------------------------------
void __fastcall sub_283EFD8B()
{
  _DWORD *v0; // rax
  _BYTE *v2; // rdi
  int v3; // esi

  *v2 = (_BYTE)v0;
  *v0 -= v3;
  __asm { jmp     rbx }
}
// 283EFD90: unbalanced stack, ignored a potential tail call
// 283EFD8C: variable 'v0' is possibly undefined
// 283EFD8C: variable 'v2' is possibly undefined
// 283EFD8E: variable 'v3' is possibly undefined

//----- (0000000028475AFA) ----------------------------------------------------
__int64 __fastcall sub_28475AFA(__int64 a1, int a2)
{
  char v2; // cf
  __int64 result; // rax
  int v4; // edi
  _BYTE *v5; // rsi

  *v5 |= 0x44u;
  *(_DWORD *)(v4 - ((unsigned int)v2 + a2)) = result;
  return result;
}
// 28475AFD: variable 'v5' is possibly undefined
// 28475B00: variable 'result' is possibly undefined
// 28475AFB: variable 'v4' is possibly undefined
// 28475AFB: variable 'v2' is possibly undefined

//----- (0000000028534FF0) ----------------------------------------------------
void __fastcall sub_28534FF0()
{
  __asm { retn }
}
// 28534FF1: unbalanced stack, ignored a potential tail call

//----- (00000000286E1B63) ----------------------------------------------------
void __fastcall sub_286E1B63(__int64 a1, unsigned int a2)
{
  unsigned __int8 v2; // ah
  unsigned __int8 v3; // bl
  unsigned __int8 v4; // bp
  unsigned int v5; // edi
  __int64 v6; // [rsp-8h] [rbp-8h]

  *(_BYTE *)(v5 - 919087960i64) += v3 - v2 + (v3 < v2);
  v6 = a2;
  MEMORY[0xDBA472E3077B18C1] = a2;
  __outbyte(0xFu, v4);
  __asm { retf }
}
// 286E1B7F: unbalanced stack, ignored a potential tail call
// 286E1B65: variable 'v3' is possibly undefined
// 286E1B65: variable 'v2' is possibly undefined
// 286E1B67: variable 'v5' is possibly undefined
// 286E1B7D: variable 'v4' is possibly undefined

//----- (0000000028886B5D) ----------------------------------------------------
__int64 sub_28886B5D()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000002896056C) ----------------------------------------------------
__int64 __fastcall sub_2896056C()
{
  __int64 v0; // rax
  __int64 v1; // rbx
  int v2; // esp
  void *retaddr[2]; // [rsp+8h] [rbp+0h]

  *(_DWORD *)(v1 + 17) += v2 + (BYTE1(v1) < *(_BYTE *)(v0 + 111));
  return MK_FP(retaddr[0], retaddr[0])();
}
// 2896056C: could not find valid save-restore pair for rbp
// 28960571: variable 'v2' is possibly undefined
// 2896056D: variable 'v1' is possibly undefined
// 2896056D: variable 'v0' is possibly undefined

//----- (0000000028ADEE16) ----------------------------------------------------
void sub_28ADEE16()
{
  __asm { iret }
}
// 28ADEE2B: control flows out of bounds to 28ADEE2C

//----- (0000000028BC7F36) ----------------------------------------------------
void sub_28BC7F36()
{
  __asm { retf }
}
// 28BC7F3A: unbalanced stack, ignored a potential tail call

//----- (0000000028CCBDAB) ----------------------------------------------------
__int64 sub_28CCBDAB()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000028D07445) ----------------------------------------------------
void __fastcall sub_28D07445()
{
  __asm { retf }
}
// 28D07446: unbalanced stack, ignored a potential tail call

//----- (0000000028DCEE15) ----------------------------------------------------
void __noreturn sub_28DCEE15()
{
  __halt();
}
// 28DCEE15: using guessed type void __fastcall __noreturn sub_28DCEE15();

//----- (0000000028E15572) ----------------------------------------------------
void __noreturn sub_28E15572()
{
  __halt();
}
// 28E15572: using guessed type void __fastcall __noreturn sub_28E15572();

//----- (0000000028E1C496) ----------------------------------------------------
// bad sp value at call has been detected, the output may be wrong!
__int64 __fastcall sub_28E1C496(
        __int64 _RCX,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  __int64 v65; // rax
  int v66; // eax
  unsigned __int64 v67; // rt2
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  v67 = __PAIR64__(a2, v65) % *(unsigned int *)(v65 - 1492655810);
  v66 = __PAIR64__(a2, v65) / *(unsigned int *)(v65 - 1492655810);
  LODWORD(a2) = v67;
  __asm { repne mov cl, 9Ah }
  _enable();
  MEMORY[0x77C88928A191C9A7] = v66;
  return MK_FP(retaddr[0], retaddr[0])(_RCX, a2);
}
// 28E1C4A9: bad sp value at call
// 28E1C496: variable 'v65' is possibly undefined
// 28E1C496: too many input arguments, some ignored

//----- (0000000028E437F1) ----------------------------------------------------
void sub_28E437F1()
{
  _disable();
  __asm { retf }
}
// 28E437F8: unbalanced stack, ignored a potential tail call

//----- (0000000028EECF5C) ----------------------------------------------------
void __fastcall sub_28EECF5C()
{
  char v0; // cf
  char v1; // zf

  if ( !(v0 | v1) )
    __asm { retf }
}
// 28EECF5F: unbalanced stack, ignored a potential tail call
// 28EECF5D: variable 'v0' is possibly undefined
// 28EECF5D: variable 'v1' is possibly undefined

//----- (000000002916D118) ----------------------------------------------------
void __noreturn sub_2916D118()
{
  __halt();
}
// 2916D118: using guessed type void __fastcall __noreturn sub_2916D118();

//----- (00000000292A7747) ----------------------------------------------------
void __fastcall sub_292A7747()
{
  char v0; // al
  __int64 v1; // rbp

  __outbyte(0x2Fu, v0 ^ 0x88);
  *(_BYTE *)(v1 + 36) = -31;
  __asm { retf }
}
// 292A7757: unbalanced stack, ignored a potential tail call
// 292A7748: variable 'v0' is possibly undefined
// 292A7752: variable 'v1' is possibly undefined

//----- (00000000292AFAAB) ----------------------------------------------------
__int64 sub_292AFAAB()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (00000000293DB514) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
char __fastcall sub_293DB514(__int64 a1, __int16 _DX)
{
  __int64 v2; // rsi

  __asm { insb }
  return *(_BYTE *)v2;
}
// 293DB516: positive sp value 8 has been found
// 293DB516: variable 'v2' is possibly undefined

//----- (000000002948C0AF) ----------------------------------------------------
void __fastcall sub_2948C0AF()
{
  _DWORD *v0; // rdi
  _DWORD *v1; // rsi

  *v0 = *v1;
  __asm { retf }
}
// 2948C0BF: unbalanced stack, ignored a potential tail call
// 2948C0BE: variable 'v1' is possibly undefined
// 2948C0BE: variable 'v0' is possibly undefined

//----- (00000000296D6B85) ----------------------------------------------------
void __noreturn sub_296D6B85()
{
  __halt();
}
// 296D6B85: using guessed type void __fastcall __noreturn sub_296D6B85();

//----- (0000000029717F50) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_29717F50(__int64 _RCX, _BYTE *_RDX)
{
  __int64 v2; // rdi
  int v3; // ecx
  char v5; // of
  __int64 v9; // rdi
  _BYTE *v10; // rsi
  bool v11; // cf
  bool v12; // zf
  int v13; // eax
  __int64 v14; // rdi
  __int64 v15; // [rsp-10h] [rbp-10h]
  int v16; // [rsp-8h] [rbp-8h]

  v11 = __CFADD__(*_RAX, (_BYTE)_RAX);
  LOBYTE(_RAX) = *_RAX + (_BYTE)_RAX;
  v12 = (_BYTE)_RAX + v11 + *v10 == 0;
  *v10 += (_BYTE)_RAX + v11;
  if ( v12 )
  {
    __asm { rcl     byte ptr [rax+rcx], cl }
    v3 = v16;
    v2 = v9 + 1;
    LOBYTE(v3) = 1;
    LOBYTE(_RAX) = (_BYTE)_RAX + 83;
    BYTE1(_RDX) = -104;
    __asm { insd }
    ++*(_BYTE *)(_RBX + 125);
    if ( !v5 )
    {
      if ( !__SETP__(*(int *)(v15 - 1285825554) >> 1, 0) )
        JUMPOUT(0x29717F10i64);
      _enable();
      __asm { xlat }
      _enable();
      *(_BYTE *)(v2 + 4) = _AL;
      JUMPOUT(0x29717F1Ci64);
    }
    __asm { fstp9   st }
    *(_DWORD *)(_RAX - 954661094) += v3;
    JUMPOUT(0x29717F8Fi64);
  }
  v13 = (_DWORD)_RAX - 1258303760;
  *_RDX -= 123;
  __outbyte((unsigned __int16)_RDX, v13);
  v14 = v9 + 6;
  *(_BYTE *)v14 = v13;
  *(_DWORD *)(v14 + 5) = v13;
}
// 29717EE9: positive sp value 10 has been found
// 29717F0E: control flows out of bounds to 29717F10
// 29717F1B: control flows out of bounds to 29717F1C
// 29717F8D: control flows out of bounds to 29717F8F
// 29717F50: could not find valid save-restore pair for rbp
// 29717F50: variable '_RAX' is possibly undefined
// 29717F52: variable 'v10' is possibly undefined
// 29717F70: variable 'v9' is possibly undefined
// 29717EE8: variable 'v16' is possibly undefined
// 29717EF5: variable '_RBX' is possibly undefined
// 29717F06: variable 'v5' is possibly undefined
// 29717EFE: variable 'v15' is possibly undefined

//----- (00000000299664B1) ----------------------------------------------------
void sub_299664B1()
{
  __asm { iret }
}
// 299664B2: control flows out of bounds to 299664B3

//----- (00000000299FBB93) ----------------------------------------------------
void sub_299FBB93()
{
  __debugbreak();
  __asm { iret }
}
// 299FBB96: control flows out of bounds to 299FBB97

//----- (0000000029A97C06) ----------------------------------------------------
void sub_29A97C06()
{
  __asm { retf }
}
// 29A97C09: unbalanced stack, ignored a potential tail call

//----- (0000000029AEFD16) ----------------------------------------------------
void sub_29AEFD16()
{
  __asm { iret }
}
// 29AEFD17: control flows out of bounds to 29AEFD18

//----- (0000000029C9F5FF) ----------------------------------------------------
__int64 sub_29C9F5FF()
{
  void *retaddr; // [rsp+0h] [rbp+0h]

  return MK_FP((_WORD)retaddr, retaddr)();
}
// 29C9F5FF: using guessed type __int64 __fastcall sub_29C9F5FF();

//----- (0000000029DFF6D5) ----------------------------------------------------
void __fastcall sub_29DFF6D5()
{
  __asm { retn }
}
// 29DFF6D7: unbalanced stack, ignored a potential tail call

//----- (0000000029E375D2) ----------------------------------------------------
void sub_29E375D2()
{
  __asm { retf }
}
// 29E375D3: unbalanced stack, ignored a potential tail call

//----- (0000000029EA04B6) ----------------------------------------------------
__int64 sub_29EA04B6()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000029F9C5C8) ----------------------------------------------------
void __fastcall __noreturn sub_29F9C5C8(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al

  __outbyte(a2, v2);
  __halt();
}
// 29F9C5C8: variable 'v2' is possibly undefined

//----- (000000002A006161) ----------------------------------------------------
void __fastcall sub_2A006161(__int64 a1)
{
  int v3; // eax
  __int64 v5; // rsi

  if ( a1 == 1 )
    __halt();
  BYTE1(v3) &= *(_BYTE *)(v5 - 243654366);
  __asm { int     0F6h }
  _EAX = v3 | 0xD96BEF5F;
  __asm
  {
    lock xchg eax, ebx
    iret
  }
}
// 2A006145: control flows out of bounds to 2A006146
// 2A006130: variable 'v5' is possibly undefined
// 2A006130: variable 'v3' is possibly undefined

//----- (000000002A1819F0) ----------------------------------------------------
void sub_2A1819F0()
{
  __asm { iret }
}
// 2A1819F6: control flows out of bounds to 2A1819F7

//----- (000000002A22A38B) ----------------------------------------------------
void __fastcall sub_2A22A38B()
{
  _BYTE *v0; // rdi
  _BYTE *v1; // rsi

  *v0 = *v1;
  __asm { retf }
}
// 2A22A38D: unbalanced stack, ignored a potential tail call
// 2A22A38C: variable 'v1' is possibly undefined
// 2A22A38C: variable 'v0' is possibly undefined

//----- (000000002A37BC4B) ----------------------------------------------------
void __fastcall sub_2A37BC4B(__int64 a1, char a2)
{
  __int64 v2; // rbx

  *(_BYTE *)(v2 - 1423268280) -= a2;
}
// 2A37BC4B: variable 'v2' is possibly undefined

//----- (000000002A3DC1BB) ----------------------------------------------------
__int64 __fastcall sub_2A3DC1BB(__int64 a1, unsigned __int16 a2)
{
  __indword(a2);
  return MEMORY[0x60E6986434CFE71A];
}

//----- (000000002A46A2C9) ----------------------------------------------------
void __noreturn sub_2A46A2C9()
{
  __halt();
}
// 2A46A2C9: using guessed type void __fastcall __noreturn sub_2A46A2C9();

//----- (000000002A584867) ----------------------------------------------------
#error "2A584867: stack frame is too big (funcsize=0)"

//----- (000000002A6027EE) ----------------------------------------------------
void sub_2A6027EE()
{
  __asm { retf }
}
// 2A6027F3: unbalanced stack, ignored a potential tail call

//----- (000000002A866B35) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_2A866B35(__int64 a1)
{
  _DWORD *v1; // rdi
  __int64 v2; // rsi
  _DWORD *v3; // rsi

  v3 = (_DWORD *)(v2 + 4);
  while ( a1 )
  {
    *v1++ = *v3++;
    --a1;
  }
  __asm { iret }
}
// 2A866B46: positive sp value 8 has been found
// 2A866B55: control flows out of bounds to 2A866B56
// 2A866B35: variable 'v2' is possibly undefined
// 2A866B42: variable 'v1' is possibly undefined

//----- (000000002A8B6867) ----------------------------------------------------
void __fastcall __noreturn sub_2A8B6867(__int64 a1, _BYTE *_RDX)
{
  char v2; // pf
  _BYTE *v3; // rdi
  _BYTE *v4; // rsi

  LOBYTE(_RDX) = *_RDX;
  __asm { insb }
  v3[(_QWORD)_RDX] = !v2;
  *v3 = *v4;
  __halt();
}
// 2A8B686D: variable 'v2' is possibly undefined
// 2A8B686D: variable 'v3' is possibly undefined
// 2A8B6871: variable 'v4' is possibly undefined

//----- (000000002A963A07) ----------------------------------------------------
void __noreturn sub_2A963A07()
{
  __halt();
}
// 2A963A07: using guessed type void __fastcall __noreturn sub_2A963A07();

//----- (000000002AA06FA0) ----------------------------------------------------
void __noreturn sub_2AA06FA0()
{
  __halt();
}
// 2AA06FA0: using guessed type void __fastcall __noreturn sub_2AA06FA0();

//----- (000000002ABC2527) ----------------------------------------------------
void __fastcall sub_2ABC2527()
{
  unsigned int v0; // eax

  __outdword(0xCCu, v0);
  __asm { jmp     fword ptr [r13-0F1AAF1Ch] }
}
// 2ABC252D: unbalanced stack, ignored a potential tail call
// 2ABC2527: variable 'v0' is possibly undefined

//----- (000000002AE3BF69) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_2AE3BF69()
{
  __asm { iret }
}
// 2AE3BF6C: positive sp value 8 has been found
// 2AE3BF6E: control flows out of bounds to 2AE3BF6F

//----- (000000002AE57A42) ----------------------------------------------------
void __noreturn sub_2AE57A42()
{
  __halt();
}
// 2AE57A42: using guessed type void __fastcall __noreturn sub_2AE57A42();

//----- (000000002AE90FCA) ----------------------------------------------------
void sub_2AE90FCA()
{
  __asm { retf }
}
// 2AE90FCB: unbalanced stack, ignored a potential tail call

//----- (000000002AF52CF1) ----------------------------------------------------
void sub_2AF52CF1()
{
  ;
}

//----- (000000002B067127) ----------------------------------------------------
void __fastcall sub_2B067127(char a1, __int64 a2)
{
  __int64 v2; // rax
  __int32 v3; // esp

  byte_26677309[v2] &= a1;
  __outbyte(a2, v2);
  _InterlockedExchange((volatile __int32 *)0xFFFFFFFFC1366FB9i64, v3);
  *(_DWORD *)(a2 + 1063984125) += a2;
  __asm { iret }
}
// 2B067144: control flows out of bounds to 2B067145
// 2B067128: variable 'v2' is possibly undefined
// 2B067136: variable 'v3' is possibly undefined

//----- (000000002B06F20D) ----------------------------------------------------
void __noreturn sub_2B06F20D()
{
  __halt();
}
// 2B06F20D: using guessed type void __fastcall __noreturn sub_2B06F20D();

//----- (000000002B0C6C0A) ----------------------------------------------------
void __fastcall sub_2B0C6C0A(unsigned __int64 a1)
{
  unsigned int v1; // eax
  void *v2; // rdi
  int v3; // esi
  int v4; // eax
  unsigned int v6; // et0

  memset(v2, v1, a1);
  v6 = v1;
  v4 = v3;
  _RSI = v6;
  __asm { outsd }
  MEMORY[0x70962CB556BDCA9A] = v4;
  __asm { iret }
}
// 2B0C6C1E: control flows out of bounds to 2B0C6C1F
// 2B0C6C0B: variable 'v2' is possibly undefined
// 2B0C6C0B: variable 'v1' is possibly undefined
// 2B0C6C0D: variable 'v3' is possibly undefined

//----- (000000002B5A6779) ----------------------------------------------------
void __fastcall sub_2B5A6779()
{
  __int64 v0; // rax
  __int64 v1; // rbx
  _DWORD *v2; // rdi
  _DWORD *v3; // rsi

  *(_DWORD *)(v1 + 17) += (_DWORD)v2;
  *v2 = *v3;
  *(_BYTE *)(v0 - 28) = -*(_BYTE *)(v0 - 28);
  __asm { iret }
}
// 2B5A678D: control flows out of bounds to 2B5A678E
// 2B5A677C: variable 'v2' is possibly undefined
// 2B5A677C: variable 'v1' is possibly undefined
// 2B5A6785: variable 'v3' is possibly undefined
// 2B5A6786: variable 'v0' is possibly undefined

//----- (000000002B75B94E) ----------------------------------------------------
#error "2B75B94E: function frame is wrong (funcsize=0)"

//----- (000000002B766C3C) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 sub_2B766C3C()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}
// 2B766C3D: positive sp value 8 has been found

//----- (000000002B781ED8) ----------------------------------------------------
void __noreturn sub_2B781ED8()
{
  __halt();
}
// 2B781ED8: using guessed type void __fastcall __noreturn sub_2B781ED8();

//----- (000000002B7CEA64) ----------------------------------------------------
void __fastcall sub_2B7CEA64()
{
  char v0; // bh
  __int64 v1; // rsi

  *(_BYTE *)(v1 - 543438145) = v0;
  __asm { retf }
}
// 2B7CEA74: unbalanced stack, ignored a potential tail call
// 2B7CEA64: variable 'v0' is possibly undefined
// 2B7CEA64: variable 'v1' is possibly undefined

//----- (000000002B82860D) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_2B82860D(__int64 a1, __int64 a2)
{
  unsigned __int8 v2; // al
  char v3; // ch
  __int64 v4; // rbp
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_BYTE *)(a2 + 127) -= v3;
  *(_QWORD *)((char *)&unk_26 + (unsigned int)(317542310 * *(_DWORD *)(v4 - 18))) += 63i64;
  __outbyte(0xDBu, v2);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 2B82861F: positive sp value 8 has been found
// 2B828610: variable 'v4' is possibly undefined
// 2B82861C: variable 'v2' is possibly undefined

//----- (000000002B8576AE) ----------------------------------------------------
void __fastcall sub_2B8576AE(__int64 a1, __int64 a2)
{
  __asm { jmp     rdx }
}
// 2B8576AF: unbalanced stack, ignored a potential tail call

//----- (000000002BBFCC1B) ----------------------------------------------------
void __noreturn sub_2BBFCC1B()
{
  __halt();
}
// 2BBFCC1B: using guessed type void __fastcall __noreturn sub_2BBFCC1B();

//----- (000000002BEAE36A) ----------------------------------------------------
void __fastcall sub_2BEAE36A(__int64 a1, __int64 a2)
{
  char v2; // al
  _BYTE *v3; // rdi

  __asm { outsd }
  *(_DWORD *)(a2 - 11) -= _RSI;
  if ( __SETP__(*v3, v2 - 60) )
  {
    __asm { iret }
    JUMPOUT(0x2BEAE376i64);
  }
  __halt();
}
// 2BEAE375: control flows out of bounds to 2BEAE376
// 2BEAE36B: variable '_RSI' is possibly undefined
// 2BEAE372: variable 'v3' is possibly undefined
// 2BEAE370: variable 'v2' is possibly undefined

//----- (000000002BF66E19) ----------------------------------------------------
unsigned __int8 sub_2BF66E19()
{
  return __inbyte(0x1Fu);
}

//----- (000000002BFA2711) ----------------------------------------------------
void sub_2BFA2711()
{
  __asm { iret }
}
// 2BFA2717: control flows out of bounds to 2BFA2718

//----- (000000002C1F889B) ----------------------------------------------------
__int64 __fastcall sub_2C1F889B()
{
  char v0; // cf
  _BYTE *v1; // rbx
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *v1 -= v0 - 127;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 2C1F889B: variable 'v1' is possibly undefined
// 2C1F889B: variable 'v0' is possibly undefined

//----- (000000002C248161) ----------------------------------------------------
void sub_2C248161()
{
  __asm
  {
    int     0A9h; used by BASIC while in interpreter
    retf
  }
}
// 2C248166: unbalanced stack, ignored a potential tail call

//----- (000000002C28351A) ----------------------------------------------------
void __fastcall __noreturn sub_2C28351A(int _ECX, __int64 a2)
{
  *(_DWORD *)(a2 - 13) |= a2;
  __asm { rcl     ecx, 10h }
  __halt();
}

//----- (000000002C2B9600) ----------------------------------------------------
void __fastcall sub_2C2B9600(__int64 a1, unsigned __int16 a2)
{
  int v2; // ebx
  __int64 v3; // rbp
  __int64 v4; // [rsp-8h] [rbp-10h]

  v4 = v3;
  __outdword(0x8Eu, 0xF993DAF5);
  MEMORY[0xF993DA9C] ^= v2;
  __outdword(a2, 0xF993DAF5);
  __asm { retf }
}
// 2C2B9617: unbalanced stack, ignored a potential tail call
// 2C2B9608: variable 'v3' is possibly undefined
// 2C2B960D: variable 'v2' is possibly undefined

//----- (000000002C3E1A1D) ----------------------------------------------------
void sub_2C3E1A1D()
{
  ;
}

//----- (000000002C3FD890) ----------------------------------------------------
#error "2C3FD890: stack frame is too big (funcsize=0)"

//----- (000000002C40CA04) ----------------------------------------------------
void sub_2C40CA04()
{
  __asm { retnq   0BE2Ah }
}
// 2C40CA05: control flows out of bounds to 2C40CA09

//----- (000000002C4B1D23) ----------------------------------------------------
void sub_2C4B1D23()
{
  __asm { iret }
}
// 2C4B1D3B: control flows out of bounds to 2C4B1D3C

//----- (000000002C58A5E4) ----------------------------------------------------
void sub_2C58A5E4()
{
  __asm { retf }
}
// 2C58A5E8: unbalanced stack, ignored a potential tail call

//----- (000000002C72F99A) ----------------------------------------------------
void __fastcall sub_2C72F99A()
{
  __asm { retn }
}
// 2C72F99B: unbalanced stack, ignored a potential tail call

//----- (000000002C7639CE) ----------------------------------------------------
__int64 __fastcall sub_2C7639CE(__int64 a1, unsigned __int16 a2)
{
  __int16 v2; // ax
  char v3; // fl
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  HIBYTE(v2) = v3;
  __outdword(a2, v2);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 2C7639D0: variable 'v2' is possibly undefined

//----- (000000002C77DD66) ----------------------------------------------------
__int64 sub_2C77DD66()
{
  __int64 result; // rax

  BYTE1(result) = 119;
  return result;
}
// 2C77DD66: using guessed type __int64 __fastcall sub_2C77DD66();

//----- (000000002C8035A7) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_2C8035A7()
{
  _disable();
  __asm { iret }
}
// 2C8035B7: positive sp value 8 has been found
// 2C8035B7: control flows out of bounds to 2C8035B8

//----- (000000002C83512E) ----------------------------------------------------
__int64 __fastcall sub_2C83512E(
        char a1,
        char a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  char v63; // cf
  _DWORD *v64; // rdi
  int v65; // esi
  __int64 result; // rax

  *v64 -= (__CFADD__(v63, a2) | __CFADD__(a1, v63 + a2)) + v65;
  result = (unsigned int)_InterlockedExchange(
                           (volatile __int32 *)MEMORY[0xED7E5FAACFEA71D5],
                           MEMORY[0xED7E5FAACFEA71D5]);
  __asm { lock cmp eax, 0EA1CAF17h }
  return result;
}
// 2C835130: variable 'v64' is possibly undefined
// 2C83512E: variable 'v63' is possibly undefined
// 2C835130: variable 'v65' is possibly undefined

//----- (000000002C8A1E81) ----------------------------------------------------
void sub_2C8A1E81()
{
  __asm { retf }
}

//----- (000000002C8E7074) ----------------------------------------------------
__int64 sub_2C8E7074()
{
  return 2778455835i64;
}
// 2C8E7074: using guessed type __int64 __fastcall sub_2C8E7074();

//----- (000000002C9F3B2A) ----------------------------------------------------
void __noreturn sub_2C9F3B2A()
{
  __halt();
}
// 2C9F3B2A: using guessed type void __fastcall __noreturn sub_2C9F3B2A();

//----- (000000002CB6D4C6) ----------------------------------------------------
void __fastcall sub_2CB6D4C6()
{
  char v0; // cf
  _DWORD *v1; // rax

  *v1 -= v0 - 84;
  __asm { iret }
}
// 2CB6D4C9: control flows out of bounds to 2CB6D4CA
// 2CB6D4C6: variable 'v1' is possibly undefined
// 2CB6D4C6: variable 'v0' is possibly undefined

//----- (000000002CCFD6F4) ----------------------------------------------------
void __fastcall sub_2CCFD6F4(char a1)
{
  __int64 v1; // rax
  __int64 v2; // rsi

  *(_DWORD *)(v2 + 335593916) |= 0x39u;
  *(_BYTE *)(v1 + 587310670) |= a1;
  __asm { iret }
}
// 2CCFD709: control flows out of bounds to 2CCFD70A
// 2CCFD6F4: variable 'v2' is possibly undefined
// 2CCFD702: variable 'v1' is possibly undefined

//----- (000000002CD136BF) ----------------------------------------------------
void __fastcall sub_2CD136BF(_DWORD *a1)
{
  int v1; // esi

  *a1 -= v1;
}
// 2CD136BF: variable 'v1' is possibly undefined

//----- (000000002CE6E1D7) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_2CE6E1D7(__int64 a1, unsigned __int16 a2)
{
  unsigned int v2; // esi

  __outdword(a2, v2);
  __asm { iretd }
}
// 2CE6E1D9: positive sp value 8 has been found
// 2CE6E256: control flows out of bounds to 2CE6E258
// 2CE6E1D9: variable 'v2' is possibly undefined

//----- (000000002CE80A57) ----------------------------------------------------
void __fastcall sub_2CE80A57()
{
  char v0; // al

  MEMORY[0xE9EB75ED66EB7740] = v0;
  __asm { outsd }
  JUMPOUT(0x2CE80A43i64);
}
// 2CE80A41: control flows out of bounds to 2CE80A43
// 2CE80A57: variable 'v0' is possibly undefined

//----- (000000002CEDF659) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_2CEDF659()
{
  ;
}
// 2CEDF65D: positive sp value 8 has been found

//----- (000000002D0BCD47) ----------------------------------------------------
void __fastcall __noreturn sub_2D0BCD47()
{
  __asm { rcl     dword ptr [rdi], 1 }
  __halt();
}
// 2D0BCD47: using guessed type void __fastcall __noreturn sub_2D0BCD47();

//----- (000000002D0EFE8E) ----------------------------------------------------
unsigned __int64 __fastcall sub_2D0EFE8E(_DWORD *a1, _BYTE *a2)
{
  _BYTE *v2; // rax
  unsigned __int64 result; // rax

  *v2 = BYTE1(a2);
  *a1 += (_DWORD)a2;
  result = (unsigned int)((_DWORD)v2 + 100895845);
  LOBYTE(a1) = (_BYTE)a1 - *a2;
  *(_DWORD *)result = (_DWORD)a1;
  return result;
}
// 2D0EFE8E: variable 'v2' is possibly undefined

//----- (000000002D16A7B2) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_2D16A7B2()
{
  int v0; // eax
  _DWORD *v1; // rdi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *v1 = v0;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 2D16A7B9: positive sp value 8 has been found
// 2D16A7B9: variable 'v0' is possibly undefined
// 2D16A7B9: variable 'v1' is possibly undefined

//----- (000000002D2C3B75) ----------------------------------------------------
void __fastcall sub_2D2C3B75(__int64 a1)
{
  _BYTE *v1; // rdi

  BYTE1(a1) = *v1;
  __asm { retn }
}
// 2D2C3B7B: unbalanced stack, ignored a potential tail call
// 2D2C3B77: variable 'v1' is possibly undefined

//----- (000000002D3629FA) ----------------------------------------------------
void sub_2D3629FA()
{
  __asm { iret }
}
// 2D362A01: control flows out of bounds to 2D362A02

//----- (000000002D41557E) ----------------------------------------------------
__int64 __fastcall sub_2D41557E()
{
  __int64 v0; // rbx
  _BYTE *v1; // rdi
  _BYTE *v2; // rsi

  *v1 = *v2;
  return MK_FP(*(_WORD *)(v0 + 22077991), *(unsigned int *)(v0 + 22077987))(3094446744i64);
}
// 2D41557E: variable 'v2' is possibly undefined
// 2D41557E: variable 'v1' is possibly undefined
// 2D415584: variable 'v0' is possibly undefined
// 2D41557E: using guessed type __int64 __fastcall sub_2D41557E();

//----- (000000002D43461F) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int16 __fastcall sub_2D43461F()
{
  char v0; // al
  char v1; // bl

  return v1 * v0;
}
// 2D434622: positive sp value 8 has been found
// 2D43461F: variable 'v1' is possibly undefined
// 2D43461F: variable 'v0' is possibly undefined

//----- (000000002D4D4275) ----------------------------------------------------
void __fastcall sub_2D4D4275()
{
  int v0; // eax
  _DWORD *v1; // rdi

  *v1 = v0;
  __asm { iret }
}
// 2D4D4280: control flows out of bounds to 2D4D4281
// 2D4D4275: variable 'v0' is possibly undefined
// 2D4D4275: variable 'v1' is possibly undefined

//----- (000000002D54A2C9) ----------------------------------------------------
void sub_2D54A2C9()
{
  ;
}

//----- (000000002D5C0880) ----------------------------------------------------
__int64 sub_2D5C0880()
{
  unsigned int v0; // esp
  __int64 v1; // rcx
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  v1 = v0;
  return MK_FP(retaddr[0], retaddr[0])(v1);
}
// 2D5C0886: variable 'v0' is possibly undefined

//----- (000000002D60B9D2) ----------------------------------------------------
void __noreturn sub_2D60B9D2()
{
  __halt();
}
// 2D60B9D2: using guessed type void __fastcall __noreturn sub_2D60B9D2();

//----- (000000002D6B46D9) ----------------------------------------------------
void __fastcall sub_2D6B46D9(__int64 a1, unsigned __int16 a2)
{
  __inbyte(a2);
  __asm { iret }
}
// 2D6B46DA: control flows out of bounds to 2D6B46DB

//----- (000000002D6C3D1E) ----------------------------------------------------
void __noreturn sub_2D6C3D1E()
{
  __halt();
}
// 2D6C3D1E: using guessed type void __fastcall __noreturn sub_2D6C3D1E();

//----- (000000002D6CDB37) ----------------------------------------------------
__int64 __fastcall sub_2D6CDB37(__int64 a1)
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  BYTE1(a1) = 62;
  return MK_FP(retaddr[0], retaddr[0])(a1);
}

//----- (000000002D718A21) ----------------------------------------------------
void __fastcall sub_2D718A21(__int64 a1)
{
  __asm { jmp     qword ptr [rcx-1059C0EFh] }
}
// 2D718A22: unbalanced stack, ignored a potential tail call

//----- (000000002D86FD04) ----------------------------------------------------
void sub_2D86FD04()
{
  __asm { iretd }
}
// 2D86FD0C: control flows out of bounds to 2D86FD0E

//----- (000000002DAEAB60) ----------------------------------------------------
void __fastcall sub_2DAEAB60()
{
  __asm { retn }
}
// 2DAEAB61: unbalanced stack, ignored a potential tail call

//----- (000000002DB8FE1E) ----------------------------------------------------
void sub_2DB8FE1E()
{
  __asm { iret }
}
// 2DB8FE1F: control flows out of bounds to 2DB8FE20

//----- (000000002DBD2937) ----------------------------------------------------
void sub_2DBD2937()
{
  __asm { retf }
}
// 2DBD2938: unbalanced stack, ignored a potential tail call

//----- (000000002DC54297) ----------------------------------------------------
void __fastcall __noreturn sub_2DC54297(__int64 a1, unsigned __int16 a2)
{
  char v2; // bl
  __int64 v3; // rsi

  __inbyte(a2);
  *(_BYTE *)(v3 - 29) = v2;
  __halt();
}
// 2DC5429B: variable 'v2' is possibly undefined
// 2DC5429B: variable 'v3' is possibly undefined

//----- (000000002DC690CA) ----------------------------------------------------
__int64 __fastcall sub_2DC690CA()
{
  int v0; // eax

  return (unsigned int)(v0 + 713791927);
}
// 2DC690CB: variable 'v0' is possibly undefined
// 2DC690CA: using guessed type __int64 __fastcall sub_2DC690CA();

//----- (000000002DD317DD) ----------------------------------------------------
char __fastcall sub_2DD317DD()
{
  char v0; // cf
  char v1; // al

  return v1 - v0 + 112;
}
// 2DD317E2: variable 'v1' is possibly undefined
// 2DD317E2: variable 'v0' is possibly undefined

//----- (000000002DD4E7F4) ----------------------------------------------------
void __fastcall sub_2DD4E7F4(__int64 a1, __int64 a2)
{
  char v2; // bh
  __int64 v3; // rbp

  *(_BYTE *)(v3 + a2 + 1361958102) = v2;
}
// 2DD4E804: variable 'v2' is possibly undefined
// 2DD4E804: variable 'v3' is possibly undefined

//----- (000000002DE912BE) ----------------------------------------------------
void __fastcall __noreturn sub_2DE912BE(__int64 a1, unsigned __int16 a2)
{
  __indword(a2);
  JUMPOUT(0x46E3378Ci64);
}
// 2DE912C6: control flows out of bounds to 46E3378C

//----- (000000002DF8405D) ----------------------------------------------------
void sub_2DF8405D()
{
  __asm { retf }
}
// 2DF8405E: unbalanced stack, ignored a potential tail call

//----- (000000002DFBE923) ----------------------------------------------------
void __fastcall __noreturn sub_2DFBE923(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al
  __int64 v3; // rdi

  __outbyte(a2, v2);
  *(_BYTE *)(v3 + 99) ^= v2;
  __halt();
}
// 2DFBE923: variable 'v2' is possibly undefined
// 2DFBE925: variable 'v3' is possibly undefined

//----- (000000002E094B2D) ----------------------------------------------------
void sub_2E094B2D()
{
  __asm { icebp }
}

//----- (000000002E1B0358) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_2E1B0358(char a1, _BYTE *a2)
{
  unsigned int v2; // ebp

  __outdword(0xD8u, v2);
  *a2 = a1;
  __halt();
}
// 2E1B035C: positive sp value 8 has been found
// 2E1B0359: variable 'v2' is possibly undefined

//----- (000000002E218561) ----------------------------------------------------
void __fastcall sub_2E218561(__int64 a1, unsigned __int16 a2)
{
  unsigned int v2; // eax

  __outdword(a2, v2);
  __asm
  {
    invd
    retf
  }
}
// 2E218567: unbalanced stack, ignored a potential tail call
// 2E218562: variable 'v2' is possibly undefined

//----- (000000002E251262) ----------------------------------------------------
void __noreturn sub_2E251262()
{
  __halt();
}
// 2E251262: using guessed type void __fastcall __noreturn sub_2E251262();

//----- (000000002E2FB189) ----------------------------------------------------
__int64 __fastcall sub_2E2FB189(__int64 a1, __int16 _DX)
{
  char v3; // zf
  _DWORD *v4; // rsi
  __int64 v5; // rcx

  MEMORY[0x7AA0B4E600C8BDC0] = *v4;
  v5 = a1 - 1;
  if ( v3 && v5 )
  {
    __asm { insb }
    __indword(0xD9u);
    __halt();
  }
  _enable();
  return (unsigned int)v5;
}
// 2E2FB189: variable 'v4' is possibly undefined
// 2E2FB193: variable 'v3' is possibly undefined

//----- (000000002E372137) ----------------------------------------------------
void __noreturn sub_2E372137()
{
  __halt();
}
// 2E372137: using guessed type void __fastcall __noreturn sub_2E372137();

//----- (000000002E3FE2E1) ----------------------------------------------------
void __noreturn sub_2E3FE2E1()
{
  __halt();
}
// 2E3FE2E1: using guessed type void __fastcall __noreturn sub_2E3FE2E1();

//----- (000000002E493472) ----------------------------------------------------
// write access to const memory has been detected, the output may be wrong!
void __fastcall sub_2E493472(_BYTE *a1)
{
  __int16 v1; // sp
  __int16 v2; // ax
  bool v3; // cf

  BYTE1(a1) = -73;
  v2 = v1;
  v3 = __CFADD__(HIBYTE(v2), *a1);
  *a1 += HIBYTE(v2);
  unk_22 -= v3 + v2;
  __asm { iret }
}
// 2E493490: control flows out of bounds to 2E493491
// 2E49348D: write access to const memory at 22 has been detected
// 2E49347F: variable 'v1' is possibly undefined

//----- (000000002E532450) ----------------------------------------------------
void __fastcall __noreturn sub_2E532450()
{
  unsigned int v0; // eax
  __int64 v1; // rdi

  BYTE1(v0) -= *(_BYTE *)(v1 + 69);
  __outdword(0x5Bu, v0);
  __halt();
}
// 2E53245B: variable 'v0' is possibly undefined
// 2E53245B: variable 'v1' is possibly undefined
// 2E532450: using guessed type void __fastcall __noreturn sub_2E532450();

//----- (000000002E64E69D) ----------------------------------------------------
void sub_2E64E69D()
{
  __asm { iret }
}
// 2E64E69E: control flows out of bounds to 2E64E69F

//----- (000000002E701676) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_2E701676(__int64 a1, unsigned __int16 a2)
{
  char v3; // ch
  unsigned int v4; // eax

  LOBYTE(_RAX) = _RAX - 44;
  __asm { rcl     dword ptr [rax+4EC2EB25h], 75h }
  __inbyte(0x3Fu);
  v4 = __indword(a2);
  if ( (v4 & v3 & 0x80u) == 0 )
  {
    __outdword(a2, v4);
    __readeflags();
    JUMPOUT(0x8B43A2F2i64);
  }
  return nullsub_3136();
}
// 2E701681: positive sp value 8 has been found
// 2E701694: control flows out of bounds to 8B43A2F2
// 2E701676: could not find valid save-restore pair for rdi
// 2E701676: variable '_RAX' is possibly undefined
// 2E70161A: using guessed type __int64 __fastcall nullsub_3136();

//----- (000000002E710E62) ----------------------------------------------------
// write access to const memory has been detected, the output may be wrong!
__int64 __fastcall sub_2E710E62()
{
  double v0; // st7
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  WORD1(qword_19871108[420]) = (__int16)v0;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 2E710E6A: write access to const memory at 19871E2A has been detected
// 2E710E6A: variable 'v0' is possibly undefined
// 19871108: using guessed type __int64 qword_19871108[512];

//----- (000000002E72C821) ----------------------------------------------------
void __fastcall __noreturn sub_2E72C821(__int64 a1, unsigned __int16 a2)
{
  char v2; // al
  unsigned __int8 v3; // al

  v3 = v2 ^ 0x38;
  __outbyte(0x5Du, v3);
  __outbyte(a2, v3);
  __halt();
}
// 2E72C821: variable 'v2' is possibly undefined

//----- (000000002E7E60B6) ----------------------------------------------------
void __noreturn sub_2E7E60B6()
{
  __halt();
}
// 2E7E60B6: using guessed type void __fastcall __noreturn sub_2E7E60B6();

//----- (000000002E805562) ----------------------------------------------------
void sub_2E805562()
{
  MEMORY[0x862522C3] = (char)MEMORY[0x862522C3] >> 7;
  _disable();
  __asm { iret }
}
// 2E805589: control flows out of bounds to 2E80558A

//----- (000000002EA26E53) ----------------------------------------------------
void __fastcall sub_2EA26E53(__int64 a1, int a2)
{
  _DWORD *v2; // rbx

  *v2 = a2;
  __asm { iret }
}
// 2EA26E5C: control flows out of bounds to 2EA26E5D
// 2EA26E57: variable 'v2' is possibly undefined

//----- (000000002EA78CC4) ----------------------------------------------------
void sub_2EA78CC4()
{
  __asm { iret }
}
// 2EA78CC6: control flows out of bounds to 2EA78CC7

//----- (000000002EA8B8F9) ----------------------------------------------------
__int64 __fastcall sub_2EA8B8F9()
{
  int v0; // eax
  __int64 result; // rax

  result = (unsigned int)(v0 + 148830017);
  __asm { outsd }
  return result;
}
// 2EA8B8F9: variable 'v0' is possibly undefined
// 2EA8B8F9: using guessed type __int64 __fastcall sub_2EA8B8F9();

//----- (000000002EA96065) ----------------------------------------------------
void sub_2EA96065()
{
  __asm { retf }
}

//----- (000000002EC552E1) ----------------------------------------------------
void sub_2EC552E1()
{
  __asm { retf }
}
// 2EC552E2: unbalanced stack, ignored a potential tail call

//----- (000000002ED27E02) ----------------------------------------------------
// write access to const memory has been detected, the output may be wrong!
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_2ED27E02(char *a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // bh
  int v3; // ebp
  _BYTE *v4; // rsi
  unsigned __int64 v5; // rt0
  unsigned __int64 v6; // [rsp-10h] [rbp-10h]

  if ( (unsigned __int8)a2 == v2 )
  {
    *a1 >>= 1;
    LODWORD(v5) = -188422584;
    HIDWORD(v5) = v3;
    LODWORD(qword_1E302940[74]) = v5 >> (char)a1;
    _enable();
    __asm { iret }
    JUMPOUT(0x2ED27E1Di64);
  }
  __indword(a2);
  __writeeflags(v6);
  *v4 -= BYTE1(a1);
  __halt();
}
// 2ED27DB5: positive sp value 10 has been found
// 2ED27E1C: control flows out of bounds to 2ED27E1D
// 2ED27E14: write access to const memory at 1E302B90 has been detected
// 2ED27E02: variable 'v2' is possibly undefined
// 2ED27E14: variable 'v3' is possibly undefined
// 2ED27DAA: variable 'v6' is possibly undefined
// 2ED27DB1: variable 'v4' is possibly undefined
// 1E302940: using guessed type __int64[88];

//----- (000000002ED8FE75) ----------------------------------------------------
char __fastcall sub_2ED8FE75(__int64 a1, __int16 _DX)
{
  bool v2; // cf
  int v3; // eax
  int v5; // eax
  BOOL v6; // ett
  unsigned int v8; // ett
  unsigned int v9; // eax

  v6 = v2;
  v2 = __CFADD__(v2, v3);
  v5 = v6 + v3;
  v2 |= __CFADD__(v3, -819494394);
  __asm { insd }
  __outbyte(0xCAu, v5 + 6);
  __asm
  {
    int     0Eh;  - IRQ6 - DISKETTE INTERRUPT
    outsb
  }
  v9 = __indword(_DX);
  v8 = v2 + v9;
  v2 = *_RSI < v8;
  *_RSI -= v8;
  LOBYTE(v9) = v9 - (v2 + 7);
  __outdword(0x1Du, v9);
  return v9;
}
// 2ED8FE75: variable 'v2' is possibly undefined
// 2ED8FE75: variable 'v3' is possibly undefined
// 2ED8FE88: variable '_RSI' is possibly undefined

//----- (000000002EF6284E) ----------------------------------------------------
void sub_2EF6284E()
{
  ;
}

//----- (000000002F0AA543) ----------------------------------------------------
void sub_2F0AA543()
{
  __asm { iret }
}
// 2F0AA546: control flows out of bounds to 2F0AA547

//----- (000000002F22F46A) ----------------------------------------------------
void __fastcall sub_2F22F46A(__int64 _RCX, __int64 _RDX)
{
  _BYTE *v2; // rax
  _BYTE *v3; // rdi
  int v9; // [rsp+1Eh] [rbp+16h]

  LODWORD(v2) = __indword(_RDX);
  __readeflags();
  __asm { lock sbb [rdx-7Dh], cl }
  byte_3B2098A2[_RCX] -= _CF + BYTE1(_RCX);
  *v2 = BYTE1(_RCX);
  *v3 = (_BYTE)v2;
  *(int *)((char *)&v9 + _RDX) -= (_DWORD)v3 + 6;
  __asm { iret }
}
// 2F22F49D: control flows out of bounds to 2F22F49E
// 2F22F478: variable 'v2' is possibly undefined
// 2F22F485: variable 'v3' is possibly undefined

//----- (000000002F365772) ----------------------------------------------------
void sub_2F365772()
{
  __asm { iret }
}
// 2F365776: control flows out of bounds to 2F365777

//----- (000000002F52C09D) ----------------------------------------------------
void __fastcall sub_2F52C09D()
{
  unsigned __int8 v0; // al

  __outbyte(0x23u, v0);
  __asm { fxch7   st(7) }
  __outdword(0xB06Cu, 0xF8871E70);
  __readeflags();
  __asm { iretd }
}
// 2F52C0B8: control flows out of bounds to 2F52C0BA
// 2F52C09E: variable 'v0' is possibly undefined

//----- (000000002F796656) ----------------------------------------------------
void sub_2F796656()
{
  __asm { repne retf }
}
// 2F79665A: control flows out of bounds to 2F79665C

//----- (000000002F854D17) ----------------------------------------------------
void __fastcall __noreturn sub_2F854D17()
{
  _AL = MEMORY[0x7432FFBA31FBF825];
  __asm { xlat }
  __halt();
}
// 2F854D17: using guessed type void __fastcall __noreturn sub_2F854D17();

//----- (000000002F861352) ----------------------------------------------------
void __fastcall __noreturn sub_2F861352(__int64 a1, char a2)
{
  __int64 v2; // rsi

  byte_3AFE15CF[v2] |= a2;
  __halt();
}
// 2F861352: variable 'v2' is possibly undefined

//----- (000000002F87C836) ----------------------------------------------------
void __fastcall sub_2F87C836()
{
  char v0; // bh
  __int64 v1; // rbp

  *(_BYTE *)(v1 + 75) = v0;
  __asm { retnq }
}
// 2F87C839: control flows out of bounds to 2F87C83B
// 2F87C836: variable 'v0' is possibly undefined
// 2F87C836: variable 'v1' is possibly undefined

//----- (000000002F9D0B3D) ----------------------------------------------------
void __fastcall sub_2F9D0B3D(__int64 a1, unsigned int *a2)
{
  char v2; // ch
  __int64 v3; // rbp
  unsigned int v4; // esp
  bool v5; // cf

  v5 = *a2 < v4;
  *a2 -= v4;
  *(_BYTE *)(v3 + 512720480) += v2 + v5;
  __asm { iret }
}
// 2F9D0B47: control flows out of bounds to 2F9D0B48
// 2F9D0B3F: variable 'v4' is possibly undefined
// 2F9D0B41: variable 'v3' is possibly undefined

//----- (000000002F9D770F) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_2F9D770F(__int64 a1, __int64 _RDX)
{
  int v2; // eax
  __int64 v3; // rbx
  int v4; // ebp
  __int64 v5; // rdi
  __int64 v6; // rsi
  double v7; // st7
  __int64 v8; // rax
  int v9; // eax
  char v11; // sf
  int v12; // [rsp-8h] [rbp-8h]
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  LOBYTE(v2) = __inbyte(0x13u);
  v8 = (unsigned int)(v2 - (_DWORD)&unk_3A15C0CB);
  do
  {
    v7 = v7 + *(double *)(v8 + v5 + 104);
    __indword(_RDX);
    v9 = *(_DWORD *)v6;
    _RSI = v6 + 4;
    _RDX = (unsigned int)a1;
    __asm { outsb }
    v8 = v4 & (v9 - ((unsigned int)((unsigned __int8)v9 < BYTE1(v3)) - 1035032226));
    v6 = 2827849288i64;
    v4 = v12;
    LODWORD(v8) = __indword(4u);
    _enable();
    __asm { insb }
    LOBYTE(v8) = v8 - 66;
    v5 = (unsigned int)(112 * *(_DWORD *)(v3 + 34));
  }
  while ( !v11 );
  MK_FP(retaddr[0], retaddr[0])(a1, _RDX);
}
// 2F9D7730: positive sp value 8 has been found
// 2F9D7713: variable 'v2' is possibly undefined
// 2F9D7718: variable 'v7' is possibly undefined
// 2F9D7718: variable 'v5' is possibly undefined
// 2F9D771D: variable 'v6' is possibly undefined
// 2F9D7728: variable 'v4' is possibly undefined
// 2F9D771E: variable 'v3' is possibly undefined
// 2F9D772F: variable 'v12' is possibly undefined
// 2F9D7748: variable 'v11' is possibly undefined

//----- (000000002FAF1B81) ----------------------------------------------------
void __fastcall sub_2FAF1B81()
{
  char v4; // al
  __int64 v5; // rdi

  *(_BYTE *)v5 = v4;
  __asm { pushf }
  *(_DWORD *)(v5 + 1) = -*(_DWORD *)(v5 + 1);
  __asm { iretq }
}
// 2FAF1B91: control flows out of bounds to 2FAF1B93
// 2FAF1B83: variable 'v4' is possibly undefined
// 2FAF1B83: variable 'v5' is possibly undefined

//----- (000000002FB15B4C) ----------------------------------------------------
void __noreturn sub_2FB15B4C()
{
  __indword(0xBu);
  __halt();
}
// 2FB15B4C: using guessed type void __fastcall __noreturn sub_2FB15B4C();

//----- (000000002FB8F3DD) ----------------------------------------------------
void __fastcall sub_2FB8F3DD(__int64 a1, __int64 a2)
{
  unsigned __int64 v2; // rax
  __int64 v3; // rdi

  *(_DWORD *)(v3 + 84) ^= v2;
  __readeflags();
  __outqword(a2, v2);
  *(_BYTE *)(v3 + a2) -= ((unsigned __int8)v2 < 0x4Bu) + BYTE1(v2);
  __asm { iret }
}
// 2FB8F3F0: control flows out of bounds to 2FB8F3F1
// 2FB8F3DE: variable 'v2' is possibly undefined
// 2FB8F3DE: variable 'v3' is possibly undefined

//----- (000000002FDD369B) ----------------------------------------------------
void __noreturn sub_2FDD369B()
{
  __halt();
}
// 2FDD369B: using guessed type void __fastcall __noreturn sub_2FDD369B();

//----- (00000000300000C0) ----------------------------------------------------
void sub_300000C0()
{
  __asm { retf }
}
// 300000CB: unbalanced stack, ignored a potential tail call

//----- (00000000300F3029) ----------------------------------------------------
void __fastcall sub_300F3029()
{
  __asm { retn }
}
// 300F302A: unbalanced stack, ignored a potential tail call

//----- (00000000301C5CA4) ----------------------------------------------------
void sub_301C5CA4()
{
  __asm { iret }
}
// 301C5CA5: control flows out of bounds to 301C5CA6

//----- (00000000301CF85F) ----------------------------------------------------
void __fastcall sub_301CF85F(__int64 a1)
{
  __asm { retf }
}
// 301CF860: unbalanced stack, ignored a potential tail call

//----- (0000000030368498) ----------------------------------------------------
void __fastcall __noreturn sub_30368498()
{
  char v0; // cf
  _DWORD *v1; // rdi

  *v1 = v0 + *v1 - 1269408601;
  __halt();
}
// 30368499: variable 'v0' is possibly undefined
// 30368499: variable 'v1' is possibly undefined
// 30368498: using guessed type void __fastcall __noreturn sub_30368498();

//----- (000000003039A9FA) ----------------------------------------------------
// write access to const memory has been detected, the output may be wrong!
void __fastcall __noreturn sub_3039A9FA()
{
  unsigned int v0; // eax
  char v1; // bl
  _BYTE *v2; // rdi

  _disable();
  __outdword(0x68u, v0);
  byte_24246C59[1] = v1 & 0x1A;
  *v2 = v0;
  __halt();
}
// 3039AA05: write access to const memory at 24246C5A has been detected
// 3039A9FC: variable 'v0' is possibly undefined
// 3039AA05: variable 'v1' is possibly undefined
// 3039AA0B: variable 'v2' is possibly undefined
// 3039A9FA: using guessed type void __fastcall __noreturn sub_3039A9FA();

//----- (00000000303B144D) ----------------------------------------------------
void __fastcall sub_303B144D(__int64 a1, int a2)
{
  char v2; // cf
  char v3; // zf
  __int64 v4; // rax
  __int64 v5; // rbp
  int v6; // edi
  __int64 v7; // [rsp+0h] [rbp-8h]

  if ( v2 | v3 )
    v5 = v7;
  LOBYTE(v4) = __inbyte(a2);
  *(int *)((char *)&dword_3BE5D687 + v5) += v6 + v2;
  *(_DWORD *)(v4 + 51) |= a2;
  __asm { retf }
}
// 303B144E: variable 'v2' is possibly undefined
// 303B144E: variable 'v3' is possibly undefined
// 303B1450: variable 'v7' is possibly undefined
// 303B1453: variable 'v6' is possibly undefined
// 303B1453: variable 'v5' is possibly undefined
// 303B1459: variable 'v4' is possibly undefined
// 3BE5D687: using guessed type int dword_3BE5D687;

//----- (00000000303C6D16) ----------------------------------------------------
void sub_303C6D16()
{
  __asm { retn }
}
// 303C6D1A: unbalanced stack, ignored a potential tail call

//----- (00000000304293DD) ----------------------------------------------------
void __noreturn sub_304293DD()
{
  __halt();
}
// 304293DD: using guessed type void __fastcall __noreturn sub_304293DD();

//----- (00000000305B362B) ----------------------------------------------------
__int64 __fastcall sub_305B362B(__int64 _RCX, unsigned __int16 _DX)
{
  unsigned __int32 v2; // eax
  __int64 result; // rax
  _DWORD *v4; // rdi
  _DWORD *v5; // rsi
  __int64 v6; // r12
  __int64 v7; // r15
  _DWORD *v9; // rdi

  _CF = *v5 < *v4;
  v9 = v4 + 1;
  __outdword(_DX, result);
  __asm { lock push rcx }
  __outbyte(_DX, result);
  *(_QWORD *)(v7 + 10) += v6 + _CF;
  __asm { repne add ah, dl }
  if ( _ZF )
  {
    v2 = __indword(0x25u);
    __outdword(0x92u, v2);
    __outdword(0x9Bu, v2);
    *((_BYTE *)v9 + 1385948496) ^= _DX;
    JUMPOUT(0x305B3629i64);
  }
  return result;
}
// 305B3628: control flows out of bounds to 305B3629
// 305B362B: could not find valid save-restore pair for rbx
// 305B362B: variable 'v5' is possibly undefined
// 305B362B: variable 'v4' is possibly undefined
// 305B362C: variable 'result' is possibly undefined
// 305B3635: variable 'v6' is possibly undefined
// 305B3635: variable 'v7' is possibly undefined

//----- (00000000305F30A8) ----------------------------------------------------
void __fastcall sub_305F30A8()
{
  __int64 v0; // rbx

  *(int *)(v0 - 1681964963) >>= 25;
}
// 305F30A8: variable 'v0' is possibly undefined

//----- (00000000307AD33C) ----------------------------------------------------
void __fastcall sub_307AD33C()
{
  char v0; // cf
  __int64 v1; // rax

  *(_DWORD *)(v1 + 121) -= v0 + (_DWORD)&unk_5AE9C09;
  __asm { iret }
}
// 307AD343: control flows out of bounds to 307AD344
// 307AD33C: variable 'v1' is possibly undefined
// 307AD33C: variable 'v0' is possibly undefined

//----- (00000000307DD7D4) ----------------------------------------------------
void __fastcall sub_307DD7D4()
{
  char v0; // sf
  __int64 v2; // [rsp+0h] [rbp-8h]

  do
    _RSI += 4i64;
  while ( !v0 );
  __asm { outsb }
  *(_DWORD *)(unsigned int)(-103 * *(_DWORD *)(v2 + 21)) = MEMORY[0xD2899E33];
  __asm { iret }
}
// 307DD7EA: control flows out of bounds to 307DD7EB
// 307DD7DC: variable '_RSI' is possibly undefined
// 307DD7DD: variable 'v0' is possibly undefined
// 307DD7E5: variable 'v2' is possibly undefined

//----- (00000000307EF6A1) ----------------------------------------------------
void __fastcall sub_307EF6A1(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  __asm { retfq   4338h }
}
// 307EF6A2: control flows out of bounds to 307EF6A7
// 307EF6A1: too many input arguments, some ignored

//----- (00000000309C524F) ----------------------------------------------------
void __noreturn sub_309C524F()
{
  __halt();
}
// 309C524F: using guessed type void __fastcall __noreturn sub_309C524F();

//----- (0000000030B4F7C0) ----------------------------------------------------
void __fastcall __noreturn sub_30B4F7C0()
{
  __int64 v0; // rbp
  _DWORD *v1; // rsi

  __asm { int     85h }
  *(_DWORD *)(v0 - 36) *= 2;
  *v1 = v0;
  __halt();
}
// 30B4F7C5: variable 'v0' is possibly undefined
// 30B4F7C9: variable 'v1' is possibly undefined
// 30B4F7C0: using guessed type void __fastcall __noreturn sub_30B4F7C0();

//----- (0000000030C52867) ----------------------------------------------------
void __fastcall sub_30C52867(__int64 a1)
{
  *(_BYTE *)(a1 - 94) = __ROL1__(*(_BYTE *)(a1 - 94), a1);
  __asm { iret }
}
// 30C52876: control flows out of bounds to 30C52877

//----- (0000000030C55BC5) ----------------------------------------------------
void __noreturn sub_30C55BC5()
{
  __halt();
}
// 30C55BC5: using guessed type void __fastcall __noreturn sub_30C55BC5();

//----- (0000000030DB0FE2) ----------------------------------------------------
void __noreturn sub_30DB0FE2()
{
  __halt();
}
// 30DB0FE2: using guessed type void __fastcall __noreturn sub_30DB0FE2();

//----- (0000000030F4D7FE) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_30F4D7FE()
{
  int v0; // eax
  _DWORD *v1; // rdi
  bool v2; // cf

  v2 = __CFADD__(v0, *v1);
  *v1 += v0;
  LOBYTE(v0) = v0 - (v2 - 89);
  *v1 = v0;
  _enable();
  __asm
  {
    icebp
    enterq  0FFFFFFFFFFFFA22Eh, 2
  }
}
// 30F4D81A: positive sp value 5DB2 has been found
// 30F4D800: variable 'v0' is possibly undefined
// 30F4D800: variable 'v1' is possibly undefined

//----- (00000000310B200E) ----------------------------------------------------
void sub_310B200E()
{
  __asm { retf }
}
// 310B200F: unbalanced stack, ignored a potential tail call

//----- (000000003114AE18) ----------------------------------------------------
void __fastcall sub_3114AE18()
{
  char v1; // cf
  char v2; // zf
  char v3; // pf

  if ( !v3 )
  {
    __asm { iret }
    JUMPOUT(0x3114AE24i64);
  }
  if ( v1 | v2 )
    JUMPOUT(0x3114ADC9i64);
  MEMORY[0x721ABF6C15D321DC] = _EAX;
  __asm
  {
    outsd
    xlat
  }
  JUMPOUT(0x3114ADBBi64);
}
// 3114ADBA: control flows out of bounds to 3114ADBB
// 3114ADC4: control flows out of bounds to 3114ADC9
// 3114AE23: control flows out of bounds to 3114AE24
// 3114AE18: variable 'v3' is possibly undefined
// 3114ADB0: variable '_EAX' is possibly undefined
// 3114ADBD: variable 'v1' is possibly undefined
// 3114ADBD: variable 'v2' is possibly undefined

//----- (00000000311F7169) ----------------------------------------------------
__int64 __fastcall sub_311F7169()
{
  __int64 v0; // rbp

  __asm { ffree   st(7) }
  return MK_FP(*(_WORD *)(v0 + 113), *(unsigned int *)(v0 + 109))();
}
// 311F716B: variable 'v0' is possibly undefined
// 311F7169: using guessed type __int64 __fastcall sub_311F7169();

//----- (0000000031302436) ----------------------------------------------------
void __fastcall __noreturn sub_31302436()
{
  char v0; // ah
  __int64 v1; // rbx
  _DWORD *v2; // rdi
  _DWORD *v3; // rsi

  byte_2723D93B[v1] = v0;
  *v2 = *v3;
  __halt();
}
// 31302436: variable 'v0' is possibly undefined
// 31302436: variable 'v1' is possibly undefined
// 3130243E: variable 'v3' is possibly undefined
// 3130243E: variable 'v2' is possibly undefined
// 31302436: using guessed type void __fastcall __noreturn sub_31302436();

//----- (0000000031312131) ----------------------------------------------------
void __fastcall sub_31312131()
{
  __asm { retn }
}
// 31312132: unbalanced stack, ignored a potential tail call

//----- (0000000031559E49) ----------------------------------------------------
void sub_31559E49()
{
  __asm { retnq }
}
// 31559E4B: control flows out of bounds to 31559E4D

//----- (00000000315DD09C) ----------------------------------------------------
void __noreturn sub_315DD09C()
{
  __halt();
}
// 315DD09C: using guessed type void __fastcall __noreturn sub_315DD09C();

//----- (00000000315DD860) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_315DD860()
{
  ;
}
// 315DD861: positive sp value 8 has been found

//----- (0000000031680E66) ----------------------------------------------------
__int64 __fastcall sub_31680E66(__int64 a1)
{
  int v1; // ebp
  unsigned __int64 v3; // [rsp+0h] [rbp-8h]
  void *retaddr[2]; // [rsp+8h] [rbp+0h]

  __indword(0x55u);
  __writeeflags(v3);
  *(_DWORD *)(a1 - 84) |= v1;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 31680E6F: variable 'v3' is possibly undefined
// 31680E70: variable 'v1' is possibly undefined

//----- (00000000316EE43E) ----------------------------------------------------
void sub_316EE43E()
{
  __asm { retf }
}

//----- (00000000317084D6) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_317084D6()
{
  __asm
  {
    outsb
    iret
  }
}
// 317084DA: positive sp value 8 has been found
// 317084C7: control flows out of bounds to 317084C8

//----- (0000000031719900) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
char __fastcall sub_31719900(__int64 a1, _DWORD *a2)
{
  int v3; // ebx
  _DWORD *v4; // rdi

  _RBX = (unsigned int)(*a2 + v3);
  __asm { xlat }
  LOBYTE(_EAX) = _EAX ^ 0x4B;
  *v4 = _EAX;
  return _EAX;
}
// 31719906: positive sp value 8 has been found
// 31719900: could not find valid save-restore pair for rbp
// 31719902: variable 'v3' is possibly undefined
// 3171990A: variable '_EAX' is possibly undefined
// 3171990A: variable 'v4' is possibly undefined

//----- (0000000031752D82) ----------------------------------------------------
__int64 __fastcall sub_31752D82()
{
  __int64 v0; // rax

  return v0 + 853203189;
}
// 31752D82: variable 'v0' is possibly undefined
// 31752D82: using guessed type __int64 __fastcall sub_31752D82();

//----- (000000003178B691) ----------------------------------------------------
#error "3178B691: stack frame is too big (funcsize=0)"

//----- (0000000031829DD8) ----------------------------------------------------
__int64 __fastcall sub_31829DD8(__int64 a1, __int64 a2)
{
  _DWORD *v2; // rax
  int v3; // ebp
  char v4; // fl
  unsigned int v5; // esp
  char v6; // cf
  BOOL v7; // ett

  BYTE1(v2) = v4;
  v7 = v5 < *(_DWORD *)(a2 - 112);
  v6 = __CFADD__(v7, *v2) | __CFADD__(v3, v7 + *v2);
  *v2 += v3 + v7;
  return v3 + (unsigned int)&off_1B840025 + v6 + (_DWORD)v2;
}
// 31829DE6: variable 'v5' is possibly undefined
// 31829DE9: variable 'v2' is possibly undefined
// 31829DE9: variable 'v3' is possibly undefined
// 1B840025: using guessed type void *__ptr32 off_1B840025;

//----- (000000003195267B) ----------------------------------------------------
__int64 __fastcall sub_3195267B(unsigned int a1)
{
  int v1; // eax

  return ((__int64 (*)(void))(v1 & a1))();
}
// 3195267B: variable 'v1' is possibly undefined

//----- (000000003195AF8C) ----------------------------------------------------
__int64 __fastcall sub_3195AF8C(__int64 a1, __int64 a2)
{
  int v2; // esi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_DWORD *)(2 * a2 + 0x77CCE01B) += v2;
  __asm { icebp }
  return MK_FP(retaddr[0], retaddr[0])();
}
// 3195AF8C: variable 'v2' is possibly undefined

//----- (0000000031BA82E9) ----------------------------------------------------
void __fastcall __noreturn sub_31BA82E9(__int64 a1, __int16 _DX)
{
  char v2; // al

  MEMORY[0x65AD6DCB6A1BAEC4] = v2;
  __asm { insd }
  _DX = -21099;
  __asm
  {
    insb
    insd
  }
  __halt();
}
// 31BA82EA: variable 'v2' is possibly undefined

//----- (0000000031EC96B9) ----------------------------------------------------
void __fastcall sub_31EC96B9()
{
  char v0; // al

  MEMORY[0x2A17E2C446E47A51] = v0;
  __asm { retfq }
}
// 31EC96C5: control flows out of bounds to 31EC96C7
// 31EC96BC: variable 'v0' is possibly undefined

//----- (0000000031ED2CFC) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_31ED2CFC(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al

  __outbyte(a2, v2);
  __asm { iretd }
}
// 31ED2CFD: positive sp value 8 has been found
// 31ED2D01: control flows out of bounds to 31ED2D03
// 31ED2CFD: variable 'v2' is possibly undefined

//----- (00000000321F37C4) ----------------------------------------------------
void __fastcall __noreturn sub_321F37C4(char _CL, unsigned __int16 a2)
{
  unsigned int v2; // eax

  __outdword(a2, v2);
  __indword(0x26u);
  _disable();
  __asm { rcl     dword ptr [rdi], cl }
  __halt();
}
// 321F37C6: variable 'v2' is possibly undefined

//----- (0000000032291F5D) ----------------------------------------------------
void __fastcall sub_32291F5D(__int64 a1, _BYTE *a2)
{
  char v2; // ch
  __int64 v3; // rsi

  *(_BYTE *)(v3 + 1895898778) = v2;
  *a2 += BYTE1(a2);
  __asm { retnq }
}
// 32291F68: control flows out of bounds to 32291F6A
// 32291F5D: variable 'v3' is possibly undefined

//----- (00000000323AB15F) ----------------------------------------------------
void __fastcall __noreturn sub_323AB15F()
{
  char v0; // al

  MEMORY[0x29883A6C05255979] = v0;
  __halt();
}
// 323AB160: variable 'v0' is possibly undefined
// 323AB15F: using guessed type void __fastcall __noreturn sub_323AB15F();

//----- (00000000323FF419) ----------------------------------------------------
void __fastcall sub_323FF419(__int64 a1)
{
  int v1; // eax

  __asm { icebp }
  MK_FP(MEMORY[0xFFFFFFFF9CF7C8E7], MEMORY[0xFFFFFFFF9CF7C8DF])(a1, (unsigned int)(v1 >> 31));
  __readeflags();
  __asm { iret }
}
// 323FF42B: control flows out of bounds to 323FF42C
// 323FF41F: variable 'v1' is possibly undefined
// FFFFFFFF9CF7C8DF: using guessed type __int64 (__fastcall *)(_QWORD, _QWORD);

//----- (0000000032458543) ----------------------------------------------------
__int64 __fastcall sub_32458543(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __outbyte(a2, v2);
  __asm { outsb }
  return MK_FP(retaddr[0], retaddr[0])();
}
// 32458543: variable 'v2' is possibly undefined

//----- (000000003251C9EA) ----------------------------------------------------
void __fastcall sub_3251C9EA(__int64 a1)
{
  char v1; // sf
  char v2; // [rsp+72h] [rbp-8h]

  if ( v1 )
  {
    __asm { iret }
    JUMPOUT(0x3251C9EFi64);
  }
  __readeflags();
  *(_WORD *)(a1 - 28) = __DS__;
  MEMORY[0x5C11BD4D5F623EA2] = v2;
  __asm { iret }
  JUMPOUT(0x3251CA1Ci64);
}
// 3251C9EE: control flows out of bounds to 3251C9EF
// 3251CA1B: control flows out of bounds to 3251CA1C
// 3251C9EB: variable 'v1' is possibly undefined
// 3251CA07: variable 'v2' is possibly undefined

//----- (00000000325B2CE4) ----------------------------------------------------
void __fastcall __noreturn sub_325B2CE4(__int64 a1, __int64 a2)
{
  *(_DWORD *)(a2 - 39693697) &= a2;
  __halt();
}

//----- (00000000325F2AB9) ----------------------------------------------------
void __noreturn sub_325F2AB9()
{
  __halt();
}
// 325F2AB9: using guessed type void __fastcall __noreturn sub_325F2AB9();

//----- (00000000329E0E4E) ----------------------------------------------------
void __fastcall sub_329E0E4E(__int64 a1, __int64 a2)
{
  __asm { retn }
}
// 329E0E52: unbalanced stack, ignored a potential tail call

//----- (0000000032B10FCC) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_32B10FCC()
{
  unsigned int v0; // eax

  __outdword(0xC1u, v0);
  __halt();
}
// 32B10FCD: positive sp value 8 has been found
// 32B10FCD: variable 'v0' is possibly undefined
// 32B10FCC: using guessed type void __fastcall __noreturn sub_32B10FCC();

//----- (0000000032BC2C1A) ----------------------------------------------------
char __fastcall sub_32BC2C1A()
{
  char v0; // al

  return v0 ^ 0x28;
}
// 32BC2C1B: variable 'v0' is possibly undefined

//----- (0000000032C417C8) ----------------------------------------------------
void sub_32C417C8()
{
  __asm { retf }
}
// 32C417CA: unbalanced stack, ignored a potential tail call

//----- (0000000032DC857D) ----------------------------------------------------
// write access to const memory has been detected, the output may be wrong!
void __fastcall sub_32DC857D(__int64 a1, __int64 a2)
{
  _BYTE *v2; // rax
  char v3; // ch
  __int64 v4; // rax
  int v5; // eax
  int v6; // ebp
  _DWORD *v7; // rsi
  bool v8; // cf

  v8 = *(_BYTE *)(a1 + 37) != 0;
  *(_BYTE *)(a1 + 37) = -*(_BYTE *)(a1 + 37);
  v2 = (_BYTE *)(v5 - ((unsigned int)v8 - 1331565708));
  *((_BYTE *)v7 - 929641815) &= a1;
  *v7 = v6;
  *v2 -= 56;
  v3 = *(_BYTE *)(a2 - 748671968) & BYTE1(a1);
  byte_379410F7 = BYTE1(v2) - 110;
  v4 = MEMORY[0x3A3AB9944BB90415];
  *(_BYTE *)v7 += 5;
  *(_BYTE *)(v4 - 1240836843) -= v3;
  MEMORY[0x3544804E631BB6D5] = v4;
  __outbyte(0x76u, v4);
  __asm { iretd }
}
// 28064BD: control flows out of bounds to 28064BF
// 2806490: write access to const memory at 379410F7 has been detected
// 2806475: variable 'v5' is possibly undefined
// 280647A: variable 'v7' is possibly undefined
// 2806480: variable 'v6' is possibly undefined
// 379410F7: using guessed type char byte_379410F7;

//----- (0000000032F0D3E9) ----------------------------------------------------
void __fastcall sub_32F0D3E9()
{
  __int64 v0; // rax

  *(_BYTE *)(v0 + 4) -= 126;
  __asm { iret }
}
// 32F0D3F3: control flows out of bounds to 32F0D3F4
// 32F0D3EA: variable 'v0' is possibly undefined

//----- (0000000032F49880) ----------------------------------------------------
void sub_32F49880()
{
  __asm { iret }
}
// 32F49886: control flows out of bounds to 32F49887

//----- (0000000032FB4B01) ----------------------------------------------------
__int64 sub_32FB4B01()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000033006FA5) ----------------------------------------------------
void sub_33006FA5()
{
  ;
}

//----- (0000000033194D5D) ----------------------------------------------------
void __fastcall sub_33194D5D()
{
  __asm { retn }
}
// 33194D5F: unbalanced stack, ignored a potential tail call

//----- (00000000331C2F8C) ----------------------------------------------------
void __fastcall __noreturn sub_331C2F8C(__int64 a1, __int16 _DX)
{
  __asm { insb }
  __halt();
}

//----- (0000000033225834) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_33225834(int *a1)
{
  *a1 = ~*a1;
  __halt();
}
// 33225835: positive sp value 8 has been found

//----- (00000000332C9BA0) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_332C9BA0()
{
  char v0; // cf
  int v1; // eax
  __int64 v2; // rdi
  __int64 v3; // rax
  __int32 v4; // esp
  __int64 v5; // [rsp-8h] [rbp-8h]

  v2 = v5;
  __asm { icebp }
  LOBYTE(v1) = v0 + v1 - 58;
  __outbyte(0x3Bu, v1);
  v3 = (unsigned int)&unk_2F6D21C4 & v1;
  *(_DWORD *)(v3 - 1550806975) |= 0x20u;
  _InterlockedExchange((volatile __int32 *)(v2 + 27083906), v4);
  __asm { jmp     qword ptr [rax-48B13236h] }
}
// 332C9BA1: positive sp value 8 has been found
// 332C9BBC: unbalanced stack, ignored a potential tail call
// 332C9BA0: variable 'v5' is possibly undefined
// 332C9BA2: variable 'v0' is possibly undefined
// 332C9BA2: variable 'v1' is possibly undefined
// 332C9BB6: variable 'v4' is possibly undefined

//----- (000000003331C415) ----------------------------------------------------
void sub_3331C415()
{
  __asm { iret }
}
// 3331C41C: control flows out of bounds to 3331C41D

//----- (00000000333DD7D3) ----------------------------------------------------
void __fastcall __noreturn sub_333DD7D3(__int64 a1)
{
  char v1; // cf

  *(_BYTE *)(3 * a1 - 105) -= v1 + a1;
  __halt();
}
// 333DD7D9: variable 'v1' is possibly undefined

//----- (00000000335FD1A2) ----------------------------------------------------
__int64 __fastcall sub_335FD1A2()
{
  unsigned int v0; // ebx
  __int64 v1; // rsi

  *(_DWORD *)(v1 - 108324735) = v0;
  return (*(__int64 (**)(void))(v0 + 0x7B5B3DBFi64))();
}
// 335FD1A3: variable 'v0' is possibly undefined
// 335FD1A3: variable 'v1' is possibly undefined
// 335FD1A2: using guessed type __int64 __fastcall sub_335FD1A2();

//----- (00000000337039A9) ----------------------------------------------------
void __fastcall sub_337039A9(__int64 a1, __int16 _DX)
{
  __asm
  {
    insd
    iret
  }
}
// 337039AA: control flows out of bounds to 337039AB

//----- (000000003375E58F) ----------------------------------------------------
void sub_3375E58F()
{
  ;
}

//----- (0000000033790D29) ----------------------------------------------------
void __fastcall sub_33790D29()
{
  __asm
  {
    xlat
    iret
  }
}
// 33790D2C: control flows out of bounds to 33790D2D

//----- (000000003391D629) ----------------------------------------------------
void sub_3391D629()
{
  __asm { iret }
}
// 3391D62C: control flows out of bounds to 3391D62D

//----- (00000000339C3CE5) ----------------------------------------------------
__int64 sub_339C3CE5()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (0000000033A1123C) ----------------------------------------------------
void __fastcall __noreturn sub_33A1123C()
{
  __int64 v0; // rax
  __int64 v1; // rbx
  unsigned int *v2; // rsi
  bool v3; // zf

  v3 = (*(_BYTE *)(v0 - 248608366) & 0x5B) == 0;
  *(_BYTE *)(v0 - 248608366) &= 0x5Bu;
  if ( v3 )
    v1 = *v2;
  *(_WORD *)(v1 - 83) = __DS__;
  __halt();
}
// 33A1123C: variable 'v0' is possibly undefined
// 33A11243: variable 'v2' is possibly undefined
// 33A11249: variable 'v1' is possibly undefined
// 33A1123C: using guessed type void __fastcall __noreturn sub_33A1123C();

//----- (0000000033A71C8D) ----------------------------------------------------
void __noreturn sub_33A71C8D()
{
  __halt();
}
// 33A71C8D: using guessed type void __fastcall __noreturn sub_33A71C8D();

//----- (0000000033B47741) ----------------------------------------------------
char __fastcall sub_33B47741()
{
  _BYTE *v0; // rax
  char v1; // dh

  *v0 = v1;
  return (unsigned __int8)v0 & 0x44;
}
// 33B47749: variable 'v1' is possibly undefined
// 33B47749: variable 'v0' is possibly undefined

//----- (0000000033F10518) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_33F10518()
{
  __int64 v0; // rax
  _DWORD *v1; // rsi
  char v2; // [rsp-Fh] [rbp-Fh]
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __inbyte(0);
  LOBYTE(v0) = -3;
  *v1 >>= 10;
  *(_BYTE *)(v0 + 2127340892) |= v2;
  MK_FP(retaddr[0], retaddr[0])();
}
// 33F1051E: positive sp value 10 has been found
// 33F10518: could not find valid save-restore pair for rbx
// 33F10518: could not find valid save-restore pair for rdi
// 33F10524: variable 'v1' is possibly undefined
// 33F1052C: variable 'v2' is possibly undefined
// 33F1052C: variable 'v0' is possibly undefined

//----- (0000000033FB62FA) ----------------------------------------------------
__int64 __fastcall sub_33FB62FA(__int64 a1, char a2)
{
  LOBYTE(a1) = a2 ^ a1;
  return sub_33FB6302(a1);
}
// 33FB6302: using guessed type __int64 __fastcall sub_33FB6302(_QWORD);

//----- (0000000033FB6302) ----------------------------------------------------
__int64 __fastcall sub_33FB6302(__int64 a1, char a2)
{
  __int64 v2; // rbp

  BYTE1(a1) -= *(_BYTE *)(v2 + 950657661);
  return sub_33FB62FA(a1, a2);
}
// 33FB6303: variable 'v2' is possibly undefined

//----- (0000000033FD1E4B) ----------------------------------------------------
void sub_33FD1E4B()
{
  ;
}

//----- (00000000340BF641) ----------------------------------------------------
void sub_340BF641()
{
  unsigned __int64 v0; // kr00_8

  __asm { int     0ACh; used by BASIC while in interpreter }
  v0 = __readeflags();
  __asm { retn }
}
// 340BF646: unbalanced stack, ignored a potential tail call

//----- (00000000341C7B93) ----------------------------------------------------
void __fastcall sub_341C7B93()
{
  __asm
  {
    rcl     bh, 1
    iret
  }
}
// 341C7B9B: control flows out of bounds to 341C7B9C

//----- (0000000034300D18) ----------------------------------------------------
void sub_34300D18()
{
  __asm { iret }
}
// 34300CB4: control flows out of bounds to 34300CB5

//----- (0000000034307E8C) ----------------------------------------------------
void sub_34307E8C()
{
  __asm
  {
    int     0A6h; used by BASIC while in interpreter
    iret
  }
}
// 34307E91: control flows out of bounds to 34307E92

//----- (000000003447C4D1) ----------------------------------------------------
__int64 __fastcall sub_3447C4D1(__int64 _RCX)
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __asm { frstor  byte ptr [rcx+75h] }
  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000003459BA02) ----------------------------------------------------
void __fastcall __noreturn sub_3459BA02(__int64 a1, __int16 _DX)
{
  __asm
  {
    icebp
    insb
  }
  __halt();
}

//----- (000000003461143A) ----------------------------------------------------
void __fastcall __noreturn sub_3461143A()
{
  int v0; // eax
  _DWORD *v1; // rbx
  int v2; // esp

  MEMORY[0xCD28EF1FA42C9519] = v0;
  *v1 ^= v2;
  __asm { int     27h; DOS - TERMINATE BUT STAY RESIDENT }
}
// 34611448: control flows out of bounds to 3461144A
// 3461143A: variable 'v0' is possibly undefined
// 34611443: variable 'v2' is possibly undefined
// 34611443: variable 'v1' is possibly undefined
// 3461143A: using guessed type void __fastcall __noreturn sub_3461143A();

//----- (00000000346DB156) ----------------------------------------------------
__int64 __fastcall sub_346DB156(__int64 (*a1)(void))
{
  return a1();
}

//----- (00000000346FDF25) ----------------------------------------------------
void __fastcall sub_346FDF25()
{
  sub_1761DE67();
  __asm { jmp     qword ptr [rbx] }
}
// 346FDF2E: unbalanced stack, ignored a potential tail call
// 1761DE67: using guessed type __int64 sub_1761DE67(void);

//----- (0000000034713E0D) ----------------------------------------------------
void __fastcall sub_34713E0D(__int64 a1, unsigned __int16 a2)
{
  unsigned __int8 v2; // al

  _disable();
  __outbyte(a2, v2);
  __asm { iret }
}
// 34713E13: control flows out of bounds to 34713E14
// 34713E12: variable 'v2' is possibly undefined

//----- (0000000034850A13) ----------------------------------------------------
void sub_34850A13()
{
  __asm { iret }
}
// 34850A15: control flows out of bounds to 34850A16

//----- (0000000034929BE6) ----------------------------------------------------
void sub_34929BE6()
{
  __asm { retfq }
}
// 34929BEB: control flows out of bounds to 34929BED

//----- (0000000034A4B0F9) ----------------------------------------------------
void __fastcall sub_34A4B0F9()
{
  __asm { retn }
}
// 34A4B0FA: unbalanced stack, ignored a potential tail call

//----- (0000000034A877B7) ----------------------------------------------------
__int64 __fastcall sub_34A877B7(__int64 a1)
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  BYTE1(a1) -= a1;
  return MK_FP(retaddr[0], retaddr[0])(a1);
}

//----- (0000000034BD1E7E) ----------------------------------------------------
__int64 __fastcall sub_34BD1E7E(__int64 a1, __int64 _RDX)
{
  __int64 v2; // rdi

  __asm { fnstenv byte ptr [rdx-7Bh] }
  return MK_FP(*(_WORD *)(v2 + 1988606790), *(unsigned int *)(v2 + 1988606786))();
}
// 34BD1E81: variable 'v2' is possibly undefined

//----- (0000000034BFD7C7) ----------------------------------------------------
void sub_34BFD7C7()
{
  _disable();
  __asm { retfq }
}
// 34BFD7E9: control flows out of bounds to 34BFD7EB

//----- (0000000034D2B2EE) ----------------------------------------------------
void __fastcall sub_34D2B2EE(char a1, _BYTE *a2)
{
  __int64 v2; // rbx

  *a2 -= 43;
  *(_BYTE *)(v2 - 1432800220) = __ROL1__(*(_BYTE *)(v2 - 1432800220), a1);
  __asm
  {
    outsd
    int     0A4h; used by BASIC while in interpreter
    retn
  }
}
// 34D2B301: unbalanced stack, ignored a potential tail call
// 34D2B2F7: variable 'v2' is possibly undefined

//----- (0000000034D76D7B) ----------------------------------------------------
void __noreturn sub_34D76D7B()
{
  __halt();
}
// 34D76D7B: using guessed type void __fastcall __noreturn sub_34D76D7B();

//----- (0000000034DFBA0D) ----------------------------------------------------
void __fastcall sub_34DFBA0D(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  __asm { retfq   6255h }
}
// 34DFBA15: control flows out of bounds to 34DFBA19
// 34DFBA0D: too many input arguments, some ignored

//----- (0000000034F047FB) ----------------------------------------------------
void __fastcall sub_34F047FB()
{
  __int64 v0; // rbx

  *(_BYTE *)(v0 + 90) ^= v0;
  __asm { retf }
}
// 34F04803: unbalanced stack, ignored a potential tail call
// 34F047FF: variable 'v0' is possibly undefined

//----- (0000000034F04CC9) ----------------------------------------------------
void sub_34F04CC9()
{
  __asm { retf }
}

//----- (0000000034FE7F92) ----------------------------------------------------
char __fastcall sub_34FE7F92(__int64 a1)
{
  bool v2; // cf

  __asm { rcr     dword ptr [rax], 1 }
  v2 = __CFADD__(BYTE1(_RAX), *(_BYTE *)(a1 - 7));
  *(_BYTE *)(a1 - 7) += BYTE1(_RAX);
  return _RAX - (v2 + 116) + 95;
}
// 34FE7F94: variable '_RAX' is possibly undefined

//----- (0000000034FF4BCD) ----------------------------------------------------
__int64 __fastcall sub_34FF4BCD()
{
  __int64 v0; // rbx

  *(_QWORD *)(v0 + 1073752106) ^= 0xFFFFFFFFFFFFFFA6ui64;
  return MEMORY[0x597DF228]();
}
// 34FF4BCD: variable 'v0' is possibly undefined
// 34FF4BCD: using guessed type __int64 __fastcall sub_34FF4BCD();

//----- (000000003502C9C2) ----------------------------------------------------
__int64 __fastcall sub_3502C9C2()
{
  __int64 result; // rax

  __outdword(0x6Bu, result);
  return result;
}
// 3502C9C2: variable 'result' is possibly undefined
// 3502C9C2: using guessed type __int64 __fastcall sub_3502C9C2();

//----- (00000000350D0ED4) ----------------------------------------------------
void __fastcall sub_350D0ED4(__int64 a1, __int64 _RDX)
{
  unsigned __int64 v2; // rbx

  __asm { rcl     dword ptr [rdx-134BD340h], 0B4h }
  __writeeflags(v2);
  __asm { iret }
}
// 350D0EDD: control flows out of bounds to 350D0EDE
// 350D0EDC: variable 'v2' is possibly undefined

//----- (0000000035245782) ----------------------------------------------------
__int64 sub_35245782()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (00000000352E3007) ----------------------------------------------------
void sub_352E3007()
{
  __asm { iret }
}
// 352E3013: control flows out of bounds to 352E3014

//----- (00000000353734DD) ----------------------------------------------------
void __fastcall sub_353734DD()
{
  __int64 v0; // rax
  _BYTE *v1; // rbx
  int v2; // esp
  __int64 v3; // rdi
  bool v4; // cf

  v4 = __CFADD__(v2, *(_DWORD *)(v3 + 1));
  *(_DWORD *)(v3 + 1) += v2;
  if ( !v4 )
  {
    *v1 = 0;
    LODWORD(v0) = (__int16)v0;
    *(_DWORD *)(v0 - 1592806486) = __ROR4__(*(_DWORD *)(v0 - 1592806486), 124);
    __asm { iret }
    JUMPOUT(0x353734FFi64);
  }
  __halt();
}
// 353734FE: control flows out of bounds to 353734FF
// 353734DD: variable 'v2' is possibly undefined
// 353734DD: variable 'v3' is possibly undefined
// 353734E2: variable 'v1' is possibly undefined
// 353734E5: variable 'v0' is possibly undefined

//----- (00000000353A1CB1) ----------------------------------------------------
void __fastcall sub_353A1CB1(__int64 a1, __int16 _DX)
{
  __int64 v2; // rsi

  __asm { insd }
  *(char *)(v2 + 1279669137) >>= 1;
}
// 353A1CB6: variable 'v2' is possibly undefined

//----- (000000003544487B) ----------------------------------------------------
__int64 __fastcall sub_3544487B()
{
  __int16 v0; // ax
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  MEMORY[0x4A2574FFFAC44FBB] = v0;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 3544487C: variable 'v0' is possibly undefined

//----- (0000000035605D85) ----------------------------------------------------
__int64 __fastcall sub_35605D85()
{
  _DWORD *v2; // rdi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *v2 = _EAX;
  __asm { xlat }
  return MK_FP(retaddr[0], retaddr[0])();
}
// 35605D85: variable '_EAX' is possibly undefined
// 35605D85: variable 'v2' is possibly undefined

//----- (000000003583BB72) ----------------------------------------------------
__int64 __fastcall sub_3583BB72()
{
  __int64 result; // rax
  __int16 v1; // fps

  *(_WORD *)(result - 1522423092) = v1;
  return result;
}
// 3583BB73: variable 'result' is possibly undefined
// 3583BB72: using guessed type __int64 __fastcall sub_3583BB72();

//----- (0000000035852037) ----------------------------------------------------
void sub_35852037()
{
  __asm { iret }
}
// 35852039: control flows out of bounds to 3585203A

//----- (0000000035A29E45) ----------------------------------------------------
__int16 __fastcall sub_35A29E45(__int64 a1, __int64 a2)
{
  __int64 v2; // rdi
  __int16 v3; // sp
  __int16 result; // ax

  result = v3;
  HIBYTE(result) += *(_BYTE *)(a2 + 2 * v2 - 997588843);
  return result;
}
// 35A29E46: variable 'v3' is possibly undefined
// 35A29E49: variable 'v2' is possibly undefined

//----- (0000000035B45785) ----------------------------------------------------
int __fastcall sub_35B45785()
{
  __int64 v0; // rsi

  return *(_DWORD *)v0;
}
// 35B45785: variable 'v0' is possibly undefined

//----- (0000000035C8A63A) ----------------------------------------------------
__int64 __fastcall sub_35C8A63A()
{
  _BYTE *v0; // rax
  __int64 v1; // rbp
  _DWORD *v2; // rsi

  LODWORD(v0) = *v2;
  *v0 -= 19;
  return MK_FP(*(_WORD *)(v1 - 51 + 4), *(unsigned int *)(v1 - 51))(2748086306i64);
}
// 35C8A63A: variable 'v2' is possibly undefined
// 35C8A645: variable 'v0' is possibly undefined
// 35C8A647: variable 'v1' is possibly undefined
// 35C8A63A: using guessed type __int64 __fastcall sub_35C8A63A();

//----- (0000000035CFC35C) ----------------------------------------------------
void __fastcall sub_35CFC35C()
{
  _BYTE *v0; // rdi
  _BYTE *v1; // rsi

  *v0 = *v1;
  __asm { iret }
}
// 35CFC35D: control flows out of bounds to 35CFC35E
// 35CFC35C: variable 'v1' is possibly undefined
// 35CFC35C: variable 'v0' is possibly undefined

//----- (0000000035D4D6A5) ----------------------------------------------------
void __fastcall __noreturn sub_35D4D6A5()
{
  __int64 v2; // rdi
  int i; // eax

  __asm
  {
    xlat
    outsb
  }
  for ( i = MEMORY[0xF7F54721BC06F8CB]; ; LOBYTE(i) = 124 )
  {
    LOBYTE(i) = i - 90;
    MEMORY[0x96830AFBC872F9F7] = i;
    --*(_BYTE *)(v2 + 101);
  }
}
// 35D4D6D0: variable 'v2' is possibly undefined
// 35D4D6A5: using guessed type void __fastcall __noreturn sub_35D4D6A5();

//----- (0000000035F9C7D4) ----------------------------------------------------
void sub_35F9C7D4()
{
  __asm { iret }
}
// 35F9C7DA: control flows out of bounds to 35F9C7DB

//----- (0000000036029DE1) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
char __fastcall sub_36029DE1(__int64 a1, __int64 a2)
{
  char v2; // al
  char v3; // bl
  char result; // al

  result = v2 - 85;
  *(_BYTE *)(a2 - 619633770) ^= v3;
  return result;
}
// 36029DE2: positive sp value 8 has been found
// 36029DE2: variable 'v2' is possibly undefined
// 36029DE4: variable 'v3' is possibly undefined

//----- (00000000360723E5) ----------------------------------------------------
void __noreturn sub_360723E5()
{
  __halt();
}
// 360723E5: using guessed type void __fastcall __noreturn sub_360723E5();

//----- (00000000360EF661) ----------------------------------------------------
void __noreturn sub_360EF661()
{
  __asm { int     1; - internal hardware - SINGLE-STEP }
  __halt();
}
// 360EF661: using guessed type void __fastcall __noreturn sub_360EF661();

//----- (0000000036219DF6) ----------------------------------------------------
void sub_36219DF6()
{
  ;
}

//----- (000000003623C2F4) ----------------------------------------------------
void __noreturn sub_3623C2F4()
{
  JUMPOUT(0xFFFFFFFFC70AE0A3ui64);
}
// 3623C2F5: control flows out of bounds to FFFFFFFFC70AE0A3
// 3623C2F4: using guessed type void __fastcall __noreturn sub_3623C2F4();

//----- (00000000362902F3) ----------------------------------------------------
void sub_362902F3()
{
  __asm
  {
    int     5Fh; IRQ15 relocated by DESQview 2.26+
    retnq
  }
}
// 36290301: control flows out of bounds to 36290303

//----- (000000003632822A) ----------------------------------------------------
void __fastcall __noreturn sub_3632822A()
{
  _DWORD *v0; // rdi
  _DWORD *v1; // rsi

  while ( 1 )
    *v0++ = *v1++;
}
// 3632822F: variable 'v1' is possibly undefined
// 3632822F: variable 'v0' is possibly undefined
// 3632822A: using guessed type void __fastcall __noreturn sub_3632822A();

//----- (00000000363C737E) ----------------------------------------------------
void __fastcall __noreturn sub_363C737E()
{
  __int64 v0; // rax

  *(_DWORD *)(v0 - 273522753) -= v0;
  __halt();
}
// 363C7385: variable 'v0' is possibly undefined
// 363C737E: using guessed type void __fastcall __noreturn sub_363C737E();

//----- (00000000365A3642) ----------------------------------------------------
__int64 __fastcall sub_365A3642(__int64 a1, __int16 _DX)
{
  __int64 result; // rax

  __asm { insb }
  MEMORY[0x4471803457FE449A] = result;
  __asm { fstp    st(5) }
  return result;
}
// 365A3643: variable 'result' is possibly undefined

//----- (00000000365C91C7) ----------------------------------------------------
void __fastcall sub_365C91C7(__int64 a1, __int64 a2)
{
  __int64 v2; // rax

  __asm { icebp }
  *(_BYTE *)(a1 + 4 * a2 - 40) |= 0x7Cu;
  *(_DWORD *)(v2 + 141426688) = v2;
  __asm { retf }
}
// 365C91D7: unbalanced stack, ignored a potential tail call
// 365C91CF: variable 'v2' is possibly undefined

//----- (000000003662ECB3) ----------------------------------------------------
void sub_3662ECB3()
{
  __asm { retnq }
}
// 3662ECB5: control flows out of bounds to 3662ECB7

//----- (0000000036631C49) ----------------------------------------------------
_DWORD *__fastcall sub_36631C49()
{
  _DWORD *result; // rax

  *result *= 2;
  return result;
}
// 36631C4A: variable 'result' is possibly undefined

//----- (00000000366B26BA) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_366B26BA(_BYTE *a1, _BYTE *a2)
{
  _WORD *v2; // rax
  double v3; // st7
  unsigned __int64 v4; // [rsp-8h] [rbp-8h]

  LOBYTE(v2) = *a1 + __CFADD__(*a1, (_BYTE)v2) + *a1 + (_BYTE)v2;
  *v2 = (__int16)v3;
  *a2 += (_BYTE)v2;
  __outbyte(0x7Du, (unsigned __int8)v2);
  __writeeflags(v4);
  __asm { iret }
}
// 366B26E0: positive sp value 8 has been found
// 366B26E0: control flows out of bounds to 366B26E1
// 366B26BA: variable 'v2' is possibly undefined
// 366B26BF: variable 'v3' is possibly undefined
// 366B26DF: variable 'v4' is possibly undefined

//----- (00000000369FCE78) ----------------------------------------------------
void __fastcall __noreturn sub_369FCE78()
{
  char v0; // cf
  int v1; // ebx
  unsigned int v2; // edi

  *(_DWORD *)(v2 - 83i64) -= v0 + v1;
  __halt();
}
// 369FCE79: variable 'v2' is possibly undefined
// 369FCE7A: variable 'v0' is possibly undefined
// 369FCE7A: variable 'v1' is possibly undefined
// 369FCE78: using guessed type void __fastcall __noreturn sub_369FCE78();

//----- (0000000036A9AD5C) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_36A9AD5C()
{
  int v0; // eax
  _DWORD *v1; // rdi
  void *retaddr[2]; // [rsp+8h] [rbp+0h]

  *v1 = v0;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 36A9AD61: positive sp value 8 has been found
// 36A9AD5D: variable 'v0' is possibly undefined
// 36A9AD5D: variable 'v1' is possibly undefined

//----- (0000000036AA39C6) ----------------------------------------------------
char __fastcall sub_36AA39C6(int a1, int a2)
{
  __int64 v2; // rbp
  void *v3; // rdi
  char v4; // al
  bool v5; // cf
  char result; // al

  __indword(a2);
  v4 = MEMORY[0x405F974273F22B81];
  v5 = __CFADD__((_BYTE)a2, *(_BYTE *)(v2 - 3));
  *(_BYTE *)(v2 - 3) += a2;
  result = v5 + v4 - 108;
  memset(v3, result, (unsigned int)(a1 - a2));
  return result;
}
// 36AA39D3: variable 'v2' is possibly undefined
// 36AA39D8: variable 'v3' is possibly undefined

//----- (0000000036CC929B) ----------------------------------------------------
void __fastcall __noreturn sub_36CC929B(__int64 _RCX)
{
  double v1; // st7

  __asm { int     0FDh }
  *(int *)((char *)&dword_367C7D39 + _RCX) = (int)v1;
  __asm { fnstenv byte ptr [rcx+rcx] }
  __halt();
}
// 36CC92A6: variable 'v1' is possibly undefined
// 367C7D39: using guessed type int dword_367C7D39;

//----- (0000000036CF73DC) ----------------------------------------------------
void __noreturn sub_36CF73DC()
{
  __halt();
}
// 36CF73DC: using guessed type void __fastcall __noreturn sub_36CF73DC();

//----- (0000000036FDFB2E) ----------------------------------------------------
unsigned __int8 __fastcall sub_36FDFB2E(__int64 a1, unsigned __int16 a2)
{
  _disable();
  return __inbyte(a2);
}

//----- (0000000036FE3DB3) ----------------------------------------------------
__int64 __fastcall sub_36FE3DB3()
{
  __int64 v0; // rbx
  __int64 v1; // rbp
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_DWORD *)(v0 - 40) -= v1;
  *(_DWORD *)(v1 - 65) = -*(_DWORD *)(v1 - 65);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 36FE3DB5: variable 'v0' is possibly undefined
// 36FE3DB5: variable 'v1' is possibly undefined

//----- (000000003700BF90) ----------------------------------------------------
__int64 __fastcall sub_3700BF90(__int64 a1)
{
  char v1; // dh
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_BYTE *)(a1 + 84) = v1;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 3700BF92: variable 'v1' is possibly undefined

//----- (000000003701258B) ----------------------------------------------------
__int64 __fastcall sub_3701258B(__int64 a1, __int64 a2)
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  LOBYTE(a2) = __ROL1__(a2, a1);
  return MK_FP(retaddr[0], retaddr[0])(a1, a2);
}

//----- (000000003702F262) ----------------------------------------------------
void sub_3702F262()
{
  __asm { iret }
}
// 3702F264: control flows out of bounds to 3702F265

//----- (00000000370AB06A) ----------------------------------------------------
void __fastcall sub_370AB06A()
{
  volatile __int32 *v0; // rsi

  _InterlockedExchange(v0, (__int32)v0);
  __asm { retf }
}
// 370AB09A: unbalanced stack, ignored a potential tail call
// 370AB098: variable 'v0' is possibly undefined

//----- (00000000370F1CC3) ----------------------------------------------------
void __fastcall __noreturn sub_370F1CC3()
{
  __asm { frstor  byte ptr [rbx+44h] }
  __halt();
}
// 370F1CC3: using guessed type void __fastcall __noreturn sub_370F1CC3();

//----- (00000000372E2137) ----------------------------------------------------
__int64 __fastcall sub_372E2137()
{
  __int64 result; // rax

  __outdword(0x96u, result);
  return result;
}
// 372E213D: variable 'result' is possibly undefined
// 372E2137: using guessed type __int64 __fastcall sub_372E2137();

//----- (0000000037303958) ----------------------------------------------------
// write access to const memory has been detected, the output may be wrong!
void sub_37303958()
{
  LODWORD(qword_37DCEF40[292]) = 7695961;
}
// 37303958: write access to const memory at 37DCF860 has been detected
// 37DCEF40: using guessed type __int64[512];

//----- (0000000037365AC9) ----------------------------------------------------
void sub_37365AC9()
{
  __asm { retnq }
}
// 37365ACB: control flows out of bounds to 37365ACD

//----- (000000003744A9A2) ----------------------------------------------------
void __noreturn sub_3744A9A2()
{
  __halt();
}
// 3744A9A2: using guessed type void __fastcall __noreturn sub_3744A9A2();

//----- (000000003744EFD3) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_3744EFD3(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  unsigned int v4; // eax
  char v5; // bl
  _DWORD *v6; // rdi
  _DWORD *v7; // rsi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *v6 = *v7;
  LOBYTE(v4) = v4 & 0xE8;
  *(_BYTE *)(a4 - 28) -= v5;
  return MK_FP(retaddr[0], retaddr[0])(v4);
}
// 3744EFDF: positive sp value 8 has been found
// 3744EFD3: variable 'v7' is possibly undefined
// 3744EFD3: variable 'v6' is possibly undefined
// 3744EFDC: variable 'v4' is possibly undefined
// 3744EFE2: variable 'v5' is possibly undefined

//----- (00000000374BCA8E) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_374BCA8E()
{
  _DWORD *v0; // rsi
  unsigned __int64 v1; // [rsp-10h] [rbp-10h]
  _DWORD *v2; // [rsp-8h] [rbp-8h]

  __writeeflags(v1);
  *v2 = *v0;
  BUG();
}
// 374BCA92: positive sp value 10 has been found
// 374BCA8E: variable 'v1' is possibly undefined
// 374BCA92: variable 'v0' is possibly undefined
// 374BCA92: variable 'v2' is possibly undefined
// 374BCA8E: using guessed type void __fastcall __noreturn sub_374BCA8E();

//----- (000000003760CC04) ----------------------------------------------------
void __fastcall sub_3760CC04()
{
  int v0; // esp
  __int64 v1; // rbp
  __int64 v2; // rsi

  *(_DWORD *)((char *)&dword_21ADFC73[2 * v1] + v2) ^= v0;
  __asm { retnq }
}
// 3760CC0B: control flows out of bounds to 3760CC0D
// 3760CC04: variable 'v0' is possibly undefined
// 3760CC04: variable 'v2' is possibly undefined
// 3760CC04: variable 'v1' is possibly undefined
// 21ADFC73: using guessed type _DWORD[2];

//----- (00000000377DEFB5) ----------------------------------------------------
__int64 __fastcall sub_377DEFB5(__int64 a1)
{
  char v1; // al
  __int64 v2; // rbp
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __asm { outsd }
  MEMORY[0x895609CF1C112067] = v1;
  return MK_FP(retaddr[0], retaddr[0])(a1, v2);
}
// 377DEFBC: variable 'v1' is possibly undefined
// 377DEFD4: variable 'v2' is possibly undefined

//----- (0000000037B4BBFC) ----------------------------------------------------
void __fastcall sub_37B4BBFC(char a1)
{
  _BYTE *v1; // rax
  __int64 v2; // rbx
  unsigned int v3; // esp
  __int64 v4; // rax

  BYTE1(v1) &= *(_BYTE *)(v2 - 244510485);
  *v1 |= a1;
  *(_DWORD *)(v2 - 96) &= 0x3Cu;
  v4 = v3;
  BYTE1(v4) = 97;
  *(_BYTE *)(v4 - 1446315911) |= BYTE1(v2);
  __asm { retf }
}
// 37B4BC2F: unbalanced stack, ignored a potential tail call
// 37B4BBFC: variable 'v2' is possibly undefined
// 37B4BBFC: variable 'v1' is possibly undefined
// 37B4BC1A: variable 'v3' is possibly undefined

//----- (0000000037C2BD49) ----------------------------------------------------
void __noreturn sub_37C2BD49()
{
  __debugbreak();
  __halt();
}
// 37C2BD49: using guessed type void __fastcall __noreturn sub_37C2BD49();

//----- (0000000037D9FFAD) ----------------------------------------------------
void __fastcall __noreturn sub_37D9FFAD(char _CL)
{
  unsigned __int64 v1; // rax
  __int64 v2; // rbp
  unsigned int v3; // edi
  unsigned int v4; // esi
  char v5; // r10
  double v6; // st7

  __asm { rcr     cl, cl }
  *(_BYTE *)(v1 + 2278342302u) -= (v1 < 0xFFFFFFFFA97E4938ui64) + v5;
  *(_DWORD *)v3 = *(_DWORD *)v4;
  *(_WORD *)(v2 - 99) = (__int16)v6;
  __halt();
}
// 37D9FFB8: variable 'v1' is possibly undefined
// 37D9FFB8: variable 'v5' is possibly undefined
// 37D9FFC2: variable 'v4' is possibly undefined
// 37D9FFC2: variable 'v3' is possibly undefined
// 37D9FFC7: variable 'v6' is possibly undefined
// 37D9FFC7: variable 'v2' is possibly undefined

//----- (0000000037DB8E8D) ----------------------------------------------------
__int64 __fastcall sub_37DB8E8D()
{
  __int64 (**v0)(void); // rsi

  return (*v0)();
}
// 37DB8E96: variable 'v0' is possibly undefined
// 37DB8E8D: using guessed type __int64 __fastcall sub_37DB8E8D();

//----- (0000000037F211FC) ----------------------------------------------------
__int64 sub_37F211FC()
{
  void *retaddr; // [rsp+0h] [rbp+0h]

  return MK_FP((_WORD)retaddr, (unsigned int)retaddr)();
}
// 37F211FC: using guessed type __int64 __fastcall sub_37F211FC();

//----- (0000000037FB7E3A) ----------------------------------------------------
__int64 sub_37FB7E3A()
{
  void *retaddr; // [rsp+0h] [rbp+0h]

  return ((__int64 (*)(void))(unsigned int)retaddr)();
}
// 37FB7E3A: using guessed type __int64 __fastcall sub_37FB7E3A();

//----- (000000003809BBF8) ----------------------------------------------------
void __fastcall sub_3809BBF8()
{
  __int64 v0; // rbp
  int v1; // esi
  __int64 v2; // r10
  __int64 v3; // r11

  *(_QWORD *)(v3 - 108) ^= v2;
  *(_BYTE *)(v0 + 575395911) = (v1 & 0x40000000) == 0;
  __asm { retfq }
}
// 3809BC17: control flows out of bounds to 3809BC19
// 3809BBF8: variable 'v2' is possibly undefined
// 3809BBF8: variable 'v3' is possibly undefined
// 3809BBFC: variable 'v1' is possibly undefined
// 3809BBFE: variable 'v0' is possibly undefined

//----- (00000000380D79FF) ----------------------------------------------------
__int64 __fastcall sub_380D79FF(__int64 a1)
{
  int v1; // eax
  bool v2; // cf

  __outbyte(0x6Cu, v1);
  v2 = __CFADD__(BYTE1(a1), *(_BYTE *)(a1 - 1597121241));
  *(_BYTE *)(a1 - 1597121241) += BYTE1(a1);
  return v1 - ((unsigned int)v2 + 1846073445);
}
// 380D7A03: variable 'v1' is possibly undefined

//----- (000000003813B95A) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_3813B95A()
{
  unsigned int v0; // eax
  __int64 v1; // rbx
  __int64 v2; // [rsp-8h] [rbp-8h]

  v2 = v1;
  __outdword(0x65u, v0);
  __asm { retf }
}
// 3813B95D: positive sp value 8 has been found
// 3813B96A: unbalanced stack, ignored a potential tail call
// 3813B95D: variable 'v1' is possibly undefined
// 3813B95E: variable 'v0' is possibly undefined

//----- (000000003816B380) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_3816B380(__int64 a1, __int64 _RDX)
{
  __int64 v2; // rax
  __int64 v3; // rdi
  _BYTE *v4; // rsi
  char v5; // t0

  while ( 1 )
  {
    LOBYTE(v2) = *v4;
    v4 += 2;
    ++v3;
    v5 = _RDX;
    LOBYTE(_RDX) = *(_BYTE *)(a1 + 8 * v2 + 361663900);
    *(_BYTE *)(a1 + 8 * v2 + 361663900) = v5;
    __asm { insd }
    v2 = MEMORY[0x78E5FB87](a1, _RDX);
  }
}
// 3816B381: positive sp value 8 has been found
// 3816B38A: variable 'v4' is possibly undefined
// 3816B38D: variable 'v3' is possibly undefined
// 3816B38E: variable '_RDX' is possibly undefined
// 3816B38E: variable 'a1' is possibly undefined
// 3816B38E: variable 'v2' is possibly undefined

//----- (000000003827E423) ----------------------------------------------------
void __fastcall sub_3827E423(char a1)
{
  char v1; // cf
  __int64 v2; // rdi

  byte_26391161[v2] += a1 + v1;
  __asm { retf }
}
// 3827E42A: unbalanced stack, ignored a potential tail call
// 3827E424: variable 'v1' is possibly undefined
// 3827E424: variable 'v2' is possibly undefined

//----- (00000000382F6AE7) ----------------------------------------------------
__int64 __fastcall sub_382F6AE7(char a1)
{
  _BYTE *v1; // rdi
  _BYTE *v2; // rsi
  __int64 v3; // r14
  __int64 result; // rax

  *(_QWORD *)(v3 + 102) >>= a1;
  result = 3387163260i64;
  *v1 = *v2;
  return result;
}
// 382F6AE8: variable 'v3' is possibly undefined
// 382F6AF9: variable 'v2' is possibly undefined
// 382F6AF9: variable 'v1' is possibly undefined

//----- (0000000038316AA1) ----------------------------------------------------
void __fastcall __noreturn sub_38316AA1(int a1)
{
  int v1; // eax
  __int16 *v2; // rdi
  double v3; // st7

  while ( 1 )
  {
    __getcallerseflags();
    v1 -= 545819270;
    if ( !v1 )
      break;
    v3 = v3 + (double)*v2;
  }
  *(_DWORD *)(v2 - 1058122967) -= a1;
  __halt();
}
// 38316AA2: variable 'v1' is possibly undefined
// 38316AA9: variable 'v2' is possibly undefined
// 38316A9A: variable 'v3' is possibly undefined

//----- (00000000383FB0C0) ----------------------------------------------------
void __fastcall __noreturn sub_383FB0C0(__int64 a1, __int64 a2)
{
  *(_DWORD *)(a2 - 45) ^= _RSI;
  __asm { rcr     byte ptr [rsi-2Eh], 1 }
  __halt();
}
// 383FB0C0: variable '_RSI' is possibly undefined

//----- (00000000384941A5) ----------------------------------------------------
__int64 sub_384941A5()
{
  void *retaddr[2]; // [rsp+8h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (00000000384BC048) ----------------------------------------------------
__int64 __fastcall sub_384BC048(__int64 a1, __int16 _DX)
{
  int v2; // eax
  __int64 v3; // rbx
  _BYTE *v4; // rdi
  _BYTE *v5; // rsi
  char v7; // t0
  __int64 v9; // [rsp+0h] [rbp-8h]
  void *retaddr[2]; // [rsp+8h] [rbp+0h]

  *v4 = *v5;
  __asm { insd }
  *(_DWORD *)&byte_325E85C3[(_QWORD)(v4 + 1)] |= v2;
  v7 = a1;
  LOBYTE(a1) = *(_BYTE *)(v3 - 1250967150);
  *(_BYTE *)(v3 - 1250967150) = v7;
  BYTE1(a1) -= *(_BYTE *)*(unsigned int *)(v9 - 1301689749);
  __inbyte(_DX);
  return MK_FP(retaddr[0], retaddr[0])(a1);
}
// 384BC048: could not find valid save-restore pair for rbp
// 384BC04A: variable 'v5' is possibly undefined
// 384BC04A: variable 'v4' is possibly undefined
// 384BC04D: variable 'v2' is possibly undefined
// 384BC053: variable 'v3' is possibly undefined
// 384BC05D: variable 'v9' is possibly undefined

//----- (000000003854490C) ----------------------------------------------------
void __noreturn sub_3854490C()
{
  __halt();
}
// 3854490C: using guessed type void __fastcall __noreturn sub_3854490C();

//----- (00000000385868A2) ----------------------------------------------------
void __fastcall sub_385868A2(__int64 a1, char a2)
{
  char v2; // zf
  char v3; // sf
  char v4; // of
  __int64 v5; // rdi

  if ( v3 ^ v4 | v2 )
  {
    *(_BYTE *)(v5 + 50888830) &= a2;
    __indword(0x6Au);
    __asm { iret }
    JUMPOUT(0x385868AEi64);
  }
  __asm { iret }
  JUMPOUT(0x385868DDi64);
}
// 385868AD: control flows out of bounds to 385868AE
// 385868DC: control flows out of bounds to 385868DD
// 385868A2: variable 'v3' is possibly undefined
// 385868A2: variable 'v4' is possibly undefined
// 385868A2: variable 'v2' is possibly undefined
// 385868A5: variable 'v5' is possibly undefined

//----- (000000003864C065) ----------------------------------------------------
void __fastcall sub_3864C065()
{
  __int32 v1; // esp

  _InterlockedExchange((volatile __int32 *)0xA6448D16i64, v1);
  __asm
  {
    frstor  byte ptr [rbx]
    retf
  }
}
// 3864C071: unbalanced stack, ignored a potential tail call
// 3864C069: variable 'v1' is possibly undefined

//----- (00000000386C0BBF) ----------------------------------------------------
void __fastcall sub_386C0BBF(__int64 a1, char a2)
{
  __int64 v2; // rdi

  *(_BYTE *)(v2 + 1599890471) = a2;
  __asm { retf }
}
// 386C0BCF: unbalanced stack, ignored a potential tail call
// 386C0BC0: variable 'v2' is possibly undefined

//----- (00000000386C4F1B) ----------------------------------------------------
void __fastcall sub_386C4F1B()
{
  __asm { retn }
}
// 386C4F1D: unbalanced stack, ignored a potential tail call

//----- (00000000386D5AE9) ----------------------------------------------------
void sub_386D5AE9()
{
  ;
}

//----- (000000003872F1DA) ----------------------------------------------------
#error "3872F1DA: stack frame is too big (funcsize=0)"

//----- (0000000038809C68) ----------------------------------------------------
void __noreturn sub_38809C68()
{
  __halt();
}
// 38809C68: using guessed type void __fastcall __noreturn sub_38809C68();

//----- (0000000038943398) ----------------------------------------------------
void __fastcall sub_38943398(int a1, char a2)
{
  _DWORD *v2; // rax
  __int64 v3; // rbx
  __int64 v4; // rsi
  bool v5; // cf

  v5 = *(_DWORD *)(v3 + 1571205948) < 0xBD374DAD;
  *(_DWORD *)(v3 + 1571205948) += 1120449107;
  *(_BYTE *)(v4 + 22) += a2 + v5;
  *v2 = a1;
}
// 3894339D: variable 'v3' is possibly undefined
// 389433A7: variable 'v4' is possibly undefined
// 389433AF: variable 'v2' is possibly undefined

//----- (00000000389A499F) ----------------------------------------------------
__int64 __fastcall sub_389A499F(__int64 a1, unsigned int *a2)
{
  return MK_FP(*((_WORD *)a2 + 2), *a2)();
}

//----- (0000000038AC5319) ----------------------------------------------------
void __fastcall __noreturn sub_38AC5319()
{
  __int64 v0; // rdi
  int v1; // esi
  char v2; // r10

  *(_DWORD *)(v0 - 833644179) = v1 + 8;
  *(_BYTE *)(v0 + 1) ^= v2;
  __halt();
}
// 38AC531A: variable 'v1' is possibly undefined
// 38AC531E: variable 'v0' is possibly undefined
// 38AC5327: variable 'v2' is possibly undefined
// 38AC5319: using guessed type void __fastcall __noreturn sub_38AC5319();

//----- (0000000038BA6CD0) ----------------------------------------------------
int __fastcall sub_38BA6CD0()
{
  __int64 v0; // rsi

  return *(_DWORD *)v0;
}
// 38BA6CD1: variable 'v0' is possibly undefined

//----- (0000000038BC5621) ----------------------------------------------------
void sub_38BC5621()
{
  __asm { retf }
}
// 38BC5631: unbalanced stack, ignored a potential tail call

//----- (0000000038C89E31) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_38C89E31(char a1)
{
  _DWORD *v1; // rdi

  *v1 >>= a1;
  __asm { lock hlt }
}
// 38C89E41: positive sp value 8 has been found
// 38C89E41: control flows out of bounds to 38C89E43
// 38C89E3E: variable 'v1' is possibly undefined

//----- (0000000038DFCECB) ----------------------------------------------------
__int64 __fastcall sub_38DFCECB(__int64 a1, __int64 a2)
{
  __int64 v2; // rdi

  BYTE1(a2) -= *(_BYTE *)(v2 + 9);
  return (*(__int64 (**)(void))(a2 + 59))();
}
// 38DFCED1: variable 'v2' is possibly undefined

//----- (0000000038E29408) ----------------------------------------------------
void __fastcall __noreturn sub_38E29408()
{
  unsigned __int8 v0; // al

  __outbyte(0xAAu, v0);
  __asm { outsd }
  __halt();
}
// 38E29409: variable 'v0' is possibly undefined
// 38E29408: using guessed type void __fastcall __noreturn sub_38E29408();

//----- (0000000038F33B46) ----------------------------------------------------
void __noreturn sub_38F33B46()
{
  __halt();
}
// 38F33B46: using guessed type void __fastcall __noreturn sub_38F33B46();

//----- (0000000038F368D7) ----------------------------------------------------
void __fastcall sub_38F368D7(__int64 a1, __int64 _RDX, __int64 a3)
{
  unsigned __int8 v3; // al
  __int64 v4; // rbp
  __int64 v5; // rsi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(char *)(a3 + v5 - 770116997) >>= 1;
  __outbyte(0x37u, v3);
  *(_WORD *)(v4 + 1931566104) = __CS__;
  __asm { insd }
  MK_FP(retaddr[0], retaddr[0])(a1, _RDX);
}
// 38F368DD: variable 'v5' is possibly undefined
// 38F368E5: variable 'v3' is possibly undefined
// 38F368E7: variable 'v4' is possibly undefined

//----- (000000003903EC7A) ----------------------------------------------------
__int64 __fastcall sub_3903EC7A()
{
  unsigned int v0; // eax
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])(v0);
}
// 3903EC7E: variable 'v0' is possibly undefined

//----- (00000000390C081F) ----------------------------------------------------
void __noreturn sub_390C081F()
{
  __halt();
}
// 390C081F: using guessed type void __fastcall __noreturn sub_390C081F();

//----- (000000003913D229) ----------------------------------------------------
void sub_3913D229()
{
  __asm { iret }
}
// 3913D22D: control flows out of bounds to 3913D22E

//----- (0000000039216F8B) ----------------------------------------------------
void __fastcall sub_39216F8B(char _CL, char _DL)
{
  __asm { rcl     dl, cl }
}

//----- (0000000039290FD9) ----------------------------------------------------
void __fastcall __noreturn sub_39290FD9(__int64 _RCX)
{
  char v1; // ah
  __int64 v2; // rbp
  int v3; // esp

  __asm { rcl     byte ptr [rcx+3Eh], cl }
  *(_DWORD *)(_RCX - 3) ^= v3;
  *(_BYTE *)(v2 - 98) -= v1;
  __halt();
}
// 39290FE3: variable 'v3' is possibly undefined
// 39290FEA: variable 'v2' is possibly undefined
// 39290FEA: variable 'v1' is possibly undefined

//----- (000000003932C580) ----------------------------------------------------
void __fastcall sub_3932C580(__int64 a1, unsigned int a2)
{
  unsigned int v2; // eax
  unsigned int v3; // et1
  char v4; // cf
  bool v5; // zf
  unsigned int v6; // eax
  char v7; // bl

  while ( v5 )
  {
    v7 -= v4 + *_RSI;
    v3 = v6;
    v2 = a2;
    a2 = v3;
    __asm { outsb }
    v6 = v2 | 0x9557E927;
    v4 = 0;
    v5 = v6 == 0;
  }
  __asm { iret }
  JUMPOUT(0x3932C5A1i64);
}
// 3932C5A0: control flows out of bounds to 3932C5A1
// 3932C581: variable 'v5' is possibly undefined
// 3932C576: variable 'v7' is possibly undefined
// 3932C576: variable 'v4' is possibly undefined
// 3932C576: variable '_RSI' is possibly undefined
// 3932C578: variable 'v6' is possibly undefined

//----- (000000003937D79F) ----------------------------------------------------
void __noreturn sub_3937D79F()
{
  _enable();
  __halt();
}
// 3937D79F: using guessed type void __fastcall __noreturn sub_3937D79F();

//----- (0000000039583493) ----------------------------------------------------
void __fastcall __noreturn sub_39583493()
{
  char v0; // al

  MEMORY[0x3B2A355010F40A16] = v0;
  __halt();
}
// 39583493: variable 'v0' is possibly undefined
// 39583493: using guessed type void __fastcall __noreturn sub_39583493();

//----- (0000000039636791) ----------------------------------------------------
void __noreturn sub_39636791()
{
  __halt();
}
// 39636791: using guessed type void __fastcall __noreturn sub_39636791();

//----- (0000000039636BB4) ----------------------------------------------------
void sub_39636BB4()
{
  __asm { iret }
}
// 39636BB5: control flows out of bounds to 39636BB6

//----- (000000003973CE41) ----------------------------------------------------
void sub_3973CE41()
{
  __asm
  {
    fsetpm
    iret
  }
}
// 3973CE45: control flows out of bounds to 3973CE46

//----- (0000000039848207) ----------------------------------------------------
void sub_39848207()
{
  __asm
  {
    icebp
    iret
  }
}
// 3984820A: control flows out of bounds to 3984820B

//----- (0000000039849003) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_39849003(_DWORD *a1, unsigned __int16 a2)
{
  __int64 v2; // rbx
  int v3; // ebp
  int v5; // er12
  int v6; // esp

  __outdword(a2, v3 - v6);
  *a1 = v6;
  MEMORY[0x9228259E039A5AD3] = v5;
  __asm { outs    dx, byte ptr [rsi] }
  *(_DWORD *)(v2 + 12) -= v2;
  __halt();
}
// 3984900A: positive sp value 8 has been found
// 39849005: variable 'v3' is possibly undefined
// 39849005: variable 'v6' is possibly undefined
// 3984900C: variable 'v5' is possibly undefined
// 3984901A: variable 'v2' is possibly undefined

//----- (00000000398E7C90) ----------------------------------------------------
void __fastcall __noreturn sub_398E7C90()
{
  char v0; // cf
  char v1; // ah
  __int64 v2; // rbx

  *(_BYTE *)(v2 - 55484932) += v1 + v0;
  __halt();
}
// 398E7C91: variable 'v1' is possibly undefined
// 398E7C91: variable 'v0' is possibly undefined
// 398E7C91: variable 'v2' is possibly undefined
// 398E7C90: using guessed type void __fastcall __noreturn sub_398E7C90();

//----- (0000000039AABA19) ----------------------------------------------------
void __fastcall __noreturn sub_39AABA19()
{
  char v0; // cf
  char v1; // ch
  _BYTE *v2; // rbx

  *v2 += v1 + v0;
  __halt();
}
// 39AABA26: variable 'v1' is possibly undefined
// 39AABA26: variable 'v0' is possibly undefined
// 39AABA26: variable 'v2' is possibly undefined
// 39AABA19: using guessed type void __fastcall __noreturn sub_39AABA19();

//----- (0000000039AB62D3) ----------------------------------------------------
void __fastcall sub_39AB62D3(__int64 a1, unsigned __int16 a2)
{
  int v2; // eax

  LOBYTE(v2) = __inbyte(a2);
  MEMORY[0xEEF04D932229E1DE] = v2;
  __asm { iret }
}
// 39AB62DD: control flows out of bounds to 39AB62DE
// 39AB62D4: variable 'v2' is possibly undefined

//----- (0000000039BE11DB) ----------------------------------------------------
__int64 __fastcall sub_39BE11DB(__int64 a1, unsigned int a2)
{
  int v2; // eax
  __int64 v3; // rbx
  __int64 result; // rax
  int v6; // et0

  BYTE1(v2) = 44;
  LOBYTE(v2) = __inbyte(a2);
  v6 = v2;
  result = a2;
  _DX = v6;
  *(_DWORD *)(v3 + 29) -= v6;
  __asm { insd }
  return result;
}
// 39BE11E2: variable 'v2' is possibly undefined
// 39BE11E6: variable 'v3' is possibly undefined

//----- (0000000039CCD56B) ----------------------------------------------------
__int64 __fastcall sub_39CCD56B()
{
  int v0; // eax

  return v0 | 0xB789AB0F;
}
// 39CCD56E: variable 'v0' is possibly undefined
// 39CCD56B: using guessed type __int64 __fastcall sub_39CCD56B();

//----- (0000000039D96B9C) ----------------------------------------------------
unsigned __int8 __fastcall sub_39D96B9C(char a1, unsigned __int16 a2)
{
  _DWORD *v2; // r10
  unsigned __int8 result; // al

  result = __inbyte(a2);
  *v2 = __ROR4__(*v2, 11);
  MEMORY[0xF90F8F2E] = __ROR1__(MEMORY[0xF90F8F2E], a1);
  return result;
}
// 39D96BA9: variable 'v2' is possibly undefined

//----- (0000000039E181F5) ----------------------------------------------------
void __fastcall __noreturn sub_39E181F5(__int64 a1, unsigned __int16 a2)
{
  __int64 v2; // rdi

  *(_DWORD *)(v2 - 49) += 91;
  __indword(a2);
  __halt();
}
// 39E181F5: variable 'v2' is possibly undefined

//----- (0000000039E8117D) ----------------------------------------------------
void __fastcall __noreturn sub_39E8117D(__int64 a1, unsigned __int16 a2)
{
  __int32 v2; // eax
  _DWORD *v3; // rbx
  unsigned int v4; // eax

  *v3 ^= 0xFF8C1D5D;
  v4 = _InterlockedExchange((volatile __int32 *)(a1 + 52), v2);
  LOBYTE(v4) = v4 - 58;
  __outdword(a2, v4);
  __halt();
}
// 39E8117D: variable 'v3' is possibly undefined
// 39E81183: variable 'v2' is possibly undefined

//----- (0000000039E87C69) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_39E87C69()
{
  unsigned int v0; // edi
  __int64 v1; // rsi
  unsigned int v2; // eax
  int v3; // [rsp-8h] [rbp-8h]

  _enable();
  v2 = v0;
  BYTE1(v2) = -37;
  __asm { icebp }
  *(_DWORD *)((v3 ^ 0xDCA58354) + 4 * v1) += 1142884886;
  *(int *)v2 >>= 1;
  __asm { iret }
}
// 39E87C6D: positive sp value 8 has been found
// 39E87C84: control flows out of bounds to 39E87C85
// 39E87C72: variable 'v0' is possibly undefined
// 39E87C72: variable 'v3' is possibly undefined
// 39E87C7B: variable 'v1' is possibly undefined

//----- (0000000039EA1B07) ----------------------------------------------------
void sub_39EA1B07()
{
  __asm { iret }
}
// 39EA1B0C: control flows out of bounds to 39EA1B0D

//----- (0000000039EF2153) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_39EF2153(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  __asm { retfq   2BFh }
}
// 39EF2154: positive sp value 8 has been found
// 39EF2154: control flows out of bounds to 39EF2159
// 39EF2153: too many input arguments, some ignored

//----- (0000000039F90817) ----------------------------------------------------
void __fastcall __noreturn sub_39F90817(__int64 a1, __int64 a2)
{
  *(char *)(a2 + 17) >>= 7;
  __halt();
}

//----- (0000000039FF84D8) ----------------------------------------------------
__int64 sub_39FF84D8()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000003A0ED9A2) ----------------------------------------------------
__int64 __fastcall sub_3A0ED9A2()
{
  unsigned int *v0; // rsi

  return MK_FP(*((_WORD *)v0 + 2), *v0)();
}
// 3A0ED9AB: variable 'v0' is possibly undefined
// 3A0ED9A2: using guessed type __int64 __fastcall sub_3A0ED9A2();

//----- (000000003A1B3E29) ----------------------------------------------------
char __fastcall sub_3A1B3E29()
{
  __int64 v0; // rsi

  return *(_BYTE *)v0;
}
// 3A1B3E2A: variable 'v0' is possibly undefined

//----- (000000003A2899B0) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_3A2899B0()
{
  _BYTE *v0; // rbx
  _BYTE *v1; // rdi
  _BYTE *v2; // rsi
  unsigned int v3; // esp
  __int64 v4; // rax
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  v4 = v3;
  *(_WORD *)(v4 - 1201516256) = __DS__;
  *v1 = *v2;
  __asm { int     0B9h; used by BASIC while in interpreter }
  *v0 &= 0xE0u;
  return MK_FP(retaddr[0], retaddr[0])(511107234i64);
}
// 3A2899BF: positive sp value 8 has been found
// 3A2899B1: variable 'v3' is possibly undefined
// 3A2899BD: variable 'v2' is possibly undefined
// 3A2899BD: variable 'v1' is possibly undefined
// 3A2899C1: variable 'v0' is possibly undefined

//----- (000000003A2E80AF) ----------------------------------------------------
void sub_3A2E80AF()
{
  __debugbreak();
  __asm { iret }
}
// 3A2E80B7: control flows out of bounds to 3A2E80B8

//----- (000000003A3920C6) ----------------------------------------------------
__int64 __fastcall sub_3A3920C6(__int64 a1)
{
  __int64 v1; // rax
  __int64 v2; // rbx
  __int64 v3; // rdi
  __int32 v4; // esi

  __asm { int     45h; Z100 - Master 8259 - Serial B }
  _InterlockedExchange((volatile __int32 *)(v1 + 16), v4);
  LOBYTE(v2) = *(_BYTE *)(v3 - 18) ^ v2;
  *(_BYTE *)(a1 - 1977432075) = 0;
  *(_BYTE *)(v2 - 1455594350) *= 2;
  return (unsigned int)v2;
}
// 3A3920CC: variable 'v1' is possibly undefined
// 3A3920CC: variable 'v4' is possibly undefined
// 3A3920DA: variable 'v3' is possibly undefined
// 3A3920DA: variable 'v2' is possibly undefined

//----- (000000003A3C1B44) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 __fastcall sub_3A3C1B44(__int64 a1, unsigned __int16 a2)
{
  unsigned int v2; // esp
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __outdword(a2, v2);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 3A3C1B49: positive sp value 794C has been found
// 3A3C1B4A: variable 'v2' is possibly undefined

//----- (000000003A4A386E) ----------------------------------------------------
void sub_3A4A386E()
{
  __asm { retf }
}
// 3A4A3870: unbalanced stack, ignored a potential tail call

//----- (000000003A4F0DD4) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_3A4F0DD4()
{
  ;
}
// 3A4F0DD5: positive sp value 8 has been found

//----- (000000003A4F74E5) ----------------------------------------------------
void __fastcall sub_3A4F74E5(__int64 a1, __int64 a2)
{
  __asm { retf }
}
// 3A4F74E6: unbalanced stack, ignored a potential tail call

//----- (000000003A4FBD17) ----------------------------------------------------
void __noreturn sub_3A4FBD17()
{
  __halt();
}
// 3A4FBD17: using guessed type void __fastcall __noreturn sub_3A4FBD17();

//----- (000000003A6906D7) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_3A6906D7(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  __asm { retnq   17AAh }
}
// 3A6906D8: positive sp value 8 has been found
// 3A6906D8: control flows out of bounds to 3A6906DC
// 3A6906D7: too many input arguments, some ignored

//----- (000000003A7006AC) ----------------------------------------------------
__int64 __fastcall sub_3A7006AC(__int64 a1, _DWORD *a2)
{
  char v3; // cf
  char v4; // zf
  int v5; // ebp
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  if ( v3 && v3 | v4 )
  {
    __asm { iret }
    JUMPOUT(0x3A7006B1i64);
  }
  *a2 = v5;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 3A7006B0: control flows out of bounds to 3A7006B1
// 3A7006AC: variable 'v3' is possibly undefined
// 3A7006AE: variable 'v4' is possibly undefined
// 3A7006A2: variable 'v5' is possibly undefined

//----- (000000003A743BB4) ----------------------------------------------------
__int64 __fastcall sub_3A743BB4()
{
  __int64 v0; // rbp

  return (*(__int64 (**)(void))(v0 - 13))();
}
// 3A743BB5: variable 'v0' is possibly undefined
// 3A743BB4: using guessed type __int64 __fastcall sub_3A743BB4();

//----- (000000003A7DD92D) ----------------------------------------------------
void __fastcall sub_3A7DD92D(__int64 a1, __int16 _DX, __int64 a3, __int64 a4)
{
  char v4; // r13

  *(_BYTE *)(a4 + 1428657049) += v4;
  __asm
  {
    insd
    iret
  }
}
// 3A7DD94F: control flows out of bounds to 3A7DD950
// 3A7DD947: variable 'v4' is possibly undefined

//----- (000000003A867ED2) ----------------------------------------------------
void __fastcall sub_3A867ED2()
{
  __asm { retn }
}
// 3A867ED7: unbalanced stack, ignored a potential tail call

//----- (000000003A8EDC3A) ----------------------------------------------------
void __noreturn sub_3A8EDC3A()
{
  __halt();
}
// 3A8EDC3A: using guessed type void __fastcall __noreturn sub_3A8EDC3A();

//----- (000000003A90CFA0) ----------------------------------------------------
void sub_3A90CFA0()
{
  __asm { iret }
}
// 3A90CFA3: control flows out of bounds to 3A90CFA4

//----- (000000003A9B899A) ----------------------------------------------------
void sub_3A9B899A()
{
  __asm { iret }
}
// 3A9B899B: control flows out of bounds to 3A9B899C

//----- (000000003AA7E3DB) ----------------------------------------------------
void sub_3AA7E3DB()
{
  ;
}

//----- (000000003AAA3EC5) ----------------------------------------------------
void __noreturn sub_3AAA3EC5()
{
  __halt();
}
// 3AAA3EC5: using guessed type void __fastcall __noreturn sub_3AAA3EC5();

//----- (000000003AB0CE09) ----------------------------------------------------
void sub_3AB0CE09()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000003AC67DDA) ----------------------------------------------------
#error "3AC67E0A: cannot convert to microcode (funcsize=31)"

//----- (000000003AF5DC34) ----------------------------------------------------
unsigned __int32 __fastcall sub_3AF5DC34(__int64 a1, __int64 a2)
{
  char v2; // bp
  __int64 v3; // r10
  double v4; // st7

  *(_DWORD *)(a2 + 115) = (int)v4;
  *(_BYTE *)(v3 - 618514492) -= v2;
  return __indword(a2);
}
// 3AF5DC36: variable 'v4' is possibly undefined
// 3AF5DC3A: variable 'v3' is possibly undefined
// 3AF5DC3A: variable 'v2' is possibly undefined

//----- (000000003AFBFC92) ----------------------------------------------------
void sub_3AFBFC92()
{
  __asm { iret }
}
// 3AFBFC96: control flows out of bounds to 3AFBFC97

//----- (000000003B0FEC1D) ----------------------------------------------------
void __fastcall __noreturn sub_3B0FEC1D(__int64 a1, unsigned __int8 a2)
{
  __outbyte(0x29u, a2);
  __halt();
}

//----- (000000003B29700A) ----------------------------------------------------
void __fastcall sub_3B29700A(__int64 a1, unsigned __int16 a2)
{
  char v2; // bh
  __int64 v3; // rbp

  __inbyte(a2);
  _disable();
  *(_BYTE *)(v3 + 81) += v2;
  MEMORY[0x41E376D1C] >>= 6;
  __asm { iret }
}
// 3B29701F: control flows out of bounds to 3B297020
// 3B297017: variable 'v2' is possibly undefined
// 3B297017: variable 'v3' is possibly undefined

//----- (000000003B373012) ----------------------------------------------------
__int64 __fastcall sub_3B373012(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
{
  return a4;
}

//----- (000000003B387D7C) ----------------------------------------------------
void __fastcall __noreturn sub_3B387D7C(_BYTE *a1)
{
  char v1; // cf
  int v4; // edi

  *a1 += _RAX + v1;
  __asm { xlat }
  *(_DWORD *)(_RAX - 125) -= v4;
  __halt();
}
// 3B387D7C: variable '_RAX' is possibly undefined
// 3B387D7C: variable 'v1' is possibly undefined
// 3B387D7F: variable 'v4' is possibly undefined

//----- (000000003B3D4D37) ----------------------------------------------------
__int64 __fastcall sub_3B3D4D37()
{
  __int64 result; // rax
  _BYTE *v1; // rdi

  __asm { rcr     dword ptr [rsi-5A984509h], 1 }
  *v1 = *_RSI;
  MEMORY[0x72539E7123C4D9C6] = result;
  return result;
}
// 3B3D4D43: variable '_RSI' is possibly undefined
// 3B3D4D43: variable 'v1' is possibly undefined
// 3B3D4D44: variable 'result' is possibly undefined
// 3B3D4D37: using guessed type __int64 __fastcall sub_3B3D4D37();

//----- (000000003B3E83D6) ----------------------------------------------------
void __fastcall sub_3B3E83D6(__int64 a1, __int64 a2)
{
  __int64 v2; // rax

  (*(void (__usercall **)(double@<st0>))(v2 - 5))((double)*(__int16 *)(a2 + 33));
  __asm { iret }
}
// 3B3E83DC: control flows out of bounds to 3B3E83DD
// 3B3E83D9: variable 'v2' is possibly undefined

//----- (000000003B47A42E) ----------------------------------------------------
void __noreturn sub_3B47A42E()
{
  __halt();
}
// 3B47A42E: using guessed type void __fastcall __noreturn sub_3B47A42E();

//----- (000000003B6186CA) ----------------------------------------------------
void __fastcall sub_3B6186CA()
{
  char v0; // ch
  __int64 v1; // rdi

  *(_BYTE *)(v1 - 89) += v0;
}
// 3B6186CB: variable 'v0' is possibly undefined
// 3B6186CB: variable 'v1' is possibly undefined

//----- (000000003B641406) ----------------------------------------------------
char __fastcall sub_3B641406()
{
  char result; // al

  __asm { xlat }
  return result;
}

//----- (000000003B66D714) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
__int64 sub_3B66D714()
{
  unsigned __int64 v1; // [rsp-8h] [rbp-8h]
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  __writeeflags(v1);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 3B66D715: positive sp value 8 has been found
// 3B66D714: variable 'v1' is possibly undefined

//----- (000000003B68194E) ----------------------------------------------------
char __fastcall sub_3B68194E()
{
  char v0; // al

  return v0 | 0x86;
}
// 3B68194F: variable 'v0' is possibly undefined

//----- (000000003B809BD1) ----------------------------------------------------
__int64 __fastcall sub_3B809BD1()
{
  int v0; // eax
  _BYTE *v1; // rbx
  __int64 v2; // rbp
  __int64 v3; // rdi
  _DWORD *v4; // rsi
  __int64 v5; // rax

  *v1 |= (unsigned __int8)v1;
  v5 = (unsigned int)(v0 - 1766045167);
  *(_BYTE *)(*(unsigned int *)(v5 - 351059552) - 63i64) &= v5;
  *(_DWORD *)(v2 - 84) &= 0xAC11E0C1;
  *(_DWORD *)v3 = *v4;
  LOBYTE(v5) = *(_BYTE *)(v3 + 4) + (v5 & 0x70);
  return (unsigned int)((_DWORD)&off_1460D13D + v5);
}
// 3B809BD1: variable 'v1' is possibly undefined
// 3B809BD8: variable 'v0' is possibly undefined
// 3B809BE6: variable 'v2' is possibly undefined
// 3B809C00: variable 'v4' is possibly undefined
// 3B809C00: variable 'v3' is possibly undefined
// 1460D13D: using guessed type void *__ptr32 off_1460D13D;
// 3B809BD1: using guessed type __int64 __fastcall sub_3B809BD1();

//----- (000000003B82033A) ----------------------------------------------------
void __noreturn sub_3B82033A()
{
  __halt();
}
// 3B82033A: using guessed type void __fastcall __noreturn sub_3B82033A();

//----- (000000003B863405) ----------------------------------------------------
void __noreturn sub_3B863405()
{
  __halt();
}
// 3B863405: using guessed type void __fastcall __noreturn sub_3B863405();

//----- (000000003B8AFAE1) ----------------------------------------------------
void __fastcall sub_3B8AFAE1()
{
  __asm { retn }
}
// 3B8AFAE2: unbalanced stack, ignored a potential tail call

//----- (000000003BA84397) ----------------------------------------------------
__int64 __fastcall sub_3BA84397(int a1)
{
  __int64 v1; // rbx
  unsigned int v2; // ebp

  *(_DWORD *)(v1 + 2043294186) += a1;
  return v2;
}
// 3BA84397: variable 'v1' is possibly undefined
// 3BA8439E: variable 'v2' is possibly undefined

//----- (000000003BADB63E) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall sub_3BADB63E(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  __asm { retnw   6641h }
}
// 3BADB63F: positive sp value 8 has been found
// 3BADB63F: control flows out of bounds to 3BADB644
// 3BADB63E: too many input arguments, some ignored

//----- (000000003BB9C105) ----------------------------------------------------
void sub_3BB9C105()
{
  __asm { iret }
}
// 3BB9C106: control flows out of bounds to 3BB9C107

//----- (000000003BBDD9EB) ----------------------------------------------------
void __noreturn sub_3BBDD9EB()
{
  __asm { int     27h; DOS - TERMINATE BUT STAY RESIDENT }
}
// 3BBDD9EC: control flows out of bounds to 3BBDD9EE
// 3BBDD9EB: using guessed type void __fastcall __noreturn sub_3BBDD9EB();

//----- (000000003BDD214F) ----------------------------------------------------
__int64 __fastcall sub_3BDD214F()
{
  int v0; // eax

  return v0 - (((v0 & 0x100) != 0) + (unsigned int)&unk_35724D61);
}
// 3BDD2150: variable 'v0' is possibly undefined
// 3BDD214F: using guessed type __int64 __fastcall sub_3BDD214F();

//----- (000000003BE3F661) ----------------------------------------------------
void __fastcall sub_3BE3F661()
{
  int v0; // eax

  MEMORY[0xC7F16A9E08E9D6D9] = v0;
  __asm { iret }
}
// 3BE3F66B: control flows out of bounds to 3BE3F66C
// 3BE3F662: variable 'v0' is possibly undefined

//----- (000000003BF001EB) ----------------------------------------------------
void sub_3BF001EB()
{
  __asm { iret }
}
// 3BF001EC: control flows out of bounds to 3BF001ED

//----- (000000003BFE8B8A) ----------------------------------------------------
void __fastcall __noreturn sub_3BFE8B8A()
{
  int v0; // eax

  MEMORY[0x69CA3F39E0A47AF7] = v0;
  __halt();
}
// 3BFE8B8A: variable 'v0' is possibly undefined
// 3BFE8B8A: using guessed type void __fastcall __noreturn sub_3BFE8B8A();

//----- (000000003BFE9657) ----------------------------------------------------
void __fastcall sub_3BFE9657(__int64 a1, unsigned __int16 a2)
{
  int v2; // eax

  __outdword(a2, v2 ^ 0x6F24363E);
  __asm { iret }
}
// 3BFE965D: control flows out of bounds to 3BFE965E
// 3BFE9657: variable 'v2' is possibly undefined

//----- (000000003C048926) ----------------------------------------------------
__int64 __fastcall sub_3C048926(unsigned int a1, __int16 _DX)
{
  _BYTE *v2; // rdi
  _BYTE *v3; // rsi
  __int64 result; // rax

  result = a1;
  __asm { int     0F2h }
  *v2 = *v3;
  __asm { insb }
  return result;
}
// 3C048929: variable 'v3' is possibly undefined
// 3C048929: variable 'v2' is possibly undefined

//----- (000000003C24A3DC) ----------------------------------------------------
void __fastcall __noreturn sub_3C24A3DC(__int64 a1, __int64 a2)
{
  __int64 v2; // rax
  int v3; // ebx
  __int64 v4; // rdi
  char v5; // t0

  v5 = *(_BYTE *)(v4 - 1503261164) + a1;
  LOBYTE(a1) = *(_BYTE *)(v4 - 1503261164);
  *(_BYTE *)(v4 - 1503261164) = v5;
  *(_BYTE *)(a2 - 92) = __ROR1__(*(_BYTE *)(a2 - 92), 183);
  BYTE1(v2) = -33;
  *(_DWORD *)(a1 + 2 * v2 + 95) = v3;
  JUMPOUT(0x840AAC2Fi64);
}
// 3C24A3F0: control flows out of bounds to 840AAC2F
// 3C24A3DC: variable 'v4' is possibly undefined
// 3C24A3EC: variable 'v3' is possibly undefined
// 3C24A3EC: variable 'v2' is possibly undefined

//----- (000000003C2BEF10) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_3C2BEF10()
{
  _disable();
  __asm { iret }
}
// 3C2BEF1F: positive sp value 8 has been found
// 3C2BEF25: control flows out of bounds to 3C2BEF26

//----- (000000003C2DA234) ----------------------------------------------------
void __fastcall sub_3C2DA234()
{
  unsigned int v0; // eax

  --*(_BYTE *)v0;
  JUMPOUT(0xFFFFFFFFC8FBB189ui64);
}
// 3C2DA23D: control flows out of bounds to FFFFFFFFC8FBB189
// 3C2DA239: variable 'v0' is possibly undefined

//----- (000000003C32E8E9) ----------------------------------------------------
#error "3C32E8EE: cannot convert to microcode (funcsize=5)"

//----- (000000003C37BB1F) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_3C37BB1F()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  MK_FP(retaddr[0], retaddr[0])();
}
// 3C37BB20: positive sp value 8 has been found

//----- (000000003C3E283C) ----------------------------------------------------
void __fastcall sub_3C3E283C()
{
  __int64 v0; // r14

  *(_BYTE *)(v0 - 925385702) |= v0;
}
// 3C3E283D: variable 'v0' is possibly undefined

//----- (000000003C4EBF22) ----------------------------------------------------
void __fastcall __noreturn sub_3C4EBF22(__int64 a1, unsigned __int16 a2)
{
  __indword(a2);
  __halt();
}

//----- (000000003C5BA76D) ----------------------------------------------------
__int64 __fastcall sub_3C5BA76D(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9,
        __int64 a10)
{
  char v10; // ch
  __int64 v11; // rbx
  unsigned __int64 v12; // rdi

  v12 = *(unsigned int *)(v11 + 681825284);
  *((_BYTE *)&a10 + 8 * v12 + 6) |= v10;
  return ((__int64 (*)(void))v12)();
}
// 3C5BA76D: variable 'v11' is possibly undefined

//----- (000000003C6B20D6) ----------------------------------------------------
void __fastcall __noreturn sub_3C6B20D6()
{
  unsigned int v0; // ebx

  *(_BYTE *)v0 = 0;
  __halt();
}
// 3C6B20DD: variable 'v0' is possibly undefined
// 3C6B20D6: using guessed type void __fastcall __noreturn sub_3C6B20D6();

//----- (000000003C700893) ----------------------------------------------------
void sub_3C700893()
{
  ;
}

//----- (000000003C7ADBE6) ----------------------------------------------------
__int64 __fastcall sub_3C7ADBE6(__int64 a1)
{
  unsigned int v1; // eax
  __int64 (__fastcall *v2)(__int64, _QWORD); // rdi

  LOBYTE(v1) = v1 & 0x4B;
  return v2(a1, v1);
}
// 3C7ADBE6: variable 'v1' is possibly undefined
// 3C7ADBEE: variable 'v2' is possibly undefined

//----- (000000003C8CE942) ----------------------------------------------------
void __fastcall sub_3C8CE942(__int64 a1, unsigned __int16 a2)
{
  unsigned int v2; // eax

  __outdword(a2, v2);
  ((void (*)(void))loc_671F1B)();
  __asm { iretd }
}
// 3C8CE94A: control flows out of bounds to 3C8CE94C
// 3C8CE944: variable 'v2' is possibly undefined

//----- (000000003C968F1F) ----------------------------------------------------
void __fastcall __noreturn sub_3C968F1F()
{
  __asm { outsb }
  __halt();
}
// 3C968F1F: using guessed type void __fastcall __noreturn sub_3C968F1F();

//----- (000000003C970FE2) ----------------------------------------------------
void __fastcall sub_3C970FE2()
{
  __asm { retn }
}
// 3C970FE3: unbalanced stack, ignored a potential tail call

//----- (000000003C987FDD) ----------------------------------------------------
void __fastcall sub_3C987FDD()
{
  _BYTE *v0; // rbx

  *v0 -= BYTE1(v0);
  __asm { retnq }
}
// 3C987FE1: control flows out of bounds to 3C987FE3
// 3C987FDF: variable 'v0' is possibly undefined

//----- (000000003C9F701E) ----------------------------------------------------
void __fastcall sub_3C9F701E()
{
  __asm
  {
    outsb
    iret
  }
}
// 3C9F7020: control flows out of bounds to 3C9F7021

//----- (000000003CA0F1DC) ----------------------------------------------------
void __fastcall sub_3CA0F1DC()
{
  __asm { retn }
}
// 3CA0F1DD: unbalanced stack, ignored a potential tail call

//----- (000000003CB1BBE7) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_3CB1BBE7()
{
  unsigned __int64 v0; // [rsp-8h] [rbp-10h]

  __writeeflags(v0);
  __asm { iret }
}
// 3CB1BBED: positive sp value 8 has been found
// 3CB1BBED: control flows out of bounds to 3CB1BBEE
// 3CB1BBE8: variable 'v0' is possibly undefined

//----- (000000003CB64CB8) ----------------------------------------------------
__int64 sub_3CB64CB8()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000003CC7D57A) ----------------------------------------------------
void __noreturn sub_3CC7D57A()
{
  __halt();
}
// 3CC7D57A: using guessed type void __fastcall __noreturn sub_3CC7D57A();

//----- (000000003CD1EB08) ----------------------------------------------------
void sub_3CD1EB08()
{
  __asm { retf }
}
// 3CD1EB09: unbalanced stack, ignored a potential tail call

//----- (000000003CE07BEB) ----------------------------------------------------
void __fastcall sub_3CE07BEB()
{
  int v0; // ebx
  __int64 v1; // rdi

  *(_DWORD *)(v1 - 422217731) ^= v0;
  __asm { iret }
}
// 3CE07BF4: control flows out of bounds to 3CE07BF5
// 3CE07BEE: variable 'v0' is possibly undefined
// 3CE07BEE: variable 'v1' is possibly undefined

//----- (000000003CF2AB59) ----------------------------------------------------
void sub_3CF2AB59()
{
  __asm { iret }
}
// 3CF2AB5F: control flows out of bounds to 3CF2AB60

//----- (000000003CF3B1B4) ----------------------------------------------------
void __fastcall sub_3CF3B1B4()
{
  _DWORD *v0; // rax

  --*v0;
  __asm { iret }
}
// 3CF3B1C0: control flows out of bounds to 3CF3B1C1
// 3CF3B1B4: variable 'v0' is possibly undefined

//----- (000000003CF7EF3F) ----------------------------------------------------
void __fastcall sub_3CF7EF3F()
{
  char v0; // al

  MEMORY[0x26873FF10128AC3] = v0 | 0x1E;
  __asm { iret }
}
// 3CF7EF5C: control flows out of bounds to 3CF7EF5D
// 3CF7EF53: variable 'v0' is possibly undefined

//----- (000000003D0C6544) ----------------------------------------------------
__int64 __fastcall sub_3D0C6544()
{
  __int64 result; // rax

  MEMORY[0x8F4D42253DDD4DBC] = result;
  return result;
}
// 3D0C6544: variable 'result' is possibly undefined
// 3D0C6544: using guessed type __int64 __fastcall sub_3D0C6544();

//----- (000000003D11E0FB) ----------------------------------------------------
__int64 sub_3D11E0FB()
{
  void *retaddr; // [rsp+0h] [rbp+0h]

  return MK_FP((_WORD)retaddr, retaddr)();
}
// 3D11E0FB: using guessed type __int64 __fastcall sub_3D11E0FB();

//----- (000000003D121320) ----------------------------------------------------
void sub_3D121320()
{
  __asm { iretq }
}
// 3D121326: control flows out of bounds to 3D121328

//----- (000000003D4764DB) ----------------------------------------------------
void __fastcall sub_3D4764DB(int a1)
{
  __int64 v1; // rdi
  _DWORD *v2; // rdi

  v2 = (_DWORD *)(v1 + 1);
  *v2 = a1;
  ++*((_BYTE *)v2 - 111991447);
  __asm { retf }
}
// 3D4764F0: unbalanced stack, ignored a potential tail call
// 3D4764E1: variable 'v1' is possibly undefined

//----- (000000003D47F98C) ----------------------------------------------------
__int64 __fastcall sub_3D47F98C()
{
  unsigned int v0; // eax
  unsigned __int8 v1; // dh
  char v2; // bh
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  if ( !(((char)(*(_BYTE *)v0 + (v1 < BYTE1(v0)) + v2) < 0) ^ (__OFADD__(v1 < BYTE1(v0), v2) | __OFADD__(
                                                                                                 *(_BYTE *)v0,
                                                                                                 (v1 < BYTE1(v0)) + v2)) | (*(_BYTE *)v0 + (v1 < BYTE1(v0)) + v2 == 0)) )
    JUMPOUT(0x3D47F983i64);
  return MK_FP(retaddr[0], retaddr[0])();
}
// 3D47F981: control flows out of bounds to 3D47F983
// 3D47F996: variable 'v0' is possibly undefined
// 3D47F994: variable 'v1' is possibly undefined
// 3D47F997: variable 'v2' is possibly undefined

//----- (000000003D4A57F4) ----------------------------------------------------
void __fastcall sub_3D4A57F4()
{
  __asm { retn }
}
// 3D4A57F5: unbalanced stack, ignored a potential tail call

//----- (000000003D523D8C) ----------------------------------------------------
void sub_3D523D8C()
{
  ;
}

//----- (000000003D55F30B) ----------------------------------------------------
void __fastcall __noreturn sub_3D55F30B(__int64 a1, int _EDX)
{
  __asm { rcl     edx, 96h }
  __halt();
}

//----- (000000003D64A3AF) ----------------------------------------------------
void __noreturn sub_3D64A3AF()
{
  __getcallerseflags();
  __halt();
}
// 3D64A3AF: using guessed type void __fastcall __noreturn sub_3D64A3AF();

//----- (000000003D671EDE) ----------------------------------------------------
void __noreturn sub_3D671EDE()
{
  __halt();
}
// 3D671EDE: using guessed type void __fastcall __noreturn sub_3D671EDE();

//----- (000000003D7E071C) ----------------------------------------------------
void __fastcall sub_3D7E071C(__int64 a1, __int16 _DX)
{
  char v2; // al
  int v3; // ebx
  __int64 v4; // rbp
  __int64 v5; // rdi
  char v6; // t0
  unsigned __int64 v8; // [rsp+0h] [rbp-8h]

  MEMORY[0x6337315578C77CB7] = v2;
  v6 = BYTE1(a1);
  BYTE1(a1) = *(_BYTE *)(v4 - 31);
  *(_BYTE *)(v4 - 31) = v6;
  __asm { insb }
  *(_DWORD *)(v5 + 1325638462) |= 0x1A6DCB69u;
  LOBYTE(v3) = 21;
  __writeeflags(v8);
  *(_DWORD *)(a1 - 85) ^= v3;
  __asm { iret }
}
// 3D7E07D6: control flows out of bounds to 3D7E07D7
// 3D7E071D: variable 'v2' is possibly undefined
// 3D7E0727: variable 'v4' is possibly undefined
// 3D7E072B: variable 'v5' is possibly undefined
// 3D7E0746: variable 'v8' is possibly undefined
// 3D7E07D2: variable 'v3' is possibly undefined
// 50: using guessed type int dword_50;

//----- (000000003D97F59D) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn sub_3D97F59D(__int64 a1, __int64 a2)
{
  __int64 v2; // rsi

  *(char *)(a2 + 2 * v2 - 24) >>= 2;
  __asm { int     1Ch; CLOCK TICK }
  __halt();
}
// 3D97F5B3: positive sp value 1A24 has been found
// 3D97F5A7: variable 'v2' is possibly undefined

//----- (000000003DA201A8) ----------------------------------------------------
void __fastcall __noreturn sub_3DA201A8(__int64 a1, _BYTE *a2)
{
  __int64 v3; // rbx
  __int64 v4; // rdi

  LOBYTE(a2) = byte_3A2A5314[v3] & (unsigned __int8)a2;
  if ( (_BYTE)a2 )
    __outdword(1u, (unsigned int)_RAX);
  LOBYTE(_RAX) = MEMORY[0x20C8014506C4891F];
  *a2 += MEMORY[0x20C8014506C4891F];
  *_RAX |= (unsigned int)_RAX;
  *(_BYTE *)(5i64 * (_QWORD)_RAX) += 88;
  __asm { rcl     byte ptr [rax-7A848600h], 1 }
  _InterlockedExchange((volatile __int32 *)(v4 - 15), v4);
  __halt();
}
// 3DA201A8: variable 'v3' is possibly undefined
// 3DA201B6: variable '_RAX' is possibly undefined
// 3DA201D0: variable 'v4' is possibly undefined

//----- (000000003DBF53D5) ----------------------------------------------------
void __fastcall __noreturn sub_3DBF53D5()
{
  __asm { xlat }
  __halt();
}
// 3DBF53D5: using guessed type void __fastcall __noreturn sub_3DBF53D5();

//----- (000000003DC6F19F) ----------------------------------------------------
__int64 __fastcall sub_3DC6F19F(__int64 a1, _BYTE *_RDX)
{
  char v2; // cf
  char v3; // zf
  char v4; // sf
  char v5; // of
  char v6; // pf
  __int64 result; // rax
  _BYTE *v8; // rdi
  _BYTE *v9; // rsi
  __int64 (*v11)(void); // rdi
  _BYTE *v12; // rsi
  __int64 v13; // rcx

  BYTE1(result) = BYTE1(_RDX);
  __outdword(0x59u, result);
  if ( v6 )
    __halt();
  __asm { insd }
  *v8 = *v9;
  v12 = v9 + 1;
  v11 = (__int64 (*)(void))(v8 + 1);
  __asm { insd }
  if ( !(v4 ^ v5 | v3) )
  {
    *_RDX -= v2 + BYTE1(_RDX);
    __readeflags();
    *(_DWORD *)v11 = v11();
    BYTE1(v13) = 79;
    *(int *)(v12 + 122) >>= 10;
    __asm
    {
      insd
      jmp     rcx
    }
  }
  return result;
}
// 3DC6F1A6: variable 'result' is possibly undefined
// 3DC6F1A8: variable 'v6' is possibly undefined
// 3DC6F1D4: variable 'v9' is possibly undefined
// 3DC6F1D4: variable 'v8' is possibly undefined
// 3DC6F1D6: variable 'v4' is possibly undefined
// 3DC6F1D6: variable 'v5' is possibly undefined
// 3DC6F1D6: variable 'v3' is possibly undefined
// 3DC6F1D8: variable 'v2' is possibly undefined
// 3DC6F1EF: variable 'v13' is possibly undefined

//----- (000000003DC9C5C9) ----------------------------------------------------
__int64 __fastcall sub_3DC9C5C9(__int64 a1, __int64 _RDX)
{
  char v2; // cf
  __int64 v3; // rdi
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *(_DWORD *)(v3 - 167337499) -= v2 + (_DWORD)a1;
  __asm { insd }
  return MK_FP(retaddr[0], retaddr[0])(a1, _RDX);
}
// 3DC9C5C9: variable 'v3' is possibly undefined
// 3DC9C5C9: variable 'v2' is possibly undefined

//----- (000000003DDC64CE) ----------------------------------------------------
void __fastcall sub_3DDC64CE()
{
  char v0; // dh
  __int64 v1; // rsi

  byte_375101E7[v1] = v0;
}
// 3DDC64CE: variable 'v0' is possibly undefined
// 3DDC64CE: variable 'v1' is possibly undefined

//----- (000000003DE0D700) ----------------------------------------------------
__int64 sub_3DE0D700()
{
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  return MK_FP(retaddr[0], retaddr[0])();
}

//----- (000000003DF268E0) ----------------------------------------------------
void sub_3DF268E0()
{
  ;
}

//----- (000000003E009F3D) ----------------------------------------------------
void __fastcall __noreturn sub_3E009F3D()
{
  char v0; // al
  __int64 v1; // rbp

  _InterlockedExchange((volatile __int32 *)(v1 - 75771989), v1);
  __outbyte(0x6Eu, v0 & 0x93);
  __halt();
}
// 3E009F46: variable 'v1' is possibly undefined
// 3E009F3E: variable 'v0' is possibly undefined
// 3E009F3D: using guessed type void __fastcall __noreturn sub_3E009F3D();

//----- (000000003E0E3D4C) ----------------------------------------------------
void __fastcall __noreturn sub_3E0E3D4C()
{
  int v0; // ebp
  __int64 v1; // rdi

  *(_DWORD *)(v1 - 1499250548) = v0;
  __halt();
}
// 3E0E3D5F: variable 'v0' is possibly undefined
// 3E0E3D5F: variable 'v1' is possibly undefined
// 3E0E3D4C: using guessed type void __fastcall __noreturn sub_3E0E3D4C();

//----- (000000003E180CD6) ----------------------------------------------------
void __fastcall sub_3E180CD6()
{
  __asm { retn }
}
// 3E180CD7: unbalanced stack, ignored a potential tail call

//----- (000000003E33DD4B) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_3E33DD4B()
{
  __debugbreak();
}
// 3E33DD4D: positive sp value 8 has been found

//----- (000000003E3AF6CC) ----------------------------------------------------
void sub_3E3AF6CC()
{
  __asm { retfw   0CB6Ch }
}
// 3E3AF6CD: control flows out of bounds to 3E3AF6D1

//----- (000000003E3B4A39) ----------------------------------------------------
__int64 __fastcall sub_3E3B4A39()
{
  __int64 result; // rax

  return (unsigned int)result;
}
// 3E3B4A44: variable 'result' is possibly undefined
// 3E3B4A39: using guessed type __int64 __fastcall sub_3E3B4A39();

//----- (000000003E6EF1EA) ----------------------------------------------------
void __fastcall sub_3E6EF1EA(char a1, __int64 a2)
{
  __asm { int     15h }
  *(_DWORD *)(a2 + 71) ^= 0x55D4ABDBu;
  MEMORY[0x55D4AC4A] <<= a1;
}

//----- (000000003E8F8EFD) ----------------------------------------------------
void __fastcall sub_3E8F8EFD()
{
  __int64 v0; // rax

  *(_BYTE *)(v0 - 669254116) *= 2;
  __asm { retnq   0E46Bh }
}
// 3E8F8F03: control flows out of bounds to 3E8F8F07
// 3E8F8EFD: variable 'v0' is possibly undefined

//----- (000000003E97D81C) ----------------------------------------------------
void __fastcall sub_3E97D81C()
{
  __asm
  {
    vmread  rsi, rbx
    retn
  }
}
// 3E97D823: unbalanced stack, ignored a potential tail call

//----- (000000003E9E987E) ----------------------------------------------------
void sub_3E9E987E()
{
  __asm { retnq }
}
// 3E9E9884: control flows out of bounds to 3E9E9886

//----- (000000003EA0A311) ----------------------------------------------------
void __fastcall __noreturn sub_3EA0A311()
{
  __asm { outsd }
  __halt();
}
// 3EA0A311: using guessed type void __fastcall __noreturn sub_3EA0A311();

//----- (000000003EA1E1AE) ----------------------------------------------------
// write access to const memory has been detected, the output may be wrong!
int __fastcall sub_3EA1E1AE(__int64 _RCX)
{
  char v1; // zf
  char v2; // sf
  char v3; // of
  __int16 v4; // ax
  __int64 v5; // rbp
  _DWORD *v6; // rdi
  _DWORD *v7; // rsi
  __int16 v8; // t0
  int result; // eax
  __int64 v11; // [rsp-8h] [rbp-8h]

  if ( v2 ^ v3 | v1 )
  {
    v11 = 27i64;
    __outbyte(0x7Au, v4);
    MEMORY[0xA7158645] <<= 27;
    __inbyte(0x92u);
    __asm { retf }
  }
  v8 = v4;
  LOWORD(result) = v5;
  LOWORD(v5) = v8;
  *v6 = *v7;
  __asm { fbstp   tbyte ptr [rbp+3706901Ch] }
  *(double *)(v5 + 923176988) = _RT1;
  __asm { fisttp  dword ptr [rcx-6BC3D40h] }
  __outdword(0xA1u, result);
  result = (__int16)result;
  dword_9FC28D6 = (_DWORD)v7 + 4;
  return result;
}
// 3EA1E1E9: inconsistent fpu stack
// 3EA1E1FE: write access to const memory at 9FC28D6 has been detected
// 3EA1E1AE: variable 'v2' is possibly undefined
// 3EA1E1AE: variable 'v3' is possibly undefined
// 3EA1E1AE: variable 'v1' is possibly undefined
// 3EA1E1BB: variable 'v4' is possibly undefined
// 3EA1E1E6: variable 'v5' is possibly undefined
// 3EA1E1E8: variable 'v7' is possibly undefined
// 3EA1E1E8: variable 'v6' is possibly undefined
// 9FC28D6: using guessed type int dword_9FC28D6;

//----- (000000003EB61DBC) ----------------------------------------------------
void sub_3EB61DBC()
{
  __asm { iret }
}
// 3EB61DBD: control flows out of bounds to 3EB61DBE

//----- (000000003EC169DA) ----------------------------------------------------
// bad sp value at call has been detected, the output may be wrong!
__int64 __fastcall sub_3EC169DA(
        __int64 a1,
        _WORD *a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11,
        __int64 a12,
        __int64 a13,
        __int64 a14,
        __int64 a15,
        __int64 a16,
        __int64 a17,
        __int64 a18,
        __int64 a19,
        __int64 a20,
        __int64 a21,
        __int64 a22,
        __int64 a23,
        __int64 a24,
        __int64 a25,
        __int64 a26,
        __int64 a27,
        __int64 a28,
        __int64 a29,
        __int64 a30,
        __int64 a31,
        __int64 a32,
        __int64 a33,
        __int64 a34,
        __int64 a35,
        __int64 a36,
        __int64 a37,
        __int64 a38,
        __int64 a39,
        __int64 a40,
        __int64 a41,
        __int64 a42,
        __int64 a43,
        __int64 a44,
        __int64 a45,
        __int64 a46,
        __int64 a47,
        __int64 a48,
        __int64 a49,
        __int64 a50,
        __int64 a51,
        __int64 a52,
        __int64 a53,
        __int64 a54,
        __int64 a55,
        __int64 a56,
        __int64 a57,
        __int64 a58,
        __int64 a59,
        __int64 a60,
        __int64 a61,
        __int64 a62,
        __int64 a63)
{
  double v66; // st7
  void *retaddr[2]; // [rsp+0h] [rbp+0h]

  *a2 = (__int16)v66;
  return MK_FP(retaddr[0], retaddr[0])();
}
// 3EC169DC: bad sp value at call
// 3EC169DA: variable 'v66' is possibly undefined
// 3EC169DA: too many input arguments, some ignored

//----- (000000003ECB269F) ----------------------------------------------------
void sub_3ECB269F()
{
  ;
}

//----- (000000003ED2A1B5) ----------------------------------------------------
void __fastcall sub_3ED2A1B5()
{
  __asm { retn }
}
// 3ED2A1B6: unbalanced stack, ignored a potential tail call

//----- (000000003EF93227) ----------------------------------------------------
void __fastcall sub_3EF93227(__int64 a1, __int64 a2)
{
  *(_BYTE *)(a2 - 687865827) += BYTE1(a2);
  __asm { iret }
}
// 3EF9322D: control flows out of bounds to 3EF9322E

// nfuncs=6707 queued=1223 decompiled=1223 lumina nreq=0 worse=0 better=0
#error "There were 24 decompilation failure(s) on 1223 function(s)"
